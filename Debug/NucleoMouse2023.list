
NucleoMouse2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001034  08008a68  08008a68  00018a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a9c  08009a9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08009a9c  08009a9c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a9c  08009a9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a9c  08009a9c  00019a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009aa0  08009aa0  00019aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000005a8  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000618  20000618  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      000000a0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015a56  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000329a  00000000  00000000  00035b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001188  00000000  00000000  00038e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001040  00000000  00000000  00039fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e9b3  00000000  00000000  0003aff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000190fe  00000000  00000000  000599ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000aeb37  00000000  00000000  00072aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ff0  00000000  00000000  001215e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a50 	.word	0x08008a50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008a50 	.word	0x08008a50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <led_write>:
// 引数1：led1 …… led1のON/OFF　0なら消灯
// 引数2：led2 …… led2のON/OFF　0なら消灯
// 引数3：led3 …… led3のON/OFF　0なら消灯
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write(uint8_t led1, uint8_t led2, uint8_t led3) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
 800027a:	460b      	mov	r3, r1
 800027c:	71bb      	strb	r3, [r7, #6]
 800027e:	4613      	mov	r3, r2
 8000280:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, led1);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	461a      	mov	r2, r3
 8000286:	2101      	movs	r1, #1
 8000288:	480a      	ldr	r0, [pc, #40]	; (80002b4 <led_write+0x44>)
 800028a:	f004 f9d3 	bl	8004634 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, led2);
 800028e:	79bb      	ldrb	r3, [r7, #6]
 8000290:	461a      	mov	r2, r3
 8000292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029a:	f004 f9cb 	bl	8004634 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, led3);
 800029e:	797b      	ldrb	r3, [r7, #5]
 80002a0:	461a      	mov	r2, r3
 80002a2:	2101      	movs	r1, #1
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <led_write+0x48>)
 80002a6:	f004 f9c5 	bl	8004634 <HAL_GPIO_WritePin>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	48001400 	.word	0x48001400
 80002b8:	48000400 	.word	0x48000400

080002bc <led_write_2>:
// led_write2
// LEDを点灯させる
// 引数1：led4 …… led4のON/OFF　0なら消灯
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void led_write_2(uint8_t led4) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, led4);
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	461a      	mov	r2, r3
 80002ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d2:	f004 f9af 	bl	8004634 <HAL_GPIO_WritePin>
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <select_mode>:
// select_mode
// モード選択を行う
// 引数1：モード番号の初期値
// 戻り値：選択されたモード番号
//+++++++++++++++++++++++++++++++++++++++++++++++
int select_mode(int mode) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
    printf("Mode : %d\n", mode);
 80002e8:	6879      	ldr	r1, [r7, #4]
 80002ea:	4838      	ldr	r0, [pc, #224]	; (80003cc <select_mode+0xec>)
 80002ec:	f007 fad6 	bl	800789c <iprintf>

    while (1) {
        led_write(mode & 0b001, mode & 0b010, mode & 0b100);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	b2d8      	uxtb	r0, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	f003 0302 	and.w	r3, r3, #2
 8000302:	b2d9      	uxtb	r1, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	b2db      	uxtb	r3, r3
 8000308:	f003 0304 	and.w	r3, r3, #4
 800030c:	b2db      	uxtb	r3, r3
 800030e:	461a      	mov	r2, r3
 8000310:	f7ff ffae 	bl	8000270 <led_write>
        if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_RESET) {
 8000314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031c:	f004 f972 	bl	8004604 <HAL_GPIO_ReadPin>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d118      	bne.n	8000358 <select_mode+0x78>
            HAL_Delay(100);
 8000326:	2064      	movs	r0, #100	; 0x64
 8000328:	f002 fd78 	bl	8002e1c <HAL_Delay>
            while (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_RESET)
 800032c:	bf00      	nop
 800032e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000336:	f004 f965 	bl	8004604 <HAL_GPIO_ReadPin>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0f6      	beq.n	800032e <select_mode+0x4e>
                ;
            mode++;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3301      	adds	r3, #1
 8000344:	607b      	str	r3, [r7, #4]
            if (mode > 7) {
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2b07      	cmp	r3, #7
 800034a:	dd01      	ble.n	8000350 <select_mode+0x70>
                mode = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	607b      	str	r3, [r7, #4]
            }
            printf("Mode : %d\n", mode);
 8000350:	6879      	ldr	r1, [r7, #4]
 8000352:	481e      	ldr	r0, [pc, #120]	; (80003cc <select_mode+0xec>)
 8000354:	f007 faa2 	bl	800789c <iprintf>
        }
        if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_RESET) {
 8000358:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800035c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000360:	f004 f950 	bl	8004604 <HAL_GPIO_ReadPin>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d118      	bne.n	800039c <select_mode+0xbc>
            HAL_Delay(100);
 800036a:	2064      	movs	r0, #100	; 0x64
 800036c:	f002 fd56 	bl	8002e1c <HAL_Delay>
            while (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_RESET)
 8000370:	bf00      	nop
 8000372:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000376:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037a:	f004 f943 	bl	8004604 <HAL_GPIO_ReadPin>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f6      	beq.n	8000372 <select_mode+0x92>
                ;
            mode--;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3b01      	subs	r3, #1
 8000388:	607b      	str	r3, [r7, #4]
            if (mode < 0) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b00      	cmp	r3, #0
 800038e:	da01      	bge.n	8000394 <select_mode+0xb4>
                mode = 7;
 8000390:	2307      	movs	r3, #7
 8000392:	607b      	str	r3, [r7, #4]
            }
            printf("Mode : %d\n", mode);
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	480d      	ldr	r0, [pc, #52]	; (80003cc <select_mode+0xec>)
 8000398:	f007 fa80 	bl	800789c <iprintf>
        }

        if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == GPIO_PIN_RESET) {
 800039c:	2102      	movs	r1, #2
 800039e:	480c      	ldr	r0, [pc, #48]	; (80003d0 <select_mode+0xf0>)
 80003a0:	f004 f930 	bl	8004604 <HAL_GPIO_ReadPin>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d1a2      	bne.n	80002f0 <select_mode+0x10>
            HAL_Delay(100);
 80003aa:	2064      	movs	r0, #100	; 0x64
 80003ac:	f002 fd36 	bl	8002e1c <HAL_Delay>
            while (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == GPIO_PIN_RESET)
 80003b0:	bf00      	nop
 80003b2:	2102      	movs	r1, #2
 80003b4:	4806      	ldr	r0, [pc, #24]	; (80003d0 <select_mode+0xf0>)
 80003b6:	f004 f925 	bl	8004604 <HAL_GPIO_ReadPin>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f8      	beq.n	80003b2 <select_mode+0xd2>
                ;
            return mode;
 80003c0:	687b      	ldr	r3, [r7, #4]
        }
    }
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	08008a68 	.word	0x08008a68
 80003d0:	48001400 	.word	0x48001400

080003d4 <__io_putchar>:
------------------------------------------------------------*/
//+++++++++++++++++++++++++++++++++++++++++++++++
//__io_putchar
// printf を使うために必要
//+++++++++++++++++++++++++++++++++++++++++++++++
int __io_putchar(int c) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
    if (c == '\n') {
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b0a      	cmp	r3, #10
 80003e0:	d108      	bne.n	80003f4 <__io_putchar+0x20>
        int _c = '\r';
 80003e2:	230d      	movs	r3, #13
 80003e4:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart2, &_c, 1, 1);
 80003e6:	f107 010c 	add.w	r1, r7, #12
 80003ea:	2301      	movs	r3, #1
 80003ec:	2201      	movs	r2, #1
 80003ee:	4807      	ldr	r0, [pc, #28]	; (800040c <__io_putchar+0x38>)
 80003f0:	f006 fe4c 	bl	800708c <HAL_UART_Transmit>
    }
    HAL_UART_Transmit(&huart2, &c, 1, 1);
 80003f4:	1d39      	adds	r1, r7, #4
 80003f6:	2301      	movs	r3, #1
 80003f8:	2201      	movs	r2, #1
 80003fa:	4804      	ldr	r0, [pc, #16]	; (800040c <__io_putchar+0x38>)
 80003fc:	f006 fe46 	bl	800708c <HAL_UART_Transmit>
    return 0;
 8000400:	2300      	movs	r3, #0
}
 8000402:	4618      	mov	r0, r3
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000550 	.word	0x20000550

08000410 <half_sectionA>:
//half_sectionA
// 半区画分加速しながら走行する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionA(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

  MF.FLAG.CTRL = 1;                   //制御を有効にする
 8000414:	4a05      	ldr	r2, [pc, #20]	; (800042c <half_sectionA+0x1c>)
 8000416:	8813      	ldrh	r3, [r2, #0]
 8000418:	f043 0308 	orr.w	r3, r3, #8
 800041c:	8013      	strh	r3, [r2, #0]
  driveA(PULSE_SEC_HALF);             //半区画のパルス分加速しながら走行。走行後は停止しない
 800041e:	20db      	movs	r0, #219	; 0xdb
 8000420:	f000 f8a6 	bl	8000570 <driveA>
  get_wall_info();                    //壁情報を取得，片壁制御の有効・無効の判断
 8000424:	f002 f942 	bl	80026ac <get_wall_info>
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	2000008c 	.word	0x2000008c

08000430 <half_sectionD>:
//half_sectionD
// 半区画分減速しながら走行し停止する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void half_sectionD(void){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

  MF.FLAG.CTRL = 1;                   //制御を有効にする
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <half_sectionD+0x18>)
 8000436:	8813      	ldrh	r3, [r2, #0]
 8000438:	f043 0308 	orr.w	r3, r3, #8
 800043c:	8013      	strh	r3, [r2, #0]
  driveD(PULSE_SEC_HALF);             //半区画のパルス分減速しながら走行。走行後は停止する
 800043e:	20db      	movs	r0, #219	; 0xdb
 8000440:	f000 f8c8 	bl	80005d4 <driveD>
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	2000008c 	.word	0x2000008c

0800044c <one_sectionU>:
//one_sectionU
// 等速で1区画分進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void one_sectionU(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0

  MF.FLAG.CTRL = 1;                   //制御を有効にする
 8000450:	4a07      	ldr	r2, [pc, #28]	; (8000470 <one_sectionU+0x24>)
 8000452:	8813      	ldrh	r3, [r2, #0]
 8000454:	f043 0308 	orr.w	r3, r3, #8
 8000458:	8013      	strh	r3, [r2, #0]
  driveU(PULSE_SEC_HALF);             //半区画のパルス分等速走行。走行後は停止しない
 800045a:	20db      	movs	r0, #219	; 0xdb
 800045c:	f000 f916 	bl	800068c <driveU>
  driveU(PULSE_SEC_HALF);             //半区画のパルス分等速走行。走行後は停止しない
 8000460:	20db      	movs	r0, #219	; 0xdb
 8000462:	f000 f913 	bl	800068c <driveU>
  get_wall_info();                    //壁情報を取得
 8000466:	f002 f921 	bl	80026ac <get_wall_info>
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	2000008c 	.word	0x2000008c

08000474 <rotate_R90>:
//rotate_R90
// 右に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_R90(void){
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0

  MF.FLAG.CTRL = 0;                   //制御無効
 8000478:	4a0a      	ldr	r2, [pc, #40]	; (80004a4 <rotate_R90+0x30>)
 800047a:	8813      	ldrh	r3, [r2, #0]
 800047c:	f36f 03c3 	bfc	r3, #3, #1
 8000480:	8013      	strh	r3, [r2, #0]
  drive_set_dir(ROTATE_R);            //右に旋回するようモータの回転方向を設定
 8000482:	2010      	movs	r0, #16
 8000484:	f000 fa18 	bl	80008b8 <drive_set_dir>
  drive_wait();                       //機体が安定するまで待機
 8000488:	200f      	movs	r0, #15
 800048a:	f002 fcc7 	bl	8002e1c <HAL_Delay>
  driveC(PULSE_ROT_R90);              //デフォルトインターバルで指定パルス分回転。回転後に停止する
 800048e:	209f      	movs	r0, #159	; 0x9f
 8000490:	f000 f92c 	bl	80006ec <driveC>
  drive_wait();                       //機体が安定するまで待機
 8000494:	200f      	movs	r0, #15
 8000496:	f002 fcc1 	bl	8002e1c <HAL_Delay>
  drive_set_dir(FORWARD);             //前進するようにモータの回転方向を設定
 800049a:	2000      	movs	r0, #0
 800049c:	f000 fa0c 	bl	80008b8 <drive_set_dir>
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	2000008c 	.word	0x2000008c

080004a8 <rotate_L90>:
//rotate_L90
// 左に90度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_L90(void){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0

  MF.FLAG.CTRL = 0;                   //制御を無効にする
 80004ac:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <rotate_L90+0x30>)
 80004ae:	8813      	ldrh	r3, [r2, #0]
 80004b0:	f36f 03c3 	bfc	r3, #3, #1
 80004b4:	8013      	strh	r3, [r2, #0]
  drive_set_dir(ROTATE_L);            //左に旋回するようモータの回転方向を設定
 80004b6:	2001      	movs	r0, #1
 80004b8:	f000 f9fe 	bl	80008b8 <drive_set_dir>
  drive_wait();                       //機体が安定するまで待機
 80004bc:	200f      	movs	r0, #15
 80004be:	f002 fcad 	bl	8002e1c <HAL_Delay>
  driveC(PULSE_ROT_L90);              //デフォルトインターバルで指定パルス分回転。回転後に停止する
 80004c2:	209f      	movs	r0, #159	; 0x9f
 80004c4:	f000 f912 	bl	80006ec <driveC>
  drive_wait();                       //機体が安定するまで待機
 80004c8:	200f      	movs	r0, #15
 80004ca:	f002 fca7 	bl	8002e1c <HAL_Delay>
  drive_set_dir(FORWARD);             //前進するようにモータの回転方向を設定
 80004ce:	2000      	movs	r0, #0
 80004d0:	f000 f9f2 	bl	80008b8 <drive_set_dir>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	2000008c 	.word	0x2000008c

080004dc <rotate_180>:
//rotate_180
// 180度回転する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void rotate_180(void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

  MF.FLAG.CTRL = 0;                   //制御を無効にする
 80004e0:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <rotate_180+0x34>)
 80004e2:	8813      	ldrh	r3, [r2, #0]
 80004e4:	f36f 03c3 	bfc	r3, #3, #1
 80004e8:	8013      	strh	r3, [r2, #0]
  drive_set_dir(ROTATE_R);            //左に旋回するようモータの回転方向を設定
 80004ea:	2010      	movs	r0, #16
 80004ec:	f000 f9e4 	bl	80008b8 <drive_set_dir>
  drive_wait();                       //機体が安定するまで待機
 80004f0:	200f      	movs	r0, #15
 80004f2:	f002 fc93 	bl	8002e1c <HAL_Delay>
  driveC(PULSE_ROT_180);              //デフォルトインターバルで指定パルス分回転。回転後に停止する
 80004f6:	f44f 709e 	mov.w	r0, #316	; 0x13c
 80004fa:	f000 f8f7 	bl	80006ec <driveC>
  drive_wait();                       //機体が安定するまで待機
 80004fe:	200f      	movs	r0, #15
 8000500:	f002 fc8c 	bl	8002e1c <HAL_Delay>
  drive_set_dir(FORWARD);             //前進するようにモータの回転方向を設定
 8000504:	2000      	movs	r0, #0
 8000506:	f000 f9d7 	bl	80008b8 <drive_set_dir>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000008c 	.word	0x2000008c

08000514 <set_position>:
//set_position
// 機体の尻を壁に当てて場所を区画中央に合わせる
// 引数：sw …… 0以外ならget_base()する
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void set_position(uint8_t sw){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]

  MF.FLAG.CTRL = 0;                   //制御を無効にする
 800051e:	4a13      	ldr	r2, [pc, #76]	; (800056c <set_position+0x58>)
 8000520:	8813      	ldrh	r3, [r2, #0]
 8000522:	f36f 03c3 	bfc	r3, #3, #1
 8000526:	8013      	strh	r3, [r2, #0]
  drive_set_dir(BACK);                //後退するようモータの回転方向を設定
 8000528:	2011      	movs	r0, #17
 800052a:	f000 f9c5 	bl	80008b8 <drive_set_dir>
  drive_wait();                       //機体が安定するまで待機
 800052e:	200f      	movs	r0, #15
 8000530:	f002 fc74 	bl	8002e1c <HAL_Delay>
  driveC(PULSE_SETPOS_BACK);          //尻を当てる程度に後退。回転後に停止する
 8000534:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000538:	f000 f8d8 	bl	80006ec <driveC>
  drive_wait();                       //機体が安定するまで待機
 800053c:	200f      	movs	r0, #15
 800053e:	f002 fc6d 	bl	8002e1c <HAL_Delay>
  if(sw){
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <set_position+0x38>
    get_base();
 8000548:	f002 f892 	bl	8002670 <get_base>
  }
  drive_set_dir(FORWARD);             //前進するようにモータの回転方向を設定
 800054c:	2000      	movs	r0, #0
 800054e:	f000 f9b3 	bl	80008b8 <drive_set_dir>
  drive_wait();                       //機体が安定するまで待機
 8000552:	200f      	movs	r0, #15
 8000554:	f002 fc62 	bl	8002e1c <HAL_Delay>
  driveC(PULSE_SETPOS_SET);           //デフォルトインターバルで指定パルス分回転。回転後に停止する
 8000558:	205e      	movs	r0, #94	; 0x5e
 800055a:	f000 f8c7 	bl	80006ec <driveC>
  drive_wait();                       //機体が安定するまで待機
 800055e:	200f      	movs	r0, #15
 8000560:	f002 fc5c 	bl	8002e1c <HAL_Delay>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000008c 	.word	0x2000008c

08000570 <driveA>:
//driveA
// 指定パルス分加速走行する
// 引数1：dist …… 走行するパルス
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveA(uint16_t dist){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]

  //====走行====
  //----走行開始----
  MF.FLAG.DECL = 0;
 800057a:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <driveA+0x58>)
 800057c:	8813      	ldrh	r3, [r2, #0]
 800057e:	f36f 1345 	bfc	r3, #5, #1
 8000582:	8013      	strh	r3, [r2, #0]
  MF.FLAG.DEF = 0;
 8000584:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <driveA+0x58>)
 8000586:	8813      	ldrh	r3, [r2, #0]
 8000588:	f36f 1386 	bfc	r3, #6, #1
 800058c:	8013      	strh	r3, [r2, #0]
  MF.FLAG.ACCL = 1;                   //減速・デフォルトインターバルフラグをクリア，加速フラグをセット
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <driveA+0x58>)
 8000590:	8813      	ldrh	r3, [r2, #0]
 8000592:	f043 0310 	orr.w	r3, r3, #16
 8000596:	8013      	strh	r3, [r2, #0]
  drive_reset_t_cnt();                //テーブルカウンタをリセット
 8000598:	f000 f92a 	bl	80007f0 <drive_reset_t_cnt>
  drive_start();                      //走行開始
 800059c:	f000 f93e 	bl	800081c <drive_start>

  //----走行----
  while((pulse_l < dist) || (pulse_r < dist));      //左右のモータが指定パルス以上進むまで待機
 80005a0:	bf00      	nop
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <driveA+0x5c>)
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	88fa      	ldrh	r2, [r7, #6]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d8f9      	bhi.n	80005a2 <driveA+0x32>
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <driveA+0x60>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	88fa      	ldrh	r2, [r7, #6]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d8f3      	bhi.n	80005a2 <driveA+0x32>

  drive_stop();
 80005ba:	f000 f965 	bl	8000888 <drive_stop>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	2000008c 	.word	0x2000008c
 80005cc:	20000096 	.word	0x20000096
 80005d0:	20000098 	.word	0x20000098

080005d4 <driveD>:
//driveD
// 指定パルス分減速走行して停止する
// 引数1：dist …… 走行するパルス
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveD(uint16_t dist){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]

  //====走行====
  //----走行開始----
  MF.FLAG.DECL = 0;
 80005de:	4a26      	ldr	r2, [pc, #152]	; (8000678 <driveD+0xa4>)
 80005e0:	8813      	ldrh	r3, [r2, #0]
 80005e2:	f36f 1345 	bfc	r3, #5, #1
 80005e6:	8013      	strh	r3, [r2, #0]
  MF.FLAG.DEF = 0;
 80005e8:	4a23      	ldr	r2, [pc, #140]	; (8000678 <driveD+0xa4>)
 80005ea:	8813      	ldrh	r3, [r2, #0]
 80005ec:	f36f 1386 	bfc	r3, #6, #1
 80005f0:	8013      	strh	r3, [r2, #0]
  MF.FLAG.ACCL = 0;                   //加速・減速・デフォルトインターバルフラグをクリア
 80005f2:	4a21      	ldr	r2, [pc, #132]	; (8000678 <driveD+0xa4>)
 80005f4:	8813      	ldrh	r3, [r2, #0]
 80005f6:	f36f 1304 	bfc	r3, #4, #1
 80005fa:	8013      	strh	r3, [r2, #0]
  drive_start();                      //痩躯開始
 80005fc:	f000 f90e 	bl	800081c <drive_start>

  int16_t c_pulse = dist - (t_cnt_l - min_t_cnt);     //等速走行距離 = 総距離 - 減速に必要な距離
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <driveD+0xa8>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	b21b      	sxth	r3, r3
 8000606:	b29a      	uxth	r2, r3
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <driveD+0xac>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	b21b      	sxth	r3, r3
 800060e:	b29b      	uxth	r3, r3
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	b29a      	uxth	r2, r3
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	4413      	add	r3, r2
 8000618:	b29b      	uxth	r3, r3
 800061a:	81fb      	strh	r3, [r7, #14]
  if(c_pulse > 0){
 800061c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000620:	2b00      	cmp	r3, #0
 8000622:	dd10      	ble.n	8000646 <driveD+0x72>
    //----等速走行----
    while((pulse_l < c_pulse) || (pulse_r < c_pulse));  //左右のモータが等速分のパルス以上進むまで待機
 8000624:	bf00      	nop
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <driveD+0xb0>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	b29b      	uxth	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000632:	429a      	cmp	r2, r3
 8000634:	dbf7      	blt.n	8000626 <driveD+0x52>
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <driveD+0xb4>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	b29b      	uxth	r3, r3
 800063c:	461a      	mov	r2, r3
 800063e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000642:	429a      	cmp	r2, r3
 8000644:	dbef      	blt.n	8000626 <driveD+0x52>
  }

  //----減速走行----
  MF.FLAG.DECL = 1;                   //減速フラグをセット
 8000646:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <driveD+0xa4>)
 8000648:	8813      	ldrh	r3, [r2, #0]
 800064a:	f043 0320 	orr.w	r3, r3, #32
 800064e:	8013      	strh	r3, [r2, #0]
  while((pulse_l < dist) || (pulse_r < dist));      //左右のモータが減速分のパルス以上進むまで待機
 8000650:	bf00      	nop
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <driveD+0xb0>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	b29b      	uxth	r3, r3
 8000658:	88fa      	ldrh	r2, [r7, #6]
 800065a:	429a      	cmp	r2, r3
 800065c:	d8f9      	bhi.n	8000652 <driveD+0x7e>
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <driveD+0xb4>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	b29b      	uxth	r3, r3
 8000664:	88fa      	ldrh	r2, [r7, #6]
 8000666:	429a      	cmp	r2, r3
 8000668:	d8f3      	bhi.n	8000652 <driveD+0x7e>

  //====走行終了====
  drive_stop();
 800066a:	f000 f90d 	bl	8000888 <drive_stop>
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000008c 	.word	0x2000008c
 800067c:	20000092 	.word	0x20000092
 8000680:	2000008e 	.word	0x2000008e
 8000684:	20000096 	.word	0x20000096
 8000688:	20000098 	.word	0x20000098

0800068c <driveU>:
//driveU
// 指定パルス分等速走行して停止する
// 引数1：dist …… 走行するパルス
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveU(uint16_t dist){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]

  //====等速走行開始====
  MF.FLAG.DECL = 0;
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <driveU+0x54>)
 8000698:	8813      	ldrh	r3, [r2, #0]
 800069a:	f36f 1345 	bfc	r3, #5, #1
 800069e:	8013      	strh	r3, [r2, #0]
  MF.FLAG.DEF = 0;
 80006a0:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <driveU+0x54>)
 80006a2:	8813      	ldrh	r3, [r2, #0]
 80006a4:	f36f 1386 	bfc	r3, #6, #1
 80006a8:	8013      	strh	r3, [r2, #0]
  MF.FLAG.ACCL = 0;                   //加速・減速・デフォルトインターバルフラグをクリア
 80006aa:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <driveU+0x54>)
 80006ac:	8813      	ldrh	r3, [r2, #0]
 80006ae:	f36f 1304 	bfc	r3, #4, #1
 80006b2:	8013      	strh	r3, [r2, #0]
  drive_start();                      //走行開始
 80006b4:	f000 f8b2 	bl	800081c <drive_start>

  //====走行====
  while((pulse_l < dist) || (pulse_r < dist));      //左右のモータが減速分のパルス以上進むまで待機
 80006b8:	bf00      	nop
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <driveU+0x58>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	88fa      	ldrh	r2, [r7, #6]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d8f9      	bhi.n	80006ba <driveU+0x2e>
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <driveU+0x5c>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	88fa      	ldrh	r2, [r7, #6]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d8f3      	bhi.n	80006ba <driveU+0x2e>

  //====走行終了====
  drive_stop();
 80006d2:	f000 f8d9 	bl	8000888 <drive_stop>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	20000096 	.word	0x20000096
 80006e8:	20000098 	.word	0x20000098

080006ec <driveC>:
//driveC
// 指定パルス分デフォルトインターバルで走行して停止する
// 引数1：dist …… 走行するパルス
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void driveC(uint16_t dist){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]

  //====回転開始====
  MF.FLAG.DECL = 0;
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <driveC+0x54>)
 80006f8:	8813      	ldrh	r3, [r2, #0]
 80006fa:	f36f 1345 	bfc	r3, #5, #1
 80006fe:	8013      	strh	r3, [r2, #0]
  MF.FLAG.DEF = 1;
 8000700:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <driveC+0x54>)
 8000702:	8813      	ldrh	r3, [r2, #0]
 8000704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000708:	8013      	strh	r3, [r2, #0]
  MF.FLAG.ACCL = 0;                   //加速・減速フラグをクリア，デフォルトインターバルフラグをセット
 800070a:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <driveC+0x54>)
 800070c:	8813      	ldrh	r3, [r2, #0]
 800070e:	f36f 1304 	bfc	r3, #4, #1
 8000712:	8013      	strh	r3, [r2, #0]
  drive_start();                      //走行開始
 8000714:	f000 f882 	bl	800081c <drive_start>

  //====回転====
  while((pulse_l < dist) || (pulse_r < dist));      //左右のモータが定速分のパルス以上進むまで待機
 8000718:	bf00      	nop
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <driveC+0x58>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	b29b      	uxth	r3, r3
 8000720:	88fa      	ldrh	r2, [r7, #6]
 8000722:	429a      	cmp	r2, r3
 8000724:	d8f9      	bhi.n	800071a <driveC+0x2e>
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <driveC+0x5c>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	b29b      	uxth	r3, r3
 800072c:	88fa      	ldrh	r2, [r7, #6]
 800072e:	429a      	cmp	r2, r3
 8000730:	d8f3      	bhi.n	800071a <driveC+0x2e>

  drive_stop();
 8000732:	f000 f8a9 	bl	8000888 <drive_stop>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000008c 	.word	0x2000008c
 8000744:	20000096 	.word	0x20000096
 8000748:	20000098 	.word	0x20000098

0800074c <drive_init>:
//drive_init
// 走行系の変数の初期化，モータードライバ関係のGPIO設定とPWM出力に使うタイマの設定をする
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_init(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  //====走行系の変数の初期化====
  max_t_cnt = MAX_T_CNT;      //テーブルカウンタ最高値初期化     MAX_T_CNTはparams.hにマクロ定義あり
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <drive_init+0x48>)
 8000752:	22db      	movs	r2, #219	; 0xdb
 8000754:	801a      	strh	r2, [r3, #0]
  min_t_cnt = MIN_T_CNT;      //テーブルカウンタ最低値初期化     MIN_T_CNTはparams.hにマクロ定義あり
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <drive_init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	801a      	strh	r2, [r3, #0]

  //====マウスフラグの初期化===
  MF.FLAGS = 0;         //フラグクリア
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <drive_init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	801a      	strh	r2, [r3, #0]


  //====ステッピングモータの初期化====
  drive_disable_motor();       //ステッピングモータ励磁OFF
 8000762:	f000 f833 	bl	80007cc <drive_disable_motor>
  drive_set_dir(FORWARD);     //前進するようにモータの回転方向を設定
 8000766:	2000      	movs	r0, #0
 8000768:	f000 f8a6 	bl	80008b8 <drive_set_dir>


  //====PWM出力に使うタイマの設定====
  __HAL_TIM_SET_AUTORELOAD(&htim16, DEFAULT_INTERVAL);
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <drive_init+0x54>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f640 0298 	movw	r2, #2200	; 0x898
 8000774:	62da      	str	r2, [r3, #44]	; 0x2c
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <drive_init+0x54>)
 8000778:	f640 0298 	movw	r2, #2200	; 0x898
 800077c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_AUTORELOAD(&htim17, DEFAULT_INTERVAL);
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <drive_init+0x58>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f640 0298 	movw	r2, #2200	; 0x898
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <drive_init+0x58>)
 800078a:	f640 0298 	movw	r2, #2200	; 0x898
 800078e:	60da      	str	r2, [r3, #12]


}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000094 	.word	0x20000094
 8000798:	20000092 	.word	0x20000092
 800079c:	2000008c 	.word	0x2000008c
 80007a0:	200004b8 	.word	0x200004b8
 80007a4:	20000504 	.word	0x20000504

080007a8 <drive_enable_motor>:
//drive_enable_motor
// ステッピングモータを励磁する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_enable_motor(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin, GPIO_PIN_RESET);  //ステッピングモーター励磁ON
 80007ac:	2200      	movs	r2, #0
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <drive_enable_motor+0x20>)
 80007b2:	f003 ff3f 	bl	8004634 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M3_2_GPIO_Port, M3_2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f003 ff39 	bl	8004634 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	48000400 	.word	0x48000400

080007cc <drive_disable_motor>:
//drive_disable_motor
// ステッピングモータの励磁を切る
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_disable_motor(void){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin, GPIO_PIN_SET);    //ステッピングモーター励磁OFF
 80007d0:	2201      	movs	r2, #1
 80007d2:	2180      	movs	r1, #128	; 0x80
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <drive_disable_motor+0x20>)
 80007d6:	f003 ff2d 	bl	8004634 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M3_2_GPIO_Port, M3_2_Pin, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2120      	movs	r1, #32
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f003 ff27 	bl	8004634 <HAL_GPIO_WritePin>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	48000400 	.word	0x48000400

080007f0 <drive_reset_t_cnt>:
//drive_reset_t_cnt
// テーブルカウンタをリセット（min_t_cntの値にセット）する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_reset_t_cnt(void){
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  t_cnt_l = t_cnt_r = min_t_cnt;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <drive_reset_t_cnt+0x20>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <drive_reset_t_cnt+0x24>)
 80007fc:	4611      	mov	r1, r2
 80007fe:	8019      	strh	r1, [r3, #0]
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <drive_reset_t_cnt+0x28>)
 8000802:	801a      	strh	r2, [r3, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000092 	.word	0x20000092
 8000814:	20000090 	.word	0x20000090
 8000818:	2000008e 	.word	0x2000008e

0800081c <drive_start>:
// 走行を開始する
// （pulse_l,pulse_rを0にリセットしてタイマを有効にする）
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_start(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  pulse_l = pulse_r = 0;      //走行したパルス数の初期化
 8000820:	2100      	movs	r1, #0
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <drive_start+0x5c>)
 8000824:	460a      	mov	r2, r1
 8000826:	801a      	strh	r2, [r3, #0]
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <drive_start+0x60>)
 800082a:	460a      	mov	r2, r1
 800082c:	801a      	strh	r2, [r3, #0]

  //====PWM出力に使うタイマを有効にする====
  /*--------------------------------------------------------------------
    TIM16 : 16ビットタイマ。左モータの制御に使う。出力はTIM16_CH1
  --------------------------------------------------------------------*/
  __HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <drive_start+0x64>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f06f 0201 	mvn.w	r2, #1
 8000836:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <drive_start+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68da      	ldr	r2, [r3, #12]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <drive_start+0x64>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f042 0201 	orr.w	r2, r2, #1
 8000846:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000848:	2100      	movs	r1, #0
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <drive_start+0x64>)
 800084c:	f005 fbb2 	bl	8005fb4 <HAL_TIM_PWM_Start>

  /*--------------------------------------------------------------------
    TIM17 : 16ビットタイマ。右モータの制御に使う。出力はTIM17_CH1
  --------------------------------------------------------------------*/
  __HAL_TIM_CLEAR_FLAG(&htim17, TIM_FLAG_UPDATE);
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <drive_start+0x68>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f06f 0201 	mvn.w	r2, #1
 8000858:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim17, TIM_IT_UPDATE);
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <drive_start+0x68>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68da      	ldr	r2, [r3, #12]
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <drive_start+0x68>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f042 0201 	orr.w	r2, r2, #1
 8000868:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800086a:	2100      	movs	r1, #0
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <drive_start+0x68>)
 800086e:	f005 fba1 	bl	8005fb4 <HAL_TIM_PWM_Start>

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000098 	.word	0x20000098
 800087c:	20000096 	.word	0x20000096
 8000880:	200004b8 	.word	0x200004b8
 8000884:	20000504 	.word	0x20000504

08000888 <drive_stop>:
// 走行を終了する
// （タイマを止めてタイマカウント値を0にリセットする）
// 引数1：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_stop(void){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

  //====PWM出力に使うタイマを停止させる====
  /*--------------------------------------------------------------------
    TIM16 : 16ビットタイマ。左モータの制御に使う。出力はTIM16_CH1
  --------------------------------------------------------------------*/
  HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 800088c:	2100      	movs	r1, #0
 800088e:	4808      	ldr	r0, [pc, #32]	; (80008b0 <drive_stop+0x28>)
 8000890:	f005 fc7c 	bl	800618c <HAL_TIM_PWM_Stop>

  /*--------------------------------------------------------------------
    TIM17 : 16ビットタイマ。右モータの制御に使う。出力はTIM17_CH1
  --------------------------------------------------------------------*/
  HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8000894:	2100      	movs	r1, #0
 8000896:	4807      	ldr	r0, [pc, #28]	; (80008b4 <drive_stop+0x2c>)
 8000898:	f005 fc78 	bl	800618c <HAL_TIM_PWM_Stop>

  __HAL_TIM_SET_COUNTER(&htim16, 0);  // Reset Counter
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <drive_stop+0x28>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_SET_COUNTER(&htim17, 0);  // Reset Counter
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <drive_stop+0x2c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2200      	movs	r2, #0
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200004b8 	.word	0x200004b8
 80008b4:	20000504 	.word	0x20000504

080008b8 <drive_set_dir>:
//drive_set_dir
// 進行方向を設定する
// 引数1：d_dir …… どの方向に進行するか  0桁目で左，1桁目で右の方向設定
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void drive_set_dir(uint8_t d_dir){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]

  //====左モータ====
  switch(d_dir & 0x0f){     //0~3ビット目を取り出す
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	f003 030f 	and.w	r3, r3, #15
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <drive_set_dir+0x1a>
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d006      	beq.n	80008de <drive_set_dir+0x26>
 80008d0:	e00b      	b.n	80008ea <drive_set_dir+0x32>
    //----正回転----
    case 0x00:                      //0x00の場合
      HAL_GPIO_WritePin(CW_CCW_L_GPIO_Port, CW_CCW_L_Pin, MT_FWD_L);  //左を前進方向に設定
 80008d2:	2201      	movs	r2, #1
 80008d4:	2108      	movs	r1, #8
 80008d6:	4817      	ldr	r0, [pc, #92]	; (8000934 <drive_set_dir+0x7c>)
 80008d8:	f003 feac 	bl	8004634 <HAL_GPIO_WritePin>
      break;
 80008dc:	e005      	b.n	80008ea <drive_set_dir+0x32>
    //----逆回転----
    case 0x01:                      //0x01の場合
      HAL_GPIO_WritePin(CW_CCW_L_GPIO_Port, CW_CCW_L_Pin, MT_BACK_L); //左を後進方向に設定
 80008de:	2200      	movs	r2, #0
 80008e0:	2108      	movs	r1, #8
 80008e2:	4814      	ldr	r0, [pc, #80]	; (8000934 <drive_set_dir+0x7c>)
 80008e4:	f003 fea6 	bl	8004634 <HAL_GPIO_WritePin>
      break;
 80008e8:	bf00      	nop
  }
  //====右モータ====
  switch(d_dir & 0xf0){     //4~7ビット目を取り出す
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d002      	beq.n	80008fa <drive_set_dir+0x42>
 80008f4:	2b10      	cmp	r3, #16
 80008f6:	d00c      	beq.n	8000912 <drive_set_dir+0x5a>
    case 0x10:                      //0x10の場合
      HAL_GPIO_WritePin(CW_CCW_R_GPIO_Port, CW_CCW_R_Pin, MT_BACK_R); //右を後進方向に設定
      HAL_GPIO_WritePin(CW_CCW_R_2_GPIO_Port, CW_CCW_R_2_Pin, MT_BACK_R);
      break;
  }
}
 80008f8:	e017      	b.n	800092a <drive_set_dir+0x72>
      HAL_GPIO_WritePin(CW_CCW_R_GPIO_Port, CW_CCW_R_Pin, MT_FWD_R);  //右を前進方向に設定
 80008fa:	2200      	movs	r2, #0
 80008fc:	2140      	movs	r1, #64	; 0x40
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <drive_set_dir+0x7c>)
 8000900:	f003 fe98 	bl	8004634 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(CW_CCW_R_2_GPIO_Port, CW_CCW_R_2_Pin, MT_FWD_R);
 8000904:	2200      	movs	r2, #0
 8000906:	2140      	movs	r1, #64	; 0x40
 8000908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090c:	f003 fe92 	bl	8004634 <HAL_GPIO_WritePin>
      break;
 8000910:	e00b      	b.n	800092a <drive_set_dir+0x72>
      HAL_GPIO_WritePin(CW_CCW_R_GPIO_Port, CW_CCW_R_Pin, MT_BACK_R); //右を後進方向に設定
 8000912:	2201      	movs	r2, #1
 8000914:	2140      	movs	r1, #64	; 0x40
 8000916:	4807      	ldr	r0, [pc, #28]	; (8000934 <drive_set_dir+0x7c>)
 8000918:	f003 fe8c 	bl	8004634 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(CW_CCW_R_2_GPIO_Port, CW_CCW_R_2_Pin, MT_BACK_R);
 800091c:	2201      	movs	r2, #1
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f003 fe86 	bl	8004634 <HAL_GPIO_WritePin>
      break;
 8000928:	bf00      	nop
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	48000400 	.word	0x48000400

08000938 <test_run>:
//test_run
// テスト走行モード
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void test_run(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  int mode = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  drive_enable_motor();
 8000942:	f7ff ff31 	bl	80007a8 <drive_enable_motor>

  while(1){

    mode = select_mode(mode);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff fcca 	bl	80002e0 <select_mode>
 800094c:	6078      	str	r0, [r7, #4]

    int i;
    switch(mode){
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b07      	cmp	r3, #7
 8000952:	d8f8      	bhi.n	8000946 <test_run+0xe>
 8000954:	a201      	add	r2, pc, #4	; (adr r2, 800095c <test_run+0x24>)
 8000956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095a:	bf00      	nop
 800095c:	0800097d 	.word	0x0800097d
 8000960:	0800098b 	.word	0x0800098b
 8000964:	080009c3 	.word	0x080009c3
 8000968:	080009e1 	.word	0x080009e1
 800096c:	080009ff 	.word	0x080009ff
 8000970:	08000947 	.word	0x08000947
 8000974:	08000947 	.word	0x08000947
 8000978:	08000a1d 	.word	0x08000a1d

      case 0:
        //----尻当て----
        printf("Set Position.\n");
 800097c:	4837      	ldr	r0, [pc, #220]	; (8000a5c <test_run+0x124>)
 800097e:	f007 f813 	bl	80079a8 <puts>
        set_position(0);
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff fdc6 	bl	8000514 <set_position>
        break;
 8000988:	e067      	b.n	8000a5a <test_run+0x122>
      case 1:
        //----1区画等速走行----
        printf("1 Section, Forward, Constant Speed.\n");
 800098a:	4835      	ldr	r0, [pc, #212]	; (8000a60 <test_run+0x128>)
 800098c:	f007 f80c 	bl	80079a8 <puts>
        MF.FLAG.CTRL = 0;           //制御を無効にする
 8000990:	4a34      	ldr	r2, [pc, #208]	; (8000a64 <test_run+0x12c>)
 8000992:	8813      	ldrh	r3, [r2, #0]
 8000994:	f36f 03c3 	bfc	r3, #3, #1
 8000998:	8013      	strh	r3, [r2, #0]
        drive_set_dir(FORWARD);     //前進するようにモータの回転方向を設定
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ff8c 	bl	80008b8 <drive_set_dir>
        for(i = 0; i < 1; i++){
 80009a0:	2300      	movs	r3, #0
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	e009      	b.n	80009ba <test_run+0x82>
          driveC(PULSE_SEC_HALF*2); //一区画のパルス分デフォルトインターバルで走行
 80009a6:	f44f 70db 	mov.w	r0, #438	; 0x1b6
 80009aa:	f7ff fe9f 	bl	80006ec <driveC>
          drive_wait();             //機体が安定するまで待機
 80009ae:	200f      	movs	r0, #15
 80009b0:	f002 fa34 	bl	8002e1c <HAL_Delay>
        for(i = 0; i < 1; i++){
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	ddf2      	ble.n	80009a6 <test_run+0x6e>
        }
        break;
 80009c0:	e04b      	b.n	8000a5a <test_run+0x122>
      case 2:
        //----右90度回転----
        printf("Rotate R90.\n");
 80009c2:	4829      	ldr	r0, [pc, #164]	; (8000a68 <test_run+0x130>)
 80009c4:	f006 fff0 	bl	80079a8 <puts>
        for(i = 0; i < 16; i++){
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	e004      	b.n	80009d8 <test_run+0xa0>
          rotate_R90();
 80009ce:	f7ff fd51 	bl	8000474 <rotate_R90>
        for(i = 0; i < 16; i++){
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	2b0f      	cmp	r3, #15
 80009dc:	ddf7      	ble.n	80009ce <test_run+0x96>
        }
        break;
 80009de:	e03c      	b.n	8000a5a <test_run+0x122>
      case 3:
        //----左90度回転----
        printf("Rotate L90.\n");
 80009e0:	4822      	ldr	r0, [pc, #136]	; (8000a6c <test_run+0x134>)
 80009e2:	f006 ffe1 	bl	80079a8 <puts>
        for(i = 0; i < 16; i++){
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	e004      	b.n	80009f6 <test_run+0xbe>
          rotate_L90();
 80009ec:	f7ff fd5c 	bl	80004a8 <rotate_L90>
        for(i = 0; i < 16; i++){
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	ddf7      	ble.n	80009ec <test_run+0xb4>
        }
        break;
 80009fc:	e02d      	b.n	8000a5a <test_run+0x122>
      case 4:
        //----180度回転----
        printf("Rotate 180.\n");
 80009fe:	481c      	ldr	r0, [pc, #112]	; (8000a70 <test_run+0x138>)
 8000a00:	f006 ffd2 	bl	80079a8 <puts>
        for(i = 0; i < 8; i++){
 8000a04:	2300      	movs	r3, #0
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	e004      	b.n	8000a14 <test_run+0xdc>
          rotate_180();
 8000a0a:	f7ff fd67 	bl	80004dc <rotate_180>
        for(i = 0; i < 8; i++){
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b07      	cmp	r3, #7
 8000a18:	ddf7      	ble.n	8000a0a <test_run+0xd2>
        }
        break;
 8000a1a:	e01e      	b.n	8000a5a <test_run+0x122>
        break;
      case 6:
        break;
      case 7:
        //----6区画連続走行----
        printf("6 Section, Forward, Continuous.\n");
 8000a1c:	4815      	ldr	r0, [pc, #84]	; (8000a74 <test_run+0x13c>)
 8000a1e:	f006 ffc3 	bl	80079a8 <puts>
        MF.FLAG.CTRL = 0;           //制御を無効にする
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <test_run+0x12c>)
 8000a24:	8813      	ldrh	r3, [r2, #0]
 8000a26:	f36f 03c3 	bfc	r3, #3, #1
 8000a2a:	8013      	strh	r3, [r2, #0]
        drive_set_dir(FORWARD);     //前進するようにモータの回転方向を設定
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff ff43 	bl	80008b8 <drive_set_dir>
        driveA(PULSE_SEC_HALF);     //半区画のパルス分加速しながら走行
 8000a32:	20db      	movs	r0, #219	; 0xdb
 8000a34:	f7ff fd9c 	bl	8000570 <driveA>
        for(i = 0; i < 6-1; i++){
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	e006      	b.n	8000a4c <test_run+0x114>
          driveU(PULSE_SEC_HALF*2); //一区画のパルス分等速走行
 8000a3e:	f44f 70db 	mov.w	r0, #438	; 0x1b6
 8000a42:	f7ff fe23 	bl	800068c <driveU>
        for(i = 0; i < 6-1; i++){
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	ddf5      	ble.n	8000a3e <test_run+0x106>
        }
        driveD(PULSE_SEC_HALF);     //半区画のパルス分減速しながら走行。走行後は停止する
 8000a52:	20db      	movs	r0, #219	; 0xdb
 8000a54:	f7ff fdbe 	bl	80005d4 <driveD>
        break;
 8000a58:	bf00      	nop
  while(1){
 8000a5a:	e774      	b.n	8000946 <test_run+0xe>
 8000a5c:	08008a74 	.word	0x08008a74
 8000a60:	08008a84 	.word	0x08008a84
 8000a64:	2000008c 	.word	0x2000008c
 8000a68:	08008aa8 	.word	0x08008aa8
 8000a6c:	08008ab4 	.word	0x08008ab4
 8000a70:	08008ac0 	.word	0x08008ac0
 8000a74:	08008acc 	.word	0x08008acc

08000a78 <eeprom_enable_write>:
// eeprom_enable_write
// eepromとして使うflashメモリ領域をeraseし，書き込みを有効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_enable_write(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.PageAddress = EEPROM_START_ADDRESS;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <eeprom_enable_write+0x44>)
 8000a88:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.NbPages = 1;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	613b      	str	r3, [r7, #16]
    status = HAL_FLASH_Unlock();
 8000a8e:	f003 fadf 	bl	8004050 <HAL_FLASH_Unlock>
 8000a92:	4603      	mov	r3, r0
 8000a94:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8000a96:	7dfb      	ldrb	r3, [r7, #23]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <eeprom_enable_write+0x28>
        return status;
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
 8000a9e:	e009      	b.n	8000ab4 <eeprom_enable_write+0x3c>
    status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8000aa0:	1d3a      	adds	r2, r7, #4
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 fb95 	bl	80041d8 <HAL_FLASHEx_Erase>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	75fb      	strb	r3, [r7, #23]
    return status;
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	0800f800 	.word	0x0800f800

08000ac0 <eeprom_disable_write>:
// eeprom_disable_write
// eepromとして使うflashメモリ領域への書き込みを無効にする
// 引数：なし
// 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_disable_write(void) { return HAL_FLASH_Lock(); }
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	f003 faea 	bl	800409c <HAL_FLASH_Lock>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}

08000ace <eeprom_write_halfword>:
// eepromとして使うflashメモリ領域へ2バイトの値を書き込む
// 引数：address ……
// eepromとして使うflashメモリ領域の先頭アドレスからのオフセット，data ……
// 書き込みたいuin16_t型データ 戻り値：問題が起こらなければHAL_OKを返す
//+++++++++++++++++++++++++++++++++++++++++++++++
HAL_StatusTypeDef eeprom_write_halfword(uint32_t address, uint16_t data) {
 8000ace:	b5b0      	push	{r4, r5, r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status;
    address = address * 2 + EEPROM_START_ADDRESS;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8000ae0:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 8000ae8:	887b      	ldrh	r3, [r7, #2]
 8000aea:	2200      	movs	r2, #0
 8000aec:	461c      	mov	r4, r3
 8000aee:	4615      	mov	r5, r2
 8000af0:	4622      	mov	r2, r4
 8000af2:	462b      	mov	r3, r5
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	2001      	movs	r0, #1
 8000af8:	f003 fa3a 	bl	8003f70 <HAL_FLASH_Program>
 8000afc:	4603      	mov	r3, r0
 8000afe:	73fb      	strb	r3, [r7, #15]
    return status;
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bdb0      	pop	{r4, r5, r7, pc}

08000b0a <eeprom_read_halfword>:
// eepromとして使うflashメモリ領域から2バイトの値を読み込む
// 引数：address ……
// eepromとして使うflashメモリ領域の先頭アドレスからのオフセット
// 戻り値：読み込んだuin16_t型データ
//+++++++++++++++++++++++++++++++++++++++++++++++
uint16_t eeprom_read_halfword(uint32_t address) {
 8000b0a:	b480      	push	{r7}
 8000b0c:	b085      	sub	sp, #20
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
    uint16_t val = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	81fb      	strh	r3, [r7, #14]
    address = address * 2 + EEPROM_START_ADDRESS;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8000b1c:	f503 43f8 	add.w	r3, r3, #31744	; 0x7c00
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
    val = *(__IO uint16_t *)address;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	81fb      	strh	r3, [r7, #14]
    return val;
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: blue
 */

#include "global.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    加減速について，事前にExcelで計算した時間（割り込み）ごとのARRの値をtable[]配列に記録しておく。
    （配列の値はtable.hにExcelからコピー&ペーストをして設定する。table[]の定義はdrive.h参照）
    今加減速のどの段階なのか（table[]の要素番号・インデックス）はt_cnt_l,t_cnt_rで記録している。
    **********/

    if (htim->Instance == htim16.Instance) {
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b88      	ldr	r3, [pc, #544]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d179      	bne.n	8000c40 <HAL_TIM_PeriodElapsedCallback+0x108>
        /*--------------------------------------------------------------------
            16ビットタイマーTIM16の割り込み処理，左モータの管理をおこなう
        --------------------------------------------------------------------*/

        pulse_l++; // 左パルスのカウンタをインクリメント
 8000b4c:	4b87      	ldr	r3, [pc, #540]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	3301      	adds	r3, #1
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	4b85      	ldr	r3, [pc, #532]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000b58:	801a      	strh	r2, [r3, #0]

        //====加減速処理====
        //----減速処理----
        if (MF.FLAG.DECL) { // 減速フラグが立っている場合
 8000b5a:	4b85      	ldr	r3, [pc, #532]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d016      	beq.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x5e>
            t_cnt_l = max(t_cnt_l - 1, min_t_cnt);
 8000b68:	4b82      	ldr	r3, [pc, #520]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	4a81      	ldr	r2, [pc, #516]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000b72:	8812      	ldrh	r2, [r2, #0]
 8000b74:	b212      	sxth	r2, r2
 8000b76:	4293      	cmp	r3, r2
 8000b78:	dd07      	ble.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x52>
 8000b7a:	4b7e      	ldr	r3, [pc, #504]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	3b01      	subs	r3, #1
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	e002      	b.n	8000b90 <HAL_TIM_PeriodElapsedCallback+0x58>
 8000b8a:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	4a78      	ldr	r2, [pc, #480]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000b92:	8013      	strh	r3, [r2, #0]
 8000b94:	e01b      	b.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x96>
        }
        //----加速処理----
        else if (MF.FLAG.ACCL) { // 加速フラグが立っている場合
 8000b96:	4b76      	ldr	r3, [pc, #472]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d014      	beq.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x96>
            t_cnt_l = min(t_cnt_l + 1, max_t_cnt);
 8000ba4:	4b73      	ldr	r3, [pc, #460]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b21a      	sxth	r2, r3
 8000baa:	4b74      	ldr	r3, [pc, #464]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	da07      	bge.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8000bb4:	4b6f      	ldr	r3, [pc, #444]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	e002      	b.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x92>
 8000bc4:	4b6d      	ldr	r3, [pc, #436]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	4a6a      	ldr	r2, [pc, #424]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000bcc:	8013      	strh	r3, [r2, #0]
        }

        //----デフォルトインターバル----
        if (MF.FLAG.DEF) { // デフォルトインターバルフラグが立っている場合
 8000bce:	4b68      	ldr	r3, [pc, #416]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d012      	beq.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0xca>
            __HAL_TIM_SET_AUTORELOAD(
 8000bdc:	4b68      	ldr	r3, [pc, #416]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	f5c3 6309 	rsb	r3, r3, #2192	; 0x890
 8000be6:	3308      	adds	r3, #8
 8000be8:	4a5f      	ldr	r2, [pc, #380]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000bea:	6812      	ldr	r2, [r2, #0]
 8000bec:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bee:	4b64      	ldr	r3, [pc, #400]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	f5c3 6309 	rsb	r3, r3, #2192	; 0x890
 8000bf8:	3308      	adds	r3, #8
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b5a      	ldr	r3, [pc, #360]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000bfe:	60da      	str	r2, [r3, #12]
        //====タスクポインタを進める====
        tp = (tp + 1) % 3;

    } /* if (htim->Instance == htim6.Instance) */

} /* HAL_TIM_PeriodElapsedCallback */
 8000c00:	e1fc      	b.n	8000ffc <HAL_TIM_PeriodElapsedCallback+0x4c4>
            __HAL_TIM_SET_AUTORELOAD(
 8000c02:	4b5c      	ldr	r3, [pc, #368]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b5e      	ldr	r3, [pc, #376]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000c0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b5b      	ldr	r3, [pc, #364]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	1ad2      	subs	r2, r2, r3
 8000c1a:	4b53      	ldr	r3, [pc, #332]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c20:	4b54      	ldr	r3, [pc, #336]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	b21b      	sxth	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b56      	ldr	r3, [pc, #344]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000c2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b53      	ldr	r3, [pc, #332]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b4b      	ldr	r3, [pc, #300]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000c3c:	60da      	str	r2, [r3, #12]
} /* HAL_TIM_PeriodElapsedCallback */
 8000c3e:	e1dd      	b.n	8000ffc <HAL_TIM_PeriodElapsedCallback+0x4c4>
    else if (htim->Instance == htim17.Instance) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d179      	bne.n	8000d40 <HAL_TIM_PeriodElapsedCallback+0x208>
        pulse_r++; // 右パルスのカウンタをインクリメント
 8000c4c:	4b4f      	ldr	r3, [pc, #316]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	3301      	adds	r3, #1
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4b4d      	ldr	r3, [pc, #308]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000c58:	801a      	strh	r2, [r3, #0]
        if (MF.FLAG.DECL) { // 減速フラグが立っている場合
 8000c5a:	4b45      	ldr	r3, [pc, #276]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d016      	beq.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0x15e>
            t_cnt_r = max(t_cnt_r - 1, min_t_cnt);
 8000c68:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	4a41      	ldr	r2, [pc, #260]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000c72:	8812      	ldrh	r2, [r2, #0]
 8000c74:	b212      	sxth	r2, r2
 8000c76:	4293      	cmp	r3, r2
 8000c78:	dd07      	ble.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0x152>
 8000c7a:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	3b01      	subs	r3, #1
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	e002      	b.n	8000c90 <HAL_TIM_PeriodElapsedCallback+0x158>
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	4a3f      	ldr	r2, [pc, #252]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000c92:	8013      	strh	r3, [r2, #0]
 8000c94:	e01b      	b.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x196>
        else if (MF.FLAG.ACCL) { // 加速フラグが立っている場合
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d014      	beq.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x196>
            t_cnt_r = min(t_cnt_r + 1, max_t_cnt);
 8000ca4:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	da07      	bge.n	8000cc4 <HAL_TIM_PeriodElapsedCallback+0x18c>
 8000cb4:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	e002      	b.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x192>
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4a31      	ldr	r2, [pc, #196]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000ccc:	8013      	strh	r3, [r2, #0]
        if (MF.FLAG.DEF) { // デフォルトインターバルフラグが立っている場合
 8000cce:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d012      	beq.n	8000d02 <HAL_TIM_PeriodElapsedCallback+0x1ca>
            __HAL_TIM_SET_AUTORELOAD(
 8000cdc:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	b21b      	sxth	r3, r3
 8000ce2:	f5c3 6309 	rsb	r3, r3, #2192	; 0x890
 8000ce6:	3308      	adds	r3, #8
 8000ce8:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000cea:	6812      	ldr	r2, [r2, #0]
 8000cec:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	f5c3 6309 	rsb	r3, r3, #2192	; 0x890
 8000cf8:	3308      	adds	r3, #8
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000cfe:	60da      	str	r2, [r3, #12]
} /* HAL_TIM_PeriodElapsedCallback */
 8000d00:	e17c      	b.n	8000ffc <HAL_TIM_PeriodElapsedCallback+0x4c4>
            __HAL_TIM_SET_AUTORELOAD(
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000d0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	1ad2      	subs	r2, r2, r3
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000d2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	b21b      	sxth	r3, r3
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000d3c:	60da      	str	r2, [r3, #12]
} /* HAL_TIM_PeriodElapsedCallback */
 8000d3e:	e15d      	b.n	8000ffc <HAL_TIM_PeriodElapsedCallback+0x4c4>
    else if (htim->Instance == htim6.Instance) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	f040 8157 	bne.w	8000ffc <HAL_TIM_PeriodElapsedCallback+0x4c4>
        switch (tp) {
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	f000 808e 	beq.w	8000e74 <HAL_TIM_PeriodElapsedCallback+0x33c>
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	f300 8140 	bgt.w	8000fde <HAL_TIM_PeriodElapsedCallback+0x4a6>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d01e      	beq.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x268>
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d038      	beq.n	8000dd8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000d66:	e13a      	b.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x4a6>
 8000d68:	200004b8 	.word	0x200004b8
 8000d6c:	20000096 	.word	0x20000096
 8000d70:	2000008c 	.word	0x2000008c
 8000d74:	2000008e 	.word	0x2000008e
 8000d78:	20000092 	.word	0x20000092
 8000d7c:	20000094 	.word	0x20000094
 8000d80:	2000009a 	.word	0x2000009a
 8000d84:	08008c50 	.word	0x08008c50
 8000d88:	20000504 	.word	0x20000504
 8000d8c:	20000098 	.word	0x20000098
 8000d90:	20000090 	.word	0x20000090
 8000d94:	2000009c 	.word	0x2000009c
 8000d98:	2000046c 	.word	0x2000046c
 8000d9c:	2000009e 	.word	0x2000009e
            HAL_GPIO_WritePin(IR_SIDE_GPIO_Port, IR_SIDE_Pin,
 8000da0:	2201      	movs	r2, #1
 8000da2:	2108      	movs	r1, #8
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da8:	f003 fc44 	bl	8004634 <HAL_GPIO_WritePin>
            tim6_wait_us(IR_WAIT_US);    // 光が強まるまで少し待機
 8000dac:	200f      	movs	r0, #15
 8000dae:	f000 f94d 	bl	800104c <tim6_wait_us>
            ad_r = get_sensor_value_r(); // 右センサ値を記録
 8000db2:	f001 fc21 	bl	80025f8 <get_sensor_value_r>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b92      	ldr	r3, [pc, #584]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8000dbc:	601a      	str	r2, [r3, #0]
            ad_l = get_sensor_value_l(); // 左センサ値を記録
 8000dbe:	f001 fc3f 	bl	8002640 <get_sensor_value_l>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b90      	ldr	r3, [pc, #576]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8000dc8:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(IR_SIDE_GPIO_Port, IR_SIDE_Pin,
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2108      	movs	r1, #8
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f003 fc2f 	bl	8004634 <HAL_GPIO_WritePin>
            break;
 8000dd6:	e102      	b.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x4a6>
            HAL_GPIO_WritePin(IR_FRONT_GPIO_Port, IR_FRONT_Pin,
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f003 fc27 	bl	8004634 <HAL_GPIO_WritePin>
            tim6_wait_us(IR_WAIT_US);      // 光が強まるまで少し待機
 8000de6:	200f      	movs	r0, #15
 8000de8:	f000 f930 	bl	800104c <tim6_wait_us>
            ad_fr = get_sensor_value_fr(); // 右前センサ値を記録
 8000dec:	f001 fc10 	bl	8002610 <get_sensor_value_fr>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b85      	ldr	r3, [pc, #532]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8000df6:	601a      	str	r2, [r3, #0]
            ad_fl = get_sensor_value_fl(); // 左前センサ値を記録
 8000df8:	f001 fc16 	bl	8002628 <get_sensor_value_fl>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b83      	ldr	r3, [pc, #524]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8000e02:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(IR_FRONT_GPIO_Port, IR_FRONT_Pin,
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f003 fc11 	bl	8004634 <HAL_GPIO_WritePin>
            ad_batt = get_batt_vol();
 8000e12:	f001 fc21 	bl	8002658 <get_batt_vol>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b7e      	ldr	r3, [pc, #504]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8000e1c:	601a      	str	r2, [r3, #0]
            if (ad_batt < BATT_LOW_VOL) {
 8000e1e:	4b7d      	ldr	r3, [pc, #500]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f640 3203 	movw	r2, #2819	; 0xb03
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d810      	bhi.n	8000e4c <HAL_TIM_PeriodElapsedCallback+0x314>
                low_vol_count++;
 8000e2a:	4b7b      	ldr	r3, [pc, #492]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	4b79      	ldr	r3, [pc, #484]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8000e34:	801a      	strh	r2, [r3, #0]
                if (low_vol_count > 1000) {
 8000e36:	4b78      	ldr	r3, [pc, #480]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e3e:	d90a      	bls.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x31e>
                    MF.FLAG.LOWVOL = 1;
 8000e40:	4a76      	ldr	r2, [pc, #472]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8000e42:	8813      	ldrh	r3, [r2, #0]
 8000e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e48:	8013      	strh	r3, [r2, #0]
 8000e4a:	e004      	b.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x31e>
                MF.FLAG.LOWVOL = 0;
 8000e4c:	4a73      	ldr	r2, [pc, #460]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8000e4e:	8813      	ldrh	r3, [r2, #0]
 8000e50:	f36f 13c7 	bfc	r3, #7, #1
 8000e54:	8013      	strh	r3, [r2, #0]
            if (MF.FLAG.LOWVOL) {
 8000e56:	4b71      	ldr	r3, [pc, #452]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_TIM_PeriodElapsedCallback+0x334>
                led_write_2(1);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f7ff fa29 	bl	80002bc <led_write_2>
            break;
 8000e6a:	e0b8      	b.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x4a6>
                led_write_2(0);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fa25 	bl	80002bc <led_write_2>
            break;
 8000e72:	e0b4      	b.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x4a6>
            if (MF.FLAG.CTRL) {
 8000e74:	4b69      	ldr	r3, [pc, #420]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 80a5 	beq.w	8000fce <HAL_TIM_PeriodElapsedCallback+0x496>
                int16_t dl_tmp = 0, dr_tmp = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	81fb      	strh	r3, [r7, #14]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	81bb      	strh	r3, [r7, #12]
                dif_l = (int32_t)ad_l - base_l;
 8000e8c:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	4b63      	ldr	r3, [pc, #396]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	4b61      	ldr	r3, [pc, #388]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8000e9e:	801a      	strh	r2, [r3, #0]
                dif_r = (int32_t)ad_r - base_r;
 8000ea0:	4b58      	ldr	r3, [pc, #352]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b60      	ldr	r3, [pc, #384]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	b21a      	sxth	r2, r3
 8000eb0:	4b5e      	ldr	r3, [pc, #376]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8000eb2:	801a      	strh	r2, [r3, #0]
                if (CTRL_BASE_L < dif_l) {            // 制御の判断
 8000eb4:	4b5b      	ldr	r3, [pc, #364]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8000eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eba:	2b64      	cmp	r3, #100	; 0x64
 8000ebc:	dd2f      	ble.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x3e6>
                    dl_tmp += -1 * CTRL_CONT * dif_l; // 比例制御値を決定
 8000ebe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eca:	4b56      	ldr	r3, [pc, #344]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8000ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed0:	ee07 3a90 	vmov	s15, r3
 8000ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ed8:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001030 <HAL_TIM_PeriodElapsedCallback+0x4f8>
 8000edc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee8:	ee17 3a90 	vmov	r3, s15
 8000eec:	81fb      	strh	r3, [r7, #14]
                    dr_tmp += CTRL_CONT * dif_l; // 比例制御値を決定
 8000eee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efa:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8000efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f00:	ee07 3a90 	vmov	s15, r3
 8000f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f08:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001034 <HAL_TIM_PeriodElapsedCallback+0x4fc>
 8000f0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f18:	ee17 3a90 	vmov	r3, s15
 8000f1c:	81bb      	strh	r3, [r7, #12]
                if (CTRL_BASE_R < dif_r) {
 8000f1e:	4b43      	ldr	r3, [pc, #268]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8000f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f24:	2b64      	cmp	r3, #100	; 0x64
 8000f26:	dd2f      	ble.n	8000f88 <HAL_TIM_PeriodElapsedCallback+0x450>
                    dl_tmp += CTRL_CONT * dif_r; // 比例制御値を決定
 8000f28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f34:	4b3d      	ldr	r3, [pc, #244]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8000f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f42:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001034 <HAL_TIM_PeriodElapsedCallback+0x4fc>
 8000f46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f52:	ee17 3a90 	vmov	r3, s15
 8000f56:	81fb      	strh	r3, [r7, #14]
                    dr_tmp += -1 * CTRL_CONT * dif_r; // 比例制御値を決定
 8000f58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f64:	4b31      	ldr	r3, [pc, #196]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8000f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f72:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001030 <HAL_TIM_PeriodElapsedCallback+0x4f8>
 8000f76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f82:	ee17 3a90 	vmov	r3, s15
 8000f86:	81bb      	strh	r3, [r7, #12]
                dl = max(min(CTRL_MAX, dl_tmp), -1 * CTRL_MAX);
 8000f88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f8c:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 8000f90:	dd08      	ble.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x46c>
 8000f92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f96:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000f9a:	bfa8      	it	ge
 8000f9c:	f44f 73af 	movge.w	r3, #350	; 0x15e
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	e000      	b.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x46e>
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8000fa6:	4a25      	ldr	r2, [pc, #148]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000fa8:	8013      	strh	r3, [r2, #0]
                dr = max(min(CTRL_MAX, dr_tmp), -1 * CTRL_MAX);
 8000faa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fae:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 8000fb2:	dd08      	ble.n	8000fc6 <HAL_TIM_PeriodElapsedCallback+0x48e>
 8000fb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fb8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000fbc:	bfa8      	it	ge
 8000fbe:	f44f 73af 	movge.w	r3, #350	; 0x15e
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	e000      	b.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x490>
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8000fc8:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8000fca:	8013      	strh	r3, [r2, #0]
            break;
 8000fcc:	e006      	b.n	8000fdc <HAL_TIM_PeriodElapsedCallback+0x4a4>
                dl = dr = 0;
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	801a      	strh	r2, [r3, #0]
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8000fd8:	460a      	mov	r2, r1
 8000fda:	801a      	strh	r2, [r3, #0]
            break;
 8000fdc:	bf00      	nop
        tp = (tp + 1) % 3;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8000fe6:	fb83 3102 	smull	r3, r1, r3, r2
 8000fea:	17d3      	asrs	r3, r2, #31
 8000fec:	1ac9      	subs	r1, r1, r3
 8000fee:	460b      	mov	r3, r1
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	440b      	add	r3, r1
 8000ff4:	1ad1      	subs	r1, r2, r3
 8000ff6:	b2ca      	uxtb	r2, r1
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8000ffa:	701a      	strb	r2, [r3, #0]
} /* HAL_TIM_PeriodElapsedCallback */
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200000a0 	.word	0x200000a0
 8001008:	200000ac 	.word	0x200000ac
 800100c:	200000a4 	.word	0x200000a4
 8001010:	200000a8 	.word	0x200000a8
 8001014:	200000b0 	.word	0x200000b0
 8001018:	200000bc 	.word	0x200000bc
 800101c:	2000008c 	.word	0x2000008c
 8001020:	200000b4 	.word	0x200000b4
 8001024:	200000b8 	.word	0x200000b8
 8001028:	200000b6 	.word	0x200000b6
 800102c:	200000ba 	.word	0x200000ba
 8001030:	be99999a 	.word	0xbe99999a
 8001034:	3e99999a 	.word	0x3e99999a
 8001038:	fffffea2 	.word	0xfffffea2
 800103c:	2000009a 	.word	0x2000009a
 8001040:	2000009c 	.word	0x2000009c
 8001044:	2000009e 	.word	0x2000009e
 8001048:	55555556 	.word	0x55555556

0800104c <tim6_wait_us>:
// 1us毎にカウントアップするTIM6を使ってusマイクロ秒処理を止める関数。
// （whileループ中にオーバーフローが起こると機能しないのでTIM6タイマ更新割り込みハンドラ内のみで使用することを推奨する）
// 引数：us …… 処理を止めたいマイクロ秒
// 戻り値：無し
//+++++++++++++++++++++++++++++++++++++++++++++++
void tim6_wait_us(uint32_t us) {
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    uint32_t dest = __HAL_TIM_GET_COUNTER(&htim6) + us;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <tim6_wait_us+0x30>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
    while (__HAL_TIM_GET_COUNTER(&htim6) < dest)
 8001060:	bf00      	nop
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <tim6_wait_us+0x30>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	429a      	cmp	r2, r3
 800106c:	d8f9      	bhi.n	8001062 <tim6_wait_us+0x16>
        ;
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	2000046c 	.word	0x2000046c

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001086:	f001 fe63 	bl	8002d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 f96d 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f000 fc17 	bl	80018c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001092:	f000 f9c3 	bl	800141c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001096:	f000 fa4f 	bl	8001538 <MX_ADC2_Init>
  MX_TIM6_Init();
 800109a:	f000 fabb 	bl	8001614 <MX_TIM6_Init>
  MX_TIM16_Init();
 800109e:	f000 faef 	bl	8001680 <MX_TIM16_Init>
  MX_TIM17_Init();
 80010a2:	f000 fb65 	bl	8001770 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80010a6:	f000 fbdb 	bl	8001860 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

    setbuf(stdout, NULL);  // printf用
 80010aa:	4b92      	ldr	r3, [pc, #584]	; (80012f4 <main+0x274>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f006 fc80 	bl	80079b8 <setbuf>

    sensor_init();  // センサ系の変数の初期化，ADコンバ�?�タの設定とセンサ値取得に使用するタイマ�?�初期設�?
 80010b8:	f001 fa30 	bl	800251c <sensor_init>
                    // sensor.c で定義されて�?�?
    drive_init();  // 走行系の変数の初期化，モーター関係�?�GPIO設定とPWM出力に使�?タイマ割込みの設�?
 80010bc:	f7ff fb46 	bl	800074c <drive_init>
                   // drive.c で定義されて�?�?
    search_init();  // 探索系の変数の初期化，search.c で定義されて�?�?
 80010c0:	f000 fc96 	bl	80019f0 <search_init>

    printf("***** WMMC Nucleo Mouse 2023 *****\n");
 80010c4:	488c      	ldr	r0, [pc, #560]	; (80012f8 <main+0x278>)
 80010c6:	f006 fc6f 	bl	80079a8 <puts>

    //====変数宣?��?====
    int mode = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
        //====モード選?��?====
        mode = select_mode(
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff f906 	bl	80002e0 <select_mode>
 80010d4:	6078      	str	r0, [r7, #4]
            mode);  // select_mode(); は auxiliary.c で定義されて�?�?

        //----モード選�?----
        switch (mode) {
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	d8f8      	bhi.n	80010ce <main+0x4e>
 80010dc:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <main+0x64>)
 80010de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e2:	bf00      	nop
 80010e4:	08001105 	.word	0x08001105
 80010e8:	08001111 	.word	0x08001111
 80010ec:	08001191 	.word	0x08001191
 80010f0:	08001211 	.word	0x08001211
 80010f4:	08001219 	.word	0x08001219
 80010f8:	08001221 	.word	0x08001221
 80010fc:	08001229 	.word	0x08001229
 8001100:	08001235 	.word	0x08001235
            case 0:
                //----基準�?�を取�?----
                // こ�?�動作�?�スタート時に自動で行うと便利で?��case 1~
                // ではそうなって�?る．このモード�?�手動で行う場合に使用する?�?
                printf("Mode 0: Get Base Value.\n");
 8001104:	487d      	ldr	r0, [pc, #500]	; (80012fc <main+0x27c>)
 8001106:	f006 fc4f 	bl	80079a8 <puts>
                get_base();  // 壁制御のための基準�?�取得，sensor.c
 800110a:	f001 fab1 	bl	8002670 <get_base>
                             // で定義されて�?�?
                break;
 800110e:	e0f0      	b.n	80012f2 <main+0x272>

            case 1:
                //----探索走�?----
                printf("Mode 1: 1st Run.\n");
 8001110:	487b      	ldr	r0, [pc, #492]	; (8001300 <main+0x280>)
 8001112:	f006 fc49 	bl	80079a8 <puts>
                drive_enable_motor();  // ス�?�?ピングモータを励磁す�?
 8001116:	f7ff fb47 	bl	80007a8 <drive_enable_motor>
                                       // drive.cで定義されて�?�?

                MF.FLAG.SCND = 0;  // 二次走行フラグをクリア
 800111a:	4a7a      	ldr	r2, [pc, #488]	; (8001304 <main+0x284>)
 800111c:	8813      	ldrh	r3, [r2, #0]
 800111e:	f36f 0341 	bfc	r3, #1, #1
 8001122:	8013      	strh	r3, [r2, #0]
                                   // マウスフラグはglobal.h に定義あり
                goal_x = GOAL_X;
 8001124:	4b78      	ldr	r3, [pc, #480]	; (8001308 <main+0x288>)
 8001126:	2207      	movs	r2, #7
 8001128:	701a      	strb	r2, [r3, #0]
                goal_y = GOAL_Y;  // ゴール座標を設定，GOAL_X・GOAL_Y はglobal.h
 800112a:	4b78      	ldr	r3, [pc, #480]	; (800130c <main+0x28c>)
 800112c:	2207      	movs	r2, #7
 800112e:	701a      	strb	r2, [r3, #0]
                                  // に定義あり

                rotate_R90();  // 右に90度回転する drive.c で定義されて�?�?
 8001130:	f7ff f9a0 	bl	8000474 <rotate_R90>
                drive_wait();  // 機体が安定するまで�?機，drive.h に定義あり
 8001134:	200f      	movs	r0, #15
 8001136:	f001 fe71 	bl	8002e1c <HAL_Delay>
                set_position(0);  // 尻当てをして機体位置を中央へ drive.c
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff f9ea 	bl	8000514 <set_position>
                                  // で定義されて�?�?
                drive_wait();  // 機体が安定するまで�?�?
 8001140:	200f      	movs	r0, #15
 8001142:	f001 fe6b 	bl	8002e1c <HAL_Delay>
                rotate_L90();  // 左に90度回転する drive.c で定義されて�?�?
 8001146:	f7ff f9af 	bl	80004a8 <rotate_L90>
                drive_wait();     // 機体が安定するまで�?�?
 800114a:	200f      	movs	r0, #15
 800114c:	f001 fe66 	bl	8002e1c <HAL_Delay>
                set_position(0);  // 尻当てをして機体位置を中央へ
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff f9df 	bl	8000514 <set_position>
                drive_wait();     // 機体が安定するまで�?�?
 8001156:	200f      	movs	r0, #15
 8001158:	f001 fe60 	bl	8002e1c <HAL_Delay>

                get_base();  // 壁制御のための基準取�?
 800115c:	f001 fa88 	bl	8002670 <get_base>

                searchB();  // 現在位置をスタート地点にしてからゴール座標まで探索走�?
 8001160:	f000 fc66 	bl	8001a30 <searchB>
                HAL_Delay(500);
 8001164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001168:	f001 fe58 	bl	8002e1c <HAL_Delay>

                goal_x = goal_y = 0;  // ゴール座標をスタート地点に設定す�?
 800116c:	4b67      	ldr	r3, [pc, #412]	; (800130c <main+0x28c>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
 8001172:	4b66      	ldr	r3, [pc, #408]	; (800130c <main+0x28c>)
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	4b64      	ldr	r3, [pc, #400]	; (8001308 <main+0x288>)
 8001178:	701a      	strb	r2, [r3, #0]
                searchB();  // 探索しながらスタート地点に戻�?
 800117a:	f000 fc59 	bl	8001a30 <searchB>

                goal_x = GOAL_X;
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <main+0x288>)
 8001180:	2207      	movs	r2, #7
 8001182:	701a      	strb	r2, [r3, #0]
                goal_y = GOAL_Y;  // ゴール座標を設�?
 8001184:	4b61      	ldr	r3, [pc, #388]	; (800130c <main+0x28c>)
 8001186:	2207      	movs	r2, #7
 8001188:	701a      	strb	r2, [r3, #0]

                drive_disable_motor();  // ス�?�?ピングモータの励磁を�?�?
 800118a:	f7ff fb1f 	bl	80007cc <drive_disable_motor>
                break;
 800118e:	e0b0      	b.n	80012f2 <main+0x272>

            case 2:
                //----二次?��最短?��走�?----
                printf("Mode 2: 2nd Run.\n");
 8001190:	485f      	ldr	r0, [pc, #380]	; (8001310 <main+0x290>)
 8001192:	f006 fc09 	bl	80079a8 <puts>
                drive_enable_motor();
 8001196:	f7ff fb07 	bl	80007a8 <drive_enable_motor>

                MF.FLAG.SCND = 1;  // 二次走行フラグをセ�?�?
 800119a:	4a5a      	ldr	r2, [pc, #360]	; (8001304 <main+0x284>)
 800119c:	8813      	ldrh	r3, [r2, #0]
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	8013      	strh	r3, [r2, #0]
                goal_x = GOAL_X;
 80011a4:	4b58      	ldr	r3, [pc, #352]	; (8001308 <main+0x288>)
 80011a6:	2207      	movs	r2, #7
 80011a8:	701a      	strb	r2, [r3, #0]
                goal_y = GOAL_Y;
 80011aa:	4b58      	ldr	r3, [pc, #352]	; (800130c <main+0x28c>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	701a      	strb	r2, [r3, #0]

                rotate_R90();
 80011b0:	f7ff f960 	bl	8000474 <rotate_R90>
                drive_wait();
 80011b4:	200f      	movs	r0, #15
 80011b6:	f001 fe31 	bl	8002e1c <HAL_Delay>
                set_position(0);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff f9aa 	bl	8000514 <set_position>
                drive_wait();
 80011c0:	200f      	movs	r0, #15
 80011c2:	f001 fe2b 	bl	8002e1c <HAL_Delay>
                rotate_L90();
 80011c6:	f7ff f96f 	bl	80004a8 <rotate_L90>
                drive_wait();
 80011ca:	200f      	movs	r0, #15
 80011cc:	f001 fe26 	bl	8002e1c <HAL_Delay>
                set_position(0);
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff f99f 	bl	8000514 <set_position>
                drive_wait();
 80011d6:	200f      	movs	r0, #15
 80011d8:	f001 fe20 	bl	8002e1c <HAL_Delay>

                get_base();
 80011dc:	f001 fa48 	bl	8002670 <get_base>

                searchB();
 80011e0:	f000 fc26 	bl	8001a30 <searchB>
                HAL_Delay(500);
 80011e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e8:	f001 fe18 	bl	8002e1c <HAL_Delay>

                goal_x = goal_y = 0;
 80011ec:	4b47      	ldr	r3, [pc, #284]	; (800130c <main+0x28c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	4b46      	ldr	r3, [pc, #280]	; (800130c <main+0x28c>)
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	4b44      	ldr	r3, [pc, #272]	; (8001308 <main+0x288>)
 80011f8:	701a      	strb	r2, [r3, #0]
                searchB();
 80011fa:	f000 fc19 	bl	8001a30 <searchB>

                goal_x = GOAL_X;
 80011fe:	4b42      	ldr	r3, [pc, #264]	; (8001308 <main+0x288>)
 8001200:	2207      	movs	r2, #7
 8001202:	701a      	strb	r2, [r3, #0]
                goal_y = GOAL_Y;
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <main+0x28c>)
 8001206:	2207      	movs	r2, #7
 8001208:	701a      	strb	r2, [r3, #0]

                drive_disable_motor();
 800120a:	f7ff fadf 	bl	80007cc <drive_disable_motor>
                break;
 800120e:	e070      	b.n	80012f2 <main+0x272>

                //----空きモー�?----
                // マイクロマウスのルールでは5�?間で5回走行できるので?���?�続で何回か走行するモードを作っておくと良�?�?
                // ggr「�?�イクロマウス オートスタート�??

                printf("Mode 3: .\n");
 8001210:	4840      	ldr	r0, [pc, #256]	; (8001314 <main+0x294>)
 8001212:	f006 fbc9 	bl	80079a8 <puts>

                break;
 8001216:	e06c      	b.n	80012f2 <main+0x272>

            case 4:

                //----空きモー�?----
                printf("Mode 4: .\n");
 8001218:	483f      	ldr	r0, [pc, #252]	; (8001318 <main+0x298>)
 800121a:	f006 fbc5 	bl	80079a8 <puts>
                break;
 800121e:	e068      	b.n	80012f2 <main+0x272>

            case 5:

                //----空きモー�?----
                printf("Mode 5: .\n");
 8001220:	483e      	ldr	r0, [pc, #248]	; (800131c <main+0x29c>)
 8001222:	f006 fbc1 	bl	80079a8 <puts>
                break;
 8001226:	e064      	b.n	80012f2 <main+0x272>

            case 6:
                //----�?スト走�?----
                // こ�?�モードを使って区画距離?��旋回角度などのパラメータを調整する

                printf("Mode 6: Test Run.\n");
 8001228:	483d      	ldr	r0, [pc, #244]	; (8001320 <main+0x2a0>)
 800122a:	f006 fbbd 	bl	80079a8 <puts>
                test_run();  // test_run(); は drive.c で定義されて�?�?
 800122e:	f7ff fb83 	bl	8000938 <test_run>
                break;
 8001232:	e05e      	b.n	80012f2 <main+0x272>

            case 7:
                //----センサチェ�?ク----
                // こ�?�モードを使ってセンサで壁�?�有無を判断するための閾値を調整する

                printf("Sensor Check.\n");
 8001234:	483b      	ldr	r0, [pc, #236]	; (8001324 <main+0x2a4>)
 8001236:	f006 fbb7 	bl	80079a8 <puts>
                while (1) {
                    get_wall_info();
 800123a:	f001 fa37 	bl	80026ac <get_wall_info>
                    led_write(wall_info & 0x44, wall_info & 0x88,
 800123e:	4b3a      	ldr	r3, [pc, #232]	; (8001328 <main+0x2a8>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8001246:	b2d8      	uxtb	r0, r3
 8001248:	4b37      	ldr	r3, [pc, #220]	; (8001328 <main+0x2a8>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001250:	b2d9      	uxtb	r1, r3
 8001252:	4b35      	ldr	r3, [pc, #212]	; (8001328 <main+0x2a8>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	f003 0311 	and.w	r3, r3, #17
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	f7ff f807 	bl	8000270 <led_write>
                              wall_info & 0x11);
                    printf(
 8001262:	4b32      	ldr	r3, [pc, #200]	; (800132c <main+0x2ac>)
 8001264:	6819      	ldr	r1, [r3, #0]
 8001266:	4b32      	ldr	r3, [pc, #200]	; (8001330 <main+0x2b0>)
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	4b32      	ldr	r3, [pc, #200]	; (8001334 <main+0x2b4>)
 800126c:	681c      	ldr	r4, [r3, #0]
 800126e:	4b32      	ldr	r3, [pc, #200]	; (8001338 <main+0x2b8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a32      	ldr	r2, [pc, #200]	; (800133c <main+0x2bc>)
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	9201      	str	r2, [sp, #4]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	4623      	mov	r3, r4
 800127c:	4602      	mov	r2, r0
 800127e:	4830      	ldr	r0, [pc, #192]	; (8001340 <main+0x2c0>)
 8001280:	f006 fb0c 	bl	800789c <iprintf>
                        " ad_l : %4d, ad_fl : %4d, ad_fr : %4d, ad_r : %4d, "
                        "ad_batt : %4d\n",
                        ad_l, ad_fl, ad_fr, ad_r, ad_batt);
                    printf("dif_l : %4d, dif_r : %4d\n", dif_l, dif_r);
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <main+0x2c4>)
 8001286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128a:	4619      	mov	r1, r3
 800128c:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <main+0x2c8>)
 800128e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001292:	461a      	mov	r2, r3
 8001294:	482d      	ldr	r0, [pc, #180]	; (800134c <main+0x2cc>)
 8001296:	f006 fb01 	bl	800789c <iprintf>
                    if (wall_info & 0x11) {
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <main+0x2a8>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	f003 0311 	and.w	r3, r3, #17
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <main+0x22e>
                        printf("Left : [X], ");
 80012a6:	482a      	ldr	r0, [pc, #168]	; (8001350 <main+0x2d0>)
 80012a8:	f006 faf8 	bl	800789c <iprintf>
 80012ac:	e002      	b.n	80012b4 <main+0x234>
                    } else {
                        printf("Left : [ ], ");
 80012ae:	4829      	ldr	r0, [pc, #164]	; (8001354 <main+0x2d4>)
 80012b0:	f006 faf4 	bl	800789c <iprintf>
                    }
                    if (wall_info & 0x88) {
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <main+0x2a8>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	f003 0388 	and.w	r3, r3, #136	; 0x88
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <main+0x248>
                        printf("Front : [X], ");
 80012c0:	4825      	ldr	r0, [pc, #148]	; (8001358 <main+0x2d8>)
 80012c2:	f006 faeb 	bl	800789c <iprintf>
 80012c6:	e002      	b.n	80012ce <main+0x24e>
                    } else {
                        printf("Front : [ ], ");
 80012c8:	4824      	ldr	r0, [pc, #144]	; (800135c <main+0x2dc>)
 80012ca:	f006 fae7 	bl	800789c <iprintf>
                    }
                    if (wall_info & 0x44) {
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <main+0x2a8>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <main+0x262>
                        printf("Right : [X]\n");
 80012da:	4821      	ldr	r0, [pc, #132]	; (8001360 <main+0x2e0>)
 80012dc:	f006 fb64 	bl	80079a8 <puts>
 80012e0:	e002      	b.n	80012e8 <main+0x268>
                    } else {
                        printf("Right : [ ]\n");
 80012e2:	4820      	ldr	r0, [pc, #128]	; (8001364 <main+0x2e4>)
 80012e4:	f006 fb60 	bl	80079a8 <puts>
                    // 参�?�?�?
                    // これを利用してバッ�?リーが消�?�してきたらLEDなどで知らせる機�?�を追�?すると便利

                    // printf("ad_batt : %4d\n", ad_batt);

                    HAL_Delay(333);
 80012e8:	f240 104d 	movw	r0, #333	; 0x14d
 80012ec:	f001 fd96 	bl	8002e1c <HAL_Delay>
                    get_wall_info();
 80012f0:	e7a3      	b.n	800123a <main+0x1ba>
        mode = select_mode(
 80012f2:	e6ec      	b.n	80010ce <main+0x4e>
 80012f4:	2000000c 	.word	0x2000000c
 80012f8:	08008aec 	.word	0x08008aec
 80012fc:	08008b10 	.word	0x08008b10
 8001300:	08008b28 	.word	0x08008b28
 8001304:	2000008c 	.word	0x2000008c
 8001308:	200002c5 	.word	0x200002c5
 800130c:	200002c6 	.word	0x200002c6
 8001310:	08008b3c 	.word	0x08008b3c
 8001314:	08008b50 	.word	0x08008b50
 8001318:	08008b5c 	.word	0x08008b5c
 800131c:	08008b68 	.word	0x08008b68
 8001320:	08008b74 	.word	0x08008b74
 8001324:	08008b88 	.word	0x08008b88
 8001328:	200002c4 	.word	0x200002c4
 800132c:	200000ac 	.word	0x200000ac
 8001330:	200000a8 	.word	0x200000a8
 8001334:	200000a4 	.word	0x200000a4
 8001338:	200000a0 	.word	0x200000a0
 800133c:	200000b0 	.word	0x200000b0
 8001340:	08008b98 	.word	0x08008b98
 8001344:	200000b8 	.word	0x200000b8
 8001348:	200000ba 	.word	0x200000ba
 800134c:	08008bdc 	.word	0x08008bdc
 8001350:	08008bf8 	.word	0x08008bf8
 8001354:	08008c08 	.word	0x08008c08
 8001358:	08008c18 	.word	0x08008c18
 800135c:	08008c28 	.word	0x08008c28
 8001360:	08008c38 	.word	0x08008c38
 8001364:	08008c44 	.word	0x08008c44

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	; 0x58
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001372:	2228      	movs	r2, #40	; 0x28
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f006 fa88 	bl	800788c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]
 800139a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800139c:	2302      	movs	r3, #2
 800139e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a0:	2301      	movs	r3, #1
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a4:	2310      	movs	r3, #16
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a8:	2302      	movs	r3, #2
 80013aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ac:	2300      	movs	r3, #0
 80013ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80013b0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80013b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 f952 	bl	8004664 <HAL_RCC_OscConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x62>
  {
    Error_Handler();
 80013c6:	f000 fb0b 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ca:	230f      	movs	r3, #15
 80013cc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ce:	2302      	movs	r3, #2
 80013d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	2102      	movs	r1, #2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 f97a 	bl	80056e0 <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013f2:	f000 faf5 	bl	80019e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80013fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fe:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	4618      	mov	r0, r3
 8001404:	f004 fba2 	bl	8005b4c <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800140e:	f000 fae7 	bl	80019e0 <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3758      	adds	r7, #88	; 0x58
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800143e:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <MX_ADC1_Init+0x118>)
 8001440:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001444:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001446:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <MX_ADC1_Init+0x118>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <MX_ADC1_Init+0x118>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <MX_ADC1_Init+0x118>)
 8001454:	2201      	movs	r2, #1
 8001456:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001458:	4b36      	ldr	r3, [pc, #216]	; (8001534 <MX_ADC1_Init+0x118>)
 800145a:	2200      	movs	r2, #0
 800145c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800145e:	4b35      	ldr	r3, [pc, #212]	; (8001534 <MX_ADC1_Init+0x118>)
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001466:	4b33      	ldr	r3, [pc, #204]	; (8001534 <MX_ADC1_Init+0x118>)
 8001468:	2201      	movs	r2, #1
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800146c:	4b31      	ldr	r3, [pc, #196]	; (8001534 <MX_ADC1_Init+0x118>)
 800146e:	2200      	movs	r2, #0
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001472:	4b30      	ldr	r3, [pc, #192]	; (8001534 <MX_ADC1_Init+0x118>)
 8001474:	2201      	movs	r2, #1
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001478:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <MX_ADC1_Init+0x118>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <MX_ADC1_Init+0x118>)
 8001480:	2203      	movs	r2, #3
 8001482:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <MX_ADC1_Init+0x118>)
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <MX_ADC1_Init+0x118>)
 800148e:	2204      	movs	r2, #4
 8001490:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001492:	4b28      	ldr	r3, [pc, #160]	; (8001534 <MX_ADC1_Init+0x118>)
 8001494:	2200      	movs	r2, #0
 8001496:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001498:	4b26      	ldr	r3, [pc, #152]	; (8001534 <MX_ADC1_Init+0x118>)
 800149a:	2200      	movs	r2, #0
 800149c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800149e:	4825      	ldr	r0, [pc, #148]	; (8001534 <MX_ADC1_Init+0x118>)
 80014a0:	f001 fce0 	bl	8002e64 <HAL_ADC_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80014aa:	f000 fa99 	bl	80019e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	481e      	ldr	r0, [pc, #120]	; (8001534 <MX_ADC1_Init+0x118>)
 80014ba:	f002 fab7 	bl	8003a2c <HAL_ADCEx_MultiModeConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80014c4:	f000 fa8c 	bl	80019e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	4813      	ldr	r0, [pc, #76]	; (8001534 <MX_ADC1_Init+0x118>)
 80014e6:	f001 ffe1 	bl	80034ac <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80014f0:	f000 fa76 	bl	80019e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_ADC1_Init+0x118>)
 8001502:	f001 ffd3 	bl	80034ac <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800150c:	f000 fa68 	bl	80019e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001510:	230c      	movs	r3, #12
 8001512:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001514:	2303      	movs	r3, #3
 8001516:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_ADC1_Init+0x118>)
 800151e:	f001 ffc5 	bl	80034ac <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001528:	f000 fa5a 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	; 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200003cc 	.word	0x200003cc

08001538 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800153e:	463b      	mov	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <MX_ADC2_Init+0xd4>)
 8001550:	4a2f      	ldr	r2, [pc, #188]	; (8001610 <MX_ADC2_Init+0xd8>)
 8001552:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <MX_ADC2_Init+0xd4>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <MX_ADC2_Init+0xd4>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <MX_ADC2_Init+0xd4>)
 8001562:	2201      	movs	r2, #1
 8001564:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001566:	4b29      	ldr	r3, [pc, #164]	; (800160c <MX_ADC2_Init+0xd4>)
 8001568:	2200      	movs	r2, #0
 800156a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = ENABLE;
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <MX_ADC2_Init+0xd4>)
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <MX_ADC2_Init+0xd4>)
 8001576:	2201      	movs	r2, #1
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <MX_ADC2_Init+0xd4>)
 800157c:	2200      	movs	r2, #0
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_ADC2_Init+0xd4>)
 8001582:	2201      	movs	r2, #1
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_ADC2_Init+0xd4>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_ADC2_Init+0xd4>)
 800158e:	2202      	movs	r2, #2
 8001590:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001592:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_ADC2_Init+0xd4>)
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_ADC2_Init+0xd4>)
 800159c:	2204      	movs	r2, #4
 800159e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_ADC2_Init+0xd4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_ADC2_Init+0xd4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015ac:	4817      	ldr	r0, [pc, #92]	; (800160c <MX_ADC2_Init+0xd4>)
 80015ae:	f001 fc59 	bl	8002e64 <HAL_ADC_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80015b8:	f000 fa12 	bl	80019e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015bc:	2301      	movs	r3, #1
 80015be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <MX_ADC2_Init+0xd4>)
 80015da:	f001 ff67 	bl	80034ac <HAL_ADC_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80015e4:	f000 f9fc 	bl	80019e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015e8:	2304      	movs	r3, #4
 80015ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_ADC2_Init+0xd4>)
 80015f6:	f001 ff59 	bl	80034ac <HAL_ADC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 8001600:	f000 f9ee 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000041c 	.word	0x2000041c
 8001610:	50000100 	.word	0x50000100

08001614 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_TIM6_Init+0x64>)
 8001626:	4a15      	ldr	r2, [pc, #84]	; (800167c <MX_TIM6_Init+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64-1;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_TIM6_Init+0x64>)
 800162c:	223f      	movs	r2, #63	; 0x3f
 800162e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_TIM6_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4000;
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <MX_TIM6_Init+0x64>)
 8001638:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800163c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_TIM6_Init+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <MX_TIM6_Init+0x64>)
 8001646:	f004 fba7 	bl	8005d98 <HAL_TIM_Base_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001650:	f000 f9c6 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_TIM6_Init+0x64>)
 8001662:	f005 fbc1 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800166c:	f000 f9b8 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000046c 	.word	0x2000046c
 800167c:	40001000 	.word	0x40001000

08001680 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b092      	sub	sp, #72	; 0x48
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	615a      	str	r2, [r3, #20]
 8001698:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800169a:	463b      	mov	r3, r7
 800169c:	222c      	movs	r2, #44	; 0x2c
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f006 f8f3 	bl	800788c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016a6:	4b30      	ldr	r3, [pc, #192]	; (8001768 <MX_TIM16_Init+0xe8>)
 80016a8:	4a30      	ldr	r2, [pc, #192]	; (800176c <MX_TIM16_Init+0xec>)
 80016aa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64-1;
 80016ac:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <MX_TIM16_Init+0xe8>)
 80016ae:	223f      	movs	r2, #63	; 0x3f
 80016b0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <MX_TIM16_Init+0xe8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <MX_TIM16_Init+0xe8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <MX_TIM16_Init+0xe8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <MX_TIM16_Init+0xe8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <MX_TIM16_Init+0xe8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016d0:	4825      	ldr	r0, [pc, #148]	; (8001768 <MX_TIM16_Init+0xe8>)
 80016d2:	f004 fb61 	bl	8005d98 <HAL_TIM_Base_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80016dc:	f000 f980 	bl	80019e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80016e0:	4821      	ldr	r0, [pc, #132]	; (8001768 <MX_TIM16_Init+0xe8>)
 80016e2:	f004 fc05 	bl	8005ef0 <HAL_TIM_PWM_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80016ec:	f000 f978 	bl	80019e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f0:	2360      	movs	r3, #96	; 0x60
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 25;
 80016f4:	2319      	movs	r3, #25
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016fc:	2300      	movs	r3, #0
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001710:	2200      	movs	r2, #0
 8001712:	4619      	mov	r1, r3
 8001714:	4814      	ldr	r0, [pc, #80]	; (8001768 <MX_TIM16_Init+0xe8>)
 8001716:	f004 fee7 	bl	80064e8 <HAL_TIM_PWM_ConfigChannel>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8001720:	f000 f95e 	bl	80019e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4619      	mov	r1, r3
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <MX_TIM16_Init+0xe8>)
 800174c:	f005 fbba 	bl	8006ec4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8001756:	f000 f943 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800175a:	4803      	ldr	r0, [pc, #12]	; (8001768 <MX_TIM16_Init+0xe8>)
 800175c:	f001 f8fe 	bl	800295c <HAL_TIM_MspPostInit>

}
 8001760:	bf00      	nop
 8001762:	3748      	adds	r7, #72	; 0x48
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200004b8 	.word	0x200004b8
 800176c:	40014400 	.word	0x40014400

08001770 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b092      	sub	sp, #72	; 0x48
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001776:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
 8001786:	615a      	str	r2, [r3, #20]
 8001788:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800178a:	463b      	mov	r3, r7
 800178c:	222c      	movs	r2, #44	; 0x2c
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f006 f87b 	bl	800788c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <MX_TIM17_Init+0xe8>)
 8001798:	4a30      	ldr	r2, [pc, #192]	; (800185c <MX_TIM17_Init+0xec>)
 800179a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64-1;
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <MX_TIM17_Init+0xe8>)
 800179e:	223f      	movs	r2, #63	; 0x3f
 80017a0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <MX_TIM17_Init+0xe8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <MX_TIM17_Init+0xe8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <MX_TIM17_Init+0xe8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <MX_TIM17_Init+0xe8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ba:	4b27      	ldr	r3, [pc, #156]	; (8001858 <MX_TIM17_Init+0xe8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80017c0:	4825      	ldr	r0, [pc, #148]	; (8001858 <MX_TIM17_Init+0xe8>)
 80017c2:	f004 fae9 	bl	8005d98 <HAL_TIM_Base_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80017cc:	f000 f908 	bl	80019e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80017d0:	4821      	ldr	r0, [pc, #132]	; (8001858 <MX_TIM17_Init+0xe8>)
 80017d2:	f004 fb8d 	bl	8005ef0 <HAL_TIM_PWM_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80017dc:	f000 f900 	bl	80019e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e0:	2360      	movs	r3, #96	; 0x60
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 25;
 80017e4:	2319      	movs	r3, #25
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001800:	2200      	movs	r2, #0
 8001802:	4619      	mov	r1, r3
 8001804:	4814      	ldr	r0, [pc, #80]	; (8001858 <MX_TIM17_Init+0xe8>)
 8001806:	f004 fe6f 	bl	80064e8 <HAL_TIM_PWM_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8001810:	f000 f8e6 	bl	80019e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001836:	463b      	mov	r3, r7
 8001838:	4619      	mov	r1, r3
 800183a:	4807      	ldr	r0, [pc, #28]	; (8001858 <MX_TIM17_Init+0xe8>)
 800183c:	f005 fb42 	bl	8006ec4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8001846:	f000 f8cb 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800184a:	4803      	ldr	r0, [pc, #12]	; (8001858 <MX_TIM17_Init+0xe8>)
 800184c:	f001 f886 	bl	800295c <HAL_TIM_MspPostInit>

}
 8001850:	bf00      	nop
 8001852:	3748      	adds	r7, #72	; 0x48
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000504 	.word	0x20000504
 800185c:	40014800 	.word	0x40014800

08001860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <MX_USART2_UART_Init+0x5c>)
 8001868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 800186c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 8001886:	220c      	movs	r2, #12
 8001888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 80018a4:	f005 fba4 	bl	8006ff0 <HAL_UART_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018ae:	f000 f897 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000550 	.word	0x20000550
 80018bc:	40004400 	.word	0x40004400

080018c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d6:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <MX_GPIO_Init+0x114>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4a3e      	ldr	r2, [pc, #248]	; (80019d4 <MX_GPIO_Init+0x114>)
 80018dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e0:	6153      	str	r3, [r2, #20]
 80018e2:	4b3c      	ldr	r3, [pc, #240]	; (80019d4 <MX_GPIO_Init+0x114>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <MX_GPIO_Init+0x114>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	4a38      	ldr	r2, [pc, #224]	; (80019d4 <MX_GPIO_Init+0x114>)
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	6153      	str	r3, [r2, #20]
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <MX_GPIO_Init+0x114>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <MX_GPIO_Init+0x114>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <MX_GPIO_Init+0x114>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <MX_GPIO_Init+0x114>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2101      	movs	r1, #1
 8001922:	482d      	ldr	r0, [pc, #180]	; (80019d8 <MX_GPIO_Init+0x118>)
 8001924:	f002 fe86 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IR_SIDE_Pin|M3_2_Pin|CW_CCW_R_2_Pin|LED4_Pin
 8001928:	2200      	movs	r2, #0
 800192a:	f241 6168 	movw	r1, #5736	; 0x1668
 800192e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001932:	f002 fe7f 	bl	8004634 <HAL_GPIO_WritePin>
                          |IR_FRONT_Pin|LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|CW_CCW_L_Pin|CW_CCW_R_Pin|M3_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	21c9      	movs	r1, #201	; 0xc9
 800193a:	4828      	ldr	r0, [pc, #160]	; (80019dc <MX_GPIO_Init+0x11c>)
 800193c:	f002 fe7a 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001940:	2301      	movs	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	4619      	mov	r1, r3
 8001956:	4820      	ldr	r0, [pc, #128]	; (80019d8 <MX_GPIO_Init+0x118>)
 8001958:	f002 fce2 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 800195c:	2302      	movs	r3, #2
 800195e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001964:	2301      	movs	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4619      	mov	r1, r3
 800196e:	481a      	ldr	r0, [pc, #104]	; (80019d8 <MX_GPIO_Init+0x118>)
 8001970:	f002 fcd6 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_SIDE_Pin M3_2_Pin CW_CCW_R_2_Pin LED4_Pin
                           IR_FRONT_Pin LED2_Pin */
  GPIO_InitStruct.Pin = IR_SIDE_Pin|M3_2_Pin|CW_CCW_R_2_Pin|LED4_Pin
 8001974:	f241 6368 	movw	r3, #5736	; 0x1668
 8001978:	60fb      	str	r3, [r7, #12]
                          |IR_FRONT_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001990:	f002 fcc6 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin CW_CCW_L_Pin CW_CCW_R_Pin M3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|CW_CCW_L_Pin|CW_CCW_R_Pin|M3_Pin;
 8001994:	23c9      	movs	r3, #201	; 0xc9
 8001996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4619      	mov	r1, r3
 80019aa:	480c      	ldr	r0, [pc, #48]	; (80019dc <MX_GPIO_Init+0x11c>)
 80019ac:	f002 fcb8 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80019b0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80019b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	4619      	mov	r1, r3
 80019c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c8:	f002 fcaa 	bl	8004320 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	48001400 	.word	0x48001400
 80019dc:	48000400 	.word	0x48000400

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */

  /* USER CODE END Error_Handler_Debug */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <search_init>:
// search_init
// 探索系の変数とマップの初期化をする
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void search_init(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

    //====マウスフラグの初期化===
    MF.FLAGS = 0; // フラグクリア
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <search_init+0x30>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	801a      	strh	r2, [r3, #0]

    //====探索系の変数の初期化====
    goal_x = GOAL_X; // GOAL_Xはglobal.hにマクロ定義あり
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <search_init+0x34>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	701a      	strb	r2, [r3, #0]
    goal_y = GOAL_Y; // GOAL_Yはglobal.hにマクロ定義あり
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <search_init+0x38>)
 8001a02:	2207      	movs	r2, #7
 8001a04:	701a      	strb	r2, [r3, #0]
    map_Init();      // マップの初期化
 8001a06:	f000 f955 	bl	8001cb4 <map_Init>
    mouse.x = 0;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <search_init+0x3c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
    mouse.y = 0;   // 現在地の初期化
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <search_init+0x3c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	705a      	strb	r2, [r3, #1]
    mouse.dir = 0; // マウスの向きの初期化
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <search_init+0x3c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	709a      	strb	r2, [r3, #2]
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2000008c 	.word	0x2000008c
 8001a24:	200002c5 	.word	0x200002c5
 8001a28:	200002c6 	.word	0x200002c6
 8001a2c:	200000c0 	.word	0x200000c0

08001a30 <searchB>:
// searchB
// 連続走行でgoal座標に進む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void searchB(void) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
    if (MF.FLAG.SCND) {
 8001a34:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <searchB+0x1a8>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <searchB+0x16>
        load_map_from_eeprom(); // 二次走行時はROMからマップ情報を取り出す
 8001a42:	f000 fd3d 	bl	80024c0 <load_map_from_eeprom>
    }

    //====スタート位置壁情報取得====
    get_wall_info();    // 壁情報の初期化, 後壁はなくなる
 8001a46:	f000 fe31 	bl	80026ac <get_wall_info>
    wall_info &= ~0x88; // 前壁は存在するはずがないので削除する
 8001a4a:	4b64      	ldr	r3, [pc, #400]	; (8001bdc <searchB+0x1ac>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <searchB+0x1ac>)
 8001a56:	701a      	strb	r2, [r3, #0]
    write_map();        // 壁情報を地図に記入
 8001a58:	f000 f99a 	bl	8001d90 <write_map>

    //====前に壁が無い想定で問答無用で前進====
    half_sectionA();
 8001a5c:	f7fe fcd8 	bl	8000410 <half_sectionA>
    adv_pos();
 8001a60:	f000 f8d0 	bl	8001c04 <adv_pos>
    write_map();
 8001a64:	f000 f994 	bl	8001d90 <write_map>

    //====歩数マップ・経路作成====
    r_cnt = 0;   // 経路カウンタの初期化
 8001a68:	4b5d      	ldr	r3, [pc, #372]	; (8001be0 <searchB+0x1b0>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
    make_smap(); // 歩数マップ作成
 8001a6e:	f000 facf 	bl	8002010 <make_smap>
    make_route(); // 最短経路探索（route配列に動作が格納される）
 8001a72:	f000 fbc7 	bl	8002204 <make_route>
    //====探索走行====
    do {
        //----進行----
        switch (
            route
                [r_cnt++]) { // route配列によって進行を決定。経路カウンタを進める
 8001a76:	4b5a      	ldr	r3, [pc, #360]	; (8001be0 <searchB+0x1b0>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	b2d1      	uxtb	r1, r2
 8001a7e:	4a58      	ldr	r2, [pc, #352]	; (8001be0 <searchB+0x1b0>)
 8001a80:	7011      	strb	r1, [r2, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b57      	ldr	r3, [pc, #348]	; (8001be4 <searchB+0x1b4>)
 8001a86:	5c9b      	ldrb	r3, [r3, r2]
        switch (
 8001a88:	2b88      	cmp	r3, #136	; 0x88
 8001a8a:	d00a      	beq.n	8001aa2 <searchB+0x72>
 8001a8c:	2b88      	cmp	r3, #136	; 0x88
 8001a8e:	dc78      	bgt.n	8001b82 <searchB+0x152>
 8001a90:	2b44      	cmp	r3, #68	; 0x44
 8001a92:	d009      	beq.n	8001aa8 <searchB+0x78>
 8001a94:	2b44      	cmp	r3, #68	; 0x44
 8001a96:	dc74      	bgt.n	8001b82 <searchB+0x152>
 8001a98:	2b11      	cmp	r3, #17
 8001a9a:	d068      	beq.n	8001b6e <searchB+0x13e>
 8001a9c:	2b22      	cmp	r3, #34	; 0x22
 8001a9e:	d00d      	beq.n	8001abc <searchB+0x8c>
 8001aa0:	e06f      	b.n	8001b82 <searchB+0x152>

        //----前進----
        case 0x88:

            one_sectionU();
 8001aa2:	f7fe fcd3 	bl	800044c <one_sectionU>
            break;
 8001aa6:	e06c      	b.n	8001b82 <searchB+0x152>
        //----右折----
        case 0x44:

            half_sectionD(); // 半区画分減速しながら走行し停止
 8001aa8:	f7fe fcc2 	bl	8000430 <half_sectionD>
            rotate_R90();    // 右回転
 8001aac:	f7fe fce2 	bl	8000474 <rotate_R90>
            turn_dir(DIR_TURN_R90); // マイクロマウス内部位置情報でも右回転処理
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f000 fa95 	bl	8001fe0 <turn_dir>
            half_sectionA(); // 半区画分加速しながら走行する
 8001ab6:	f7fe fcab 	bl	8000410 <half_sectionA>
            break;
 8001aba:	e062      	b.n	8001b82 <searchB+0x152>
        //----180回転----
        case 0x22:

            half_sectionD(); // 半区間分減速しながら走行し停止
 8001abc:	f7fe fcb8 	bl	8000430 <half_sectionD>

            if (ad_fr >= WALL_BASE_FR * 1.5 && ad_fl >= WALL_BASE_FL * 1.5 &&
 8001ac0:	4b49      	ldr	r3, [pc, #292]	; (8001be8 <searchB+0x1b8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f640 0233 	movw	r2, #2099	; 0x833
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d921      	bls.n	8001b10 <searchB+0xe0>
 8001acc:	4b47      	ldr	r3, [pc, #284]	; (8001bec <searchB+0x1bc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001ad4:	d31c      	bcc.n	8001b10 <searchB+0xe0>
                ad_r >= WALL_BASE_R * 1.5) { // 前壁と左壁が確実に有る場合
 8001ad6:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <searchB+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
            if (ad_fr >= WALL_BASE_FR * 1.5 && ad_fl >= WALL_BASE_FL * 1.5 &&
 8001ada:	f640 0233 	movw	r2, #2099	; 0x833
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d916      	bls.n	8001b10 <searchB+0xe0>
                rotate_L90();                // 左回転
 8001ae2:	f7fe fce1 	bl	80004a8 <rotate_L90>
                drive_wait(); // 機体が安定するまで待機，drive.h に定義あり
 8001ae6:	200f      	movs	r0, #15
 8001ae8:	f001 f998 	bl	8002e1c <HAL_Delay>
                set_position(0); // 尻当てをして機体の位置を中央へ，drive.c
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7fe fd11 	bl	8000514 <set_position>
                                 // で定義されている
                drive_wait(); // 機体が安定するまで待機
 8001af2:	200f      	movs	r0, #15
 8001af4:	f001 f992 	bl	8002e1c <HAL_Delay>
                rotate_L90(); // 左回転
 8001af8:	f7fe fcd6 	bl	80004a8 <rotate_L90>
                drive_wait(); // 機体が安定するまで待機，drive.h に定義あり
 8001afc:	200f      	movs	r0, #15
 8001afe:	f001 f98d 	bl	8002e1c <HAL_Delay>
                set_position(0); // 尻当てをして機体の位置を中央へ，drive.c
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7fe fd06 	bl	8000514 <set_position>
                                 // で定義されている
                drive_wait(); // 機体が安定するまで待機
 8001b08:	200f      	movs	r0, #15
 8001b0a:	f001 f987 	bl	8002e1c <HAL_Delay>
 8001b0e:	e028      	b.n	8001b62 <searchB+0x132>
            } else if (
                ad_fr >= WALL_BASE_FR * 1.5 && ad_fl >= WALL_BASE_FL * 1.5 &&
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <searchB+0x1b8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
            } else if (
 8001b14:	f640 0233 	movw	r2, #2099	; 0x833
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d920      	bls.n	8001b5e <searchB+0x12e>
                ad_fr >= WALL_BASE_FR * 1.5 && ad_fl >= WALL_BASE_FL * 1.5 &&
 8001b1c:	4b33      	ldr	r3, [pc, #204]	; (8001bec <searchB+0x1bc>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001b24:	d31b      	bcc.n	8001b5e <searchB+0x12e>
                ad_l >= WALL_BASE_L) { // それ以外で前壁と右壁が確実に有る場合
 8001b26:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <searchB+0x1c4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
                ad_fr >= WALL_BASE_FR * 1.5 && ad_fl >= WALL_BASE_FL * 1.5 &&
 8001b2a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001b2e:	d316      	bcc.n	8001b5e <searchB+0x12e>
                rotate_R90(); // 右回転
 8001b30:	f7fe fca0 	bl	8000474 <rotate_R90>
                drive_wait(); // 機体が安定するまで待機，drive.h に定義あり
 8001b34:	200f      	movs	r0, #15
 8001b36:	f001 f971 	bl	8002e1c <HAL_Delay>
                set_position(0); // 尻当てをして機体の位置を中央へ，drive.c
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7fe fcea 	bl	8000514 <set_position>
                                 // で定義されている
                drive_wait(); // 機体が安定するまで待機
 8001b40:	200f      	movs	r0, #15
 8001b42:	f001 f96b 	bl	8002e1c <HAL_Delay>
                rotate_R90(); // 右回転
 8001b46:	f7fe fc95 	bl	8000474 <rotate_R90>
                drive_wait(); // 機体が安定するまで待機，drive.h に定義あり
 8001b4a:	200f      	movs	r0, #15
 8001b4c:	f001 f966 	bl	8002e1c <HAL_Delay>
                set_position(0); // 尻当てをして機体の位置を中央へ，drive.c
 8001b50:	2000      	movs	r0, #0
 8001b52:	f7fe fcdf 	bl	8000514 <set_position>
                                 // で定義されている
                drive_wait(); // 機体が安定するまで待機
 8001b56:	200f      	movs	r0, #15
 8001b58:	f001 f960 	bl	8002e1c <HAL_Delay>
 8001b5c:	e001      	b.n	8001b62 <searchB+0x132>
            } else {
                rotate_180(); // 180度回転
 8001b5e:	f7fe fcbd 	bl	80004dc <rotate_180>
            }

            turn_dir(
 8001b62:	2002      	movs	r0, #2
 8001b64:	f000 fa3c 	bl	8001fe0 <turn_dir>
                DIR_TURN_180); // マイクロマウス内部位置情報でも180度回転処理
            half_sectionA(); // 半区画分加速しながら走行する
 8001b68:	f7fe fc52 	bl	8000410 <half_sectionA>
            break;
 8001b6c:	e009      	b.n	8001b82 <searchB+0x152>
        //----左折----
        case 0x11:

            half_sectionD(); // 半区画分減速しながら走行し停止
 8001b6e:	f7fe fc5f 	bl	8000430 <half_sectionD>
            rotate_L90();    // 左回転
 8001b72:	f7fe fc99 	bl	80004a8 <rotate_L90>
            turn_dir(DIR_TURN_L90); // マイクロマウス内部位置情報でも右回転処理
 8001b76:	20ff      	movs	r0, #255	; 0xff
 8001b78:	f000 fa32 	bl	8001fe0 <turn_dir>
            half_sectionA(); // 半区画分加速しながら走行する
 8001b7c:	f7fe fc48 	bl	8000410 <half_sectionA>
            break;
 8001b80:	bf00      	nop
        }
        adv_pos();
 8001b82:	f000 f83f 	bl	8001c04 <adv_pos>
        conf_route();
 8001b86:	f000 f877 	bl	8001c78 <conf_route>
//        printf(
//				" ad_l : %4d, ad_fl : %4d, ad_fr : %4d, ad_r : %4d, "
//				"ad_batt : %4d\n",
//				ad_l, ad_fl, ad_fr, ad_r, ad_batt);

    } while ((mouse.x != goal_x) ||
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <searchB+0x1c8>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <searchB+0x1cc>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
             (mouse.y != goal_y)); // 現在座標とgoal座標が等しくなるまで実行
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f47f af6e 	bne.w	8001a76 <searchB+0x46>
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <searchB+0x1c8>)
 8001b9c:	785b      	ldrb	r3, [r3, #1]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <searchB+0x1d0>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
    } while ((mouse.x != goal_x) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	f47f af66 	bne.w	8001a76 <searchB+0x46>

    half_sectionD(); // 半区画分減速しながら走行し停止
 8001baa:	f7fe fc41 	bl	8000430 <half_sectionD>

    HAL_Delay(2200);  //スタートでは***2秒以上***停止しなくてはならない
 8001bae:	f640 0098 	movw	r0, #2200	; 0x898
 8001bb2:	f001 f933 	bl	8002e1c <HAL_Delay>
    rotate_180(); // 180度回転
 8001bb6:	f7fe fc91 	bl	80004dc <rotate_180>
    turn_dir(DIR_TURN_180); // マイクロマウス内部位置情報でも180度回転処理
 8001bba:	2002      	movs	r0, #2
 8001bbc:	f000 fa10 	bl	8001fe0 <turn_dir>

    if (!MF.FLAG.SCND) {
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <searchB+0x1a8>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <searchB+0x1a2>
        store_map_in_eeprom(); // 一次探索走行時はROMにマップ情報を書き込む
 8001bce:	f000 fc47 	bl	8002460 <store_map_in_eeprom>
    }
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000008c 	.word	0x2000008c
 8001bdc:	200002c4 	.word	0x200002c4
 8001be0:	200003c8 	.word	0x200003c8
 8001be4:	200002c8 	.word	0x200002c8
 8001be8:	200000a4 	.word	0x200000a4
 8001bec:	200000a8 	.word	0x200000a8
 8001bf0:	200000a0 	.word	0x200000a0
 8001bf4:	200000ac 	.word	0x200000ac
 8001bf8:	200000c0 	.word	0x200000c0
 8001bfc:	200002c5 	.word	0x200002c5
 8001c00:	200002c6 	.word	0x200002c6

08001c04 <adv_pos>:
// adv_pos
// マイクロマウス内部位置情報で前進させる
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void adv_pos() {
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

    switch (mouse.dir) { // マイクロマウスが現在向いている方向で判定
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <adv_pos+0x70>)
 8001c0a:	789b      	ldrb	r3, [r3, #2]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d82a      	bhi.n	8001c68 <adv_pos+0x64>
 8001c12:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <adv_pos+0x14>)
 8001c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c18:	08001c29 	.word	0x08001c29
 8001c1c:	08001c39 	.word	0x08001c39
 8001c20:	08001c49 	.word	0x08001c49
 8001c24:	08001c59 	.word	0x08001c59
    case 0x00:           // 北方向に向いている場合
        mouse.y++; // Y座標をインクリメント
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <adv_pos+0x70>)
 8001c2a:	785b      	ldrb	r3, [r3, #1]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <adv_pos+0x70>)
 8001c34:	705a      	strb	r2, [r3, #1]
        break;
 8001c36:	e017      	b.n	8001c68 <adv_pos+0x64>
    case 0x01:     // 東方向に向いている場合
        mouse.x++; // X座標をインクリメント
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <adv_pos+0x70>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <adv_pos+0x70>)
 8001c44:	701a      	strb	r2, [r3, #0]
        break;
 8001c46:	e00f      	b.n	8001c68 <adv_pos+0x64>
    case 0x02:     // 南方向に向いている場合
        mouse.y--; // Y座標をデクリメント
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <adv_pos+0x70>)
 8001c4a:	785b      	ldrb	r3, [r3, #1]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <adv_pos+0x70>)
 8001c54:	705a      	strb	r2, [r3, #1]
        break;
 8001c56:	e007      	b.n	8001c68 <adv_pos+0x64>
    case 0x03:     // 西方向に向いている場合
        mouse.x--; // X座標をデクリメント
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <adv_pos+0x70>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <adv_pos+0x70>)
 8001c64:	701a      	strb	r2, [r3, #0]
        break;
 8001c66:	bf00      	nop
    }
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	200000c0 	.word	0x200000c0

08001c78 <conf_route>:
// conf_route
// 進路を判定する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void conf_route() {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0

    //----壁情報書き込み----
    write_map();
 8001c7c:	f000 f888 	bl	8001d90 <write_map>

    //----最短経路上に壁があれば進路変更----
    if (wall_info & route[r_cnt]) {
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <conf_route+0x30>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <conf_route+0x34>)
 8001c88:	5c9a      	ldrb	r2, [r3, r2]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <conf_route+0x38>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <conf_route+0x2c>
        make_smap();  // 歩数マップを更新
 8001c96:	f000 f9bb 	bl	8002010 <make_smap>
        make_route(); // 最短経路を更新
 8001c9a:	f000 fab3 	bl	8002204 <make_route>
        r_cnt = 0;    // 経路カウンタを0に
 8001c9e:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <conf_route+0x30>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
    }
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200003c8 	.word	0x200003c8
 8001cac:	200002c8 	.word	0x200002c8
 8001cb0:	200002c4 	.word	0x200002c4

08001cb4 <map_Init>:
// map_Init
// マップ格納配列map[][]の初期化をする
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void map_Init() {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
    //====変数宣言====
    uint8_t x, y; // for文用変数

    //====初期化開始====
    // マップのクリア
    for (y = 0; y < 16; y++) {     // 各Y座標で実行
 8001cba:	2300      	movs	r3, #0
 8001cbc:	71bb      	strb	r3, [r7, #6]
 8001cbe:	e013      	b.n	8001ce8 <map_Init+0x34>
        for (x = 0; x < 16; x++) { // 各X座標で実行
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	e00a      	b.n	8001cdc <map_Init+0x28>
            map[y][x] =
 8001cc6:	79ba      	ldrb	r2, [r7, #6]
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4930      	ldr	r1, [pc, #192]	; (8001d8c <map_Init+0xd8>)
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	440a      	add	r2, r1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	22f0      	movs	r2, #240	; 0xf0
 8001cd4:	701a      	strb	r2, [r3, #0]
        for (x = 0; x < 16; x++) { // 各X座標で実行
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	d9f1      	bls.n	8001cc6 <map_Init+0x12>
    for (y = 0; y < 16; y++) {     // 各Y座標で実行
 8001ce2:	79bb      	ldrb	r3, [r7, #6]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	71bb      	strb	r3, [r7, #6]
 8001ce8:	79bb      	ldrb	r3, [r7, #6]
 8001cea:	2b0f      	cmp	r3, #15
 8001cec:	d9e8      	bls.n	8001cc0 <map_Init+0xc>
                0xf0; // 上位4ビット（2次走行時）を壁あり，下位4ビット（1次走行時）を壁なしとする。
        }
    }

    // 確定壁の配置
    for (y = 0; y < 16; y++) { // 各Y座標で実行
 8001cee:	2300      	movs	r3, #0
 8001cf0:	71bb      	strb	r3, [r7, #6]
 8001cf2:	e020      	b.n	8001d36 <map_Init+0x82>
        map[y][0] |= 0xf1;     // 最西に壁を配置
 8001cf4:	79bb      	ldrb	r3, [r7, #6]
 8001cf6:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <map_Init+0xd8>)
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	79bb      	ldrb	r3, [r7, #6]
 8001d00:	f062 020e 	orn	r2, r2, #14
 8001d04:	b2d1      	uxtb	r1, r2
 8001d06:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <map_Init+0xd8>)
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]
        map[y][15] |= 0xf4;    // 最東に壁を配置
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <map_Init+0xd8>)
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	4413      	add	r3, r2
 8001d18:	330f      	adds	r3, #15
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	79bb      	ldrb	r3, [r7, #6]
 8001d1e:	f062 020b 	orn	r2, r2, #11
 8001d22:	b2d1      	uxtb	r1, r2
 8001d24:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <map_Init+0xd8>)
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	4413      	add	r3, r2
 8001d2a:	330f      	adds	r3, #15
 8001d2c:	460a      	mov	r2, r1
 8001d2e:	701a      	strb	r2, [r3, #0]
    for (y = 0; y < 16; y++) { // 各Y座標で実行
 8001d30:	79bb      	ldrb	r3, [r7, #6]
 8001d32:	3301      	adds	r3, #1
 8001d34:	71bb      	strb	r3, [r7, #6]
 8001d36:	79bb      	ldrb	r3, [r7, #6]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d9db      	bls.n	8001cf4 <map_Init+0x40>
    }
    for (x = 0; x < 16; x++) { // 各X座標で実行
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	71fb      	strb	r3, [r7, #7]
 8001d40:	e019      	b.n	8001d76 <map_Init+0xc2>
        map[0][x] |= 0xf2;     // 最南に壁を配置
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <map_Init+0xd8>)
 8001d46:	5cd2      	ldrb	r2, [r2, r3]
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f062 020d 	orn	r2, r2, #13
 8001d4e:	b2d1      	uxtb	r1, r2
 8001d50:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <map_Init+0xd8>)
 8001d52:	54d1      	strb	r1, [r2, r3]
        map[15][x] |= 0xf8;    // 最北に壁を配置
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <map_Init+0xd8>)
 8001d58:	4413      	add	r3, r2
 8001d5a:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f062 0207 	orn	r2, r2, #7
 8001d64:	b2d1      	uxtb	r1, r2
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <map_Init+0xd8>)
 8001d68:	4413      	add	r3, r2
 8001d6a:	460a      	mov	r2, r1
 8001d6c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for (x = 0; x < 16; x++) { // 各X座標で実行
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	3301      	adds	r3, #1
 8001d74:	71fb      	strb	r3, [r7, #7]
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d9e2      	bls.n	8001d42 <map_Init+0x8e>
    }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	200000c4 	.word	0x200000c4

08001d90 <write_map>:
// write_map
// マップデータを書き込む
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void write_map() {
 8001d90:	b490      	push	{r4, r7}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0

    //====変数宣言====
    uint8_t m_temp; // 向きを補正した壁情報

    //====壁情報の補正格納====
    m_temp = (wall_info >> mouse.dir) &
 8001d96:	4b8f      	ldr	r3, [pc, #572]	; (8001fd4 <write_map+0x244>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b8e      	ldr	r3, [pc, #568]	; (8001fd8 <write_map+0x248>)
 8001d9e:	789b      	ldrb	r3, [r3, #2]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	fa42 f303 	asr.w	r3, r2, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	71fb      	strb	r3, [r7, #7]
             0x0f; // センサ壁情報をmouse.dirで向きを補正させて下位4bit分を残す
    m_temp |=
        (m_temp
         << 4); // 上位4bitに下位4bitをコピー。この作業でm_tempにNESW順で壁が格納
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	011b      	lsls	r3, r3, #4
    m_temp |=
 8001db2:	b25a      	sxtb	r2, r3
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	71fb      	strb	r3, [r7, #7]

    //====データの書き込み====
    map[mouse.y][mouse.x] = m_temp; // 現在地に壁情報書き込み
 8001dbe:	4b86      	ldr	r3, [pc, #536]	; (8001fd8 <write_map+0x248>)
 8001dc0:	785b      	ldrb	r3, [r3, #1]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	4b84      	ldr	r3, [pc, #528]	; (8001fd8 <write_map+0x248>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4a83      	ldr	r2, [pc, #524]	; (8001fdc <write_map+0x24c>)
 8001dd0:	0103      	lsls	r3, r0, #4
 8001dd2:	4413      	add	r3, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	79fa      	ldrb	r2, [r7, #7]
 8001dd8:	701a      	strb	r2, [r3, #0]
    //----周辺に書き込む----
    // 北側について
    if (mouse.y != 15) {     // 現在最北端でないとき
 8001dda:	4b7f      	ldr	r3, [pc, #508]	; (8001fd8 <write_map+0x248>)
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d039      	beq.n	8001e58 <write_map+0xc8>
        if (m_temp & 0x88) { // 北壁がある場合
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	f003 0388 	and.w	r3, r3, #136	; 0x88
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01a      	beq.n	8001e24 <write_map+0x94>
            map[mouse.y + 1][mouse.x] |=
 8001dee:	4b7a      	ldr	r3, [pc, #488]	; (8001fd8 <write_map+0x248>)
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	b2d8      	uxtb	r0, r3
 8001df4:	4603      	mov	r3, r0
 8001df6:	3301      	adds	r3, #1
 8001df8:	4a77      	ldr	r2, [pc, #476]	; (8001fd8 <write_map+0x248>)
 8001dfa:	7812      	ldrb	r2, [r2, #0]
 8001dfc:	b2d1      	uxtb	r1, r2
 8001dfe:	460c      	mov	r4, r1
 8001e00:	4a76      	ldr	r2, [pc, #472]	; (8001fdc <write_map+0x24c>)
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	4413      	add	r3, r2
 8001e06:	4423      	add	r3, r4
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	4608      	mov	r0, r1
 8001e10:	f042 0222 	orr.w	r2, r2, #34	; 0x22
 8001e14:	b2d1      	uxtb	r1, r2
 8001e16:	4a71      	ldr	r2, [pc, #452]	; (8001fdc <write_map+0x24c>)
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4403      	add	r3, r0
 8001e1e:	460a      	mov	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e019      	b.n	8001e58 <write_map+0xc8>
                0x22; // 北側の区画から見て南壁ありを書き込む
        } else {      // 北壁がない場合
            map[mouse.y + 1][mouse.x] &=
 8001e24:	4b6c      	ldr	r3, [pc, #432]	; (8001fd8 <write_map+0x248>)
 8001e26:	785b      	ldrb	r3, [r3, #1]
 8001e28:	b2d8      	uxtb	r0, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a6a      	ldr	r2, [pc, #424]	; (8001fd8 <write_map+0x248>)
 8001e30:	7812      	ldrb	r2, [r2, #0]
 8001e32:	b2d1      	uxtb	r1, r2
 8001e34:	460c      	mov	r4, r1
 8001e36:	4a69      	ldr	r2, [pc, #420]	; (8001fdc <write_map+0x24c>)
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4423      	add	r3, r4
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4603      	mov	r3, r0
 8001e42:	3301      	adds	r3, #1
 8001e44:	4608      	mov	r0, r1
 8001e46:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001e4a:	b2d1      	uxtb	r1, r2
 8001e4c:	4a63      	ldr	r2, [pc, #396]	; (8001fdc <write_map+0x24c>)
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	4413      	add	r3, r2
 8001e52:	4403      	add	r3, r0
 8001e54:	460a      	mov	r2, r1
 8001e56:	701a      	strb	r2, [r3, #0]
                0xDD; // 北側の区画から見て南壁なしを書き込む
        }
    }
    // 東側について
    if (mouse.x != 15) {     // 現在最東端でないとき
 8001e58:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <write_map+0x248>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b0f      	cmp	r3, #15
 8001e60:	d037      	beq.n	8001ed2 <write_map+0x142>
        if (m_temp & 0x44) { // 東壁がある場合
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d019      	beq.n	8001ea0 <write_map+0x110>
            map[mouse.y][mouse.x + 1] |=
 8001e6c:	4b5a      	ldr	r3, [pc, #360]	; (8001fd8 <write_map+0x248>)
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	b2dc      	uxtb	r4, r3
 8001e72:	4622      	mov	r2, r4
 8001e74:	4b58      	ldr	r3, [pc, #352]	; (8001fd8 <write_map+0x248>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	b2d8      	uxtb	r0, r3
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	4957      	ldr	r1, [pc, #348]	; (8001fdc <write_map+0x24c>)
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	440a      	add	r2, r1
 8001e84:	4413      	add	r3, r2
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	4603      	mov	r3, r0
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f042 0211 	orr.w	r2, r2, #17
 8001e90:	b2d0      	uxtb	r0, r2
 8001e92:	4952      	ldr	r1, [pc, #328]	; (8001fdc <write_map+0x24c>)
 8001e94:	0122      	lsls	r2, r4, #4
 8001e96:	440a      	add	r2, r1
 8001e98:	4413      	add	r3, r2
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e018      	b.n	8001ed2 <write_map+0x142>
                0x11; // 東側の区画から見て西壁ありを書き込む
        } else {      // 北壁がない場合
            map[mouse.y][mouse.x + 1] &=
 8001ea0:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <write_map+0x248>)
 8001ea2:	785b      	ldrb	r3, [r3, #1]
 8001ea4:	b2dc      	uxtb	r4, r3
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <write_map+0x248>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	b2d8      	uxtb	r0, r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	494a      	ldr	r1, [pc, #296]	; (8001fdc <write_map+0x24c>)
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	440a      	add	r2, r1
 8001eb8:	4413      	add	r3, r2
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f022 0211 	bic.w	r2, r2, #17
 8001ec4:	b2d0      	uxtb	r0, r2
 8001ec6:	4945      	ldr	r1, [pc, #276]	; (8001fdc <write_map+0x24c>)
 8001ec8:	0122      	lsls	r2, r4, #4
 8001eca:	440a      	add	r2, r1
 8001ecc:	4413      	add	r3, r2
 8001ece:	4602      	mov	r2, r0
 8001ed0:	701a      	strb	r2, [r3, #0]
                0xEE; // 東側の区画から見て西壁なしを書き込む
        }
    }
    // 南壁について
    if (mouse.y != 0) {      // 現在最南端でないとき
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <write_map+0x248>)
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d039      	beq.n	8001f50 <write_map+0x1c0>
        if (m_temp & 0x22) { // 南壁がある場合
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01a      	beq.n	8001f1c <write_map+0x18c>
            map[mouse.y - 1][mouse.x] |=
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <write_map+0x248>)
 8001ee8:	785b      	ldrb	r3, [r3, #1]
 8001eea:	b2d8      	uxtb	r0, r3
 8001eec:	4603      	mov	r3, r0
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	4a39      	ldr	r2, [pc, #228]	; (8001fd8 <write_map+0x248>)
 8001ef2:	7812      	ldrb	r2, [r2, #0]
 8001ef4:	b2d1      	uxtb	r1, r2
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	4a38      	ldr	r2, [pc, #224]	; (8001fdc <write_map+0x24c>)
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	4413      	add	r3, r2
 8001efe:	4423      	add	r3, r4
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	4603      	mov	r3, r0
 8001f04:	3b01      	subs	r3, #1
 8001f06:	4608      	mov	r0, r1
 8001f08:	f062 0277 	orn	r2, r2, #119	; 0x77
 8001f0c:	b2d1      	uxtb	r1, r2
 8001f0e:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <write_map+0x24c>)
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	4403      	add	r3, r0
 8001f16:	460a      	mov	r2, r1
 8001f18:	701a      	strb	r2, [r3, #0]
 8001f1a:	e019      	b.n	8001f50 <write_map+0x1c0>
                0x88; // 南側の区画から見て北壁ありを書き込む
        } else {      // 南壁がない場合
            map[mouse.y - 1][mouse.x] &=
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <write_map+0x248>)
 8001f1e:	785b      	ldrb	r3, [r3, #1]
 8001f20:	b2d8      	uxtb	r0, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	3b01      	subs	r3, #1
 8001f26:	4a2c      	ldr	r2, [pc, #176]	; (8001fd8 <write_map+0x248>)
 8001f28:	7812      	ldrb	r2, [r2, #0]
 8001f2a:	b2d1      	uxtb	r1, r2
 8001f2c:	460c      	mov	r4, r1
 8001f2e:	4a2b      	ldr	r2, [pc, #172]	; (8001fdc <write_map+0x24c>)
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	4413      	add	r3, r2
 8001f34:	4423      	add	r3, r4
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	4603      	mov	r3, r0
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	4608      	mov	r0, r1
 8001f3e:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8001f42:	b2d1      	uxtb	r1, r2
 8001f44:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <write_map+0x24c>)
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	4413      	add	r3, r2
 8001f4a:	4403      	add	r3, r0
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
                0x77; // 南側の区画から見て北壁なしを書き込む
        }
    }
    // 西側について
    if (mouse.x != 0) {      // 現在最西端でないとき
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <write_map+0x248>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d037      	beq.n	8001fca <write_map+0x23a>
        if (m_temp & 0x11) { // 西壁がある場合
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 0311 	and.w	r3, r3, #17
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d019      	beq.n	8001f98 <write_map+0x208>
            map[mouse.y][mouse.x - 1] |=
 8001f64:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <write_map+0x248>)
 8001f66:	785b      	ldrb	r3, [r3, #1]
 8001f68:	b2dc      	uxtb	r4, r3
 8001f6a:	4622      	mov	r2, r4
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <write_map+0x248>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2d8      	uxtb	r0, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	3b01      	subs	r3, #1
 8001f76:	4919      	ldr	r1, [pc, #100]	; (8001fdc <write_map+0x24c>)
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	440a      	add	r2, r1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	4603      	mov	r3, r0
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8001f88:	b2d0      	uxtb	r0, r2
 8001f8a:	4914      	ldr	r1, [pc, #80]	; (8001fdc <write_map+0x24c>)
 8001f8c:	0122      	lsls	r2, r4, #4
 8001f8e:	440a      	add	r2, r1
 8001f90:	4413      	add	r3, r2
 8001f92:	4602      	mov	r2, r0
 8001f94:	701a      	strb	r2, [r3, #0]
        } else {      // 西壁がない場合
            map[mouse.y][mouse.x - 1] &=
                0xBB; // 西側の区画から見て東側なしを書き込む
        }
    }
}
 8001f96:	e018      	b.n	8001fca <write_map+0x23a>
            map[mouse.y][mouse.x - 1] &=
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <write_map+0x248>)
 8001f9a:	785b      	ldrb	r3, [r3, #1]
 8001f9c:	b2dc      	uxtb	r4, r3
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <write_map+0x248>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b2d8      	uxtb	r0, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	490c      	ldr	r1, [pc, #48]	; (8001fdc <write_map+0x24c>)
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	440a      	add	r2, r1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	781a      	ldrb	r2, [r3, #0]
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f022 0244 	bic.w	r2, r2, #68	; 0x44
 8001fbc:	b2d0      	uxtb	r0, r2
 8001fbe:	4907      	ldr	r1, [pc, #28]	; (8001fdc <write_map+0x24c>)
 8001fc0:	0122      	lsls	r2, r4, #4
 8001fc2:	440a      	add	r2, r1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	701a      	strb	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc90      	pop	{r4, r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	200002c4 	.word	0x200002c4
 8001fd8:	200000c0 	.word	0x200000c0
 8001fdc:	200000c4 	.word	0x200000c4

08001fe0 <turn_dir>:
// turn_dir
// マウスの方向を変更する
// 引数1：t_pat …… 回転方向(drive.hでマクロ定義)
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void turn_dir(uint8_t t_pat) {
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]

    //====方向を変更====
    mouse.dir = (mouse.dir + t_pat) & 0x03; // 指定された分mouse.dirを回転させる
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <turn_dir+0x2c>)
 8001fec:	789b      	ldrb	r3, [r3, #2]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <turn_dir+0x2c>)
 8001ffe:	709a      	strb	r2, [r3, #2]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	200000c0 	.word	0x200000c0

08002010 <make_smap>:
// make_smap
// 歩数マップを作成する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_smap(void) {
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0

    //====変数宣言====
    uint8_t x, y; // for文用変数

    //====歩数マップのクリア====
    for (y = 0; y <= 15; y++) {     // 各Y座標で実行
 8002016:	2300      	movs	r3, #0
 8002018:	71bb      	strb	r3, [r7, #6]
 800201a:	e013      	b.n	8002044 <make_smap+0x34>
        for (x = 0; x <= 15; x++) { // 各X座標で実行
 800201c:	2300      	movs	r3, #0
 800201e:	71fb      	strb	r3, [r7, #7]
 8002020:	e00a      	b.n	8002038 <make_smap+0x28>
            smap[y][x] = 0xff;      // 未記入部分は歩数最大とする
 8002022:	79ba      	ldrb	r2, [r7, #6]
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	4971      	ldr	r1, [pc, #452]	; (80021ec <make_smap+0x1dc>)
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	440a      	add	r2, r1
 800202c:	4413      	add	r3, r2
 800202e:	22ff      	movs	r2, #255	; 0xff
 8002030:	701a      	strb	r2, [r3, #0]
        for (x = 0; x <= 15; x++) { // 各X座標で実行
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	3301      	adds	r3, #1
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	2b0f      	cmp	r3, #15
 800203c:	d9f1      	bls.n	8002022 <make_smap+0x12>
    for (y = 0; y <= 15; y++) {     // 各Y座標で実行
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	3301      	adds	r3, #1
 8002042:	71bb      	strb	r3, [r7, #6]
 8002044:	79bb      	ldrb	r3, [r7, #6]
 8002046:	2b0f      	cmp	r3, #15
 8002048:	d9e8      	bls.n	800201c <make_smap+0xc>
        }
    }

    //====ゴール座標を0にする====
    uint8_t m_step = 0; // 歩数カウンタを0にする
 800204a:	2300      	movs	r3, #0
 800204c:	717b      	strb	r3, [r7, #5]
    smap[goal_y][goal_x] = 0;
 800204e:	4b68      	ldr	r3, [pc, #416]	; (80021f0 <make_smap+0x1e0>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	4b67      	ldr	r3, [pc, #412]	; (80021f4 <make_smap+0x1e4>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	4619      	mov	r1, r3
 800205a:	4a64      	ldr	r2, [pc, #400]	; (80021ec <make_smap+0x1dc>)
 800205c:	0103      	lsls	r3, r0, #4
 800205e:	4413      	add	r3, r2
 8002060:	440b      	add	r3, r1
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]

    //====自分の座標にたどり着くまでループ====
    do {
        //----マップ全域を捜索----
        for (y = 0; y <= 15; y++) {     // 各Y座標で実行
 8002066:	2300      	movs	r3, #0
 8002068:	71bb      	strb	r3, [r7, #6]
 800206a:	e0a1      	b.n	80021b0 <make_smap+0x1a0>
            for (x = 0; x <= 15; x++) { // 各X座標で実行
 800206c:	2300      	movs	r3, #0
 800206e:	71fb      	strb	r3, [r7, #7]
 8002070:	e097      	b.n	80021a2 <make_smap+0x192>
                //----現在最大の歩数を発見したとき----
                if (smap[y][x] ==
 8002072:	79ba      	ldrb	r2, [r7, #6]
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	495d      	ldr	r1, [pc, #372]	; (80021ec <make_smap+0x1dc>)
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	440a      	add	r2, r1
 800207c:	4413      	add	r3, r2
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	797a      	ldrb	r2, [r7, #5]
 8002082:	429a      	cmp	r2, r3
 8002084:	f040 808a 	bne.w	800219c <make_smap+0x18c>
                    m_step) { // 歩数カウンタm_stepの値が現在最大の歩数
                    uint8_t m_temp =
                        map[y][x]; // map配列からマップデータを取り出す
 8002088:	79ba      	ldrb	r2, [r7, #6]
 800208a:	79fb      	ldrb	r3, [r7, #7]
                    uint8_t m_temp =
 800208c:	495a      	ldr	r1, [pc, #360]	; (80021f8 <make_smap+0x1e8>)
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	440a      	add	r2, r1
 8002092:	4413      	add	r3, r2
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	713b      	strb	r3, [r7, #4]
                    if (MF.FLAG
                            .SCND) { // 二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 8002098:	4b58      	ldr	r3, [pc, #352]	; (80021fc <make_smap+0x1ec>)
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020a0:	b2db      	uxtb	r3, r3
                    if (MF.FLAG
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <make_smap+0x9c>
                        m_temp >>=
 80020a6:	793b      	ldrb	r3, [r7, #4]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	713b      	strb	r3, [r7, #4]
                            4; // 上位4bitを使うので4bit分右にシフトさせる
                    }
                    //----北壁についての処理----
                    if (!(m_temp & 0x08) &&
 80020ac:	793b      	ldrb	r3, [r7, #4]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d118      	bne.n	80020e8 <make_smap+0xd8>
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d015      	beq.n	80020e8 <make_smap+0xd8>
                        y != 15) { // 北壁がなく現在最北端でないとき
                        if (smap[y + 1][x] == 0xff) { // 北側が未記入なら
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	494a      	ldr	r1, [pc, #296]	; (80021ec <make_smap+0x1dc>)
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	440a      	add	r2, r1
 80020c8:	4413      	add	r3, r2
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2bff      	cmp	r3, #255	; 0xff
 80020ce:	d10b      	bne.n	80020e8 <make_smap+0xd8>
                            smap[y + 1][x] = m_step + 1; // 次の歩数を書き込む
 80020d0:	79bb      	ldrb	r3, [r7, #6]
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	7979      	ldrb	r1, [r7, #5]
 80020d8:	3101      	adds	r1, #1
 80020da:	b2c8      	uxtb	r0, r1
 80020dc:	4943      	ldr	r1, [pc, #268]	; (80021ec <make_smap+0x1dc>)
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	440a      	add	r2, r1
 80020e2:	4413      	add	r3, r2
 80020e4:	4602      	mov	r2, r0
 80020e6:	701a      	strb	r2, [r3, #0]
                        }
                    }
                    //----東壁についての処理----
                    if (!(m_temp & 0x04) &&
 80020e8:	793b      	ldrb	r3, [r7, #4]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d118      	bne.n	8002124 <make_smap+0x114>
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b0f      	cmp	r3, #15
 80020f6:	d015      	beq.n	8002124 <make_smap+0x114>
                        x != 15) { // 東壁がなく現在最東端でないとき
                        if (smap[y][x + 1] == 0xff) { // 東側が未記入なら
 80020f8:	79ba      	ldrb	r2, [r7, #6]
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	3301      	adds	r3, #1
 80020fe:	493b      	ldr	r1, [pc, #236]	; (80021ec <make_smap+0x1dc>)
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	440a      	add	r2, r1
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2bff      	cmp	r3, #255	; 0xff
 800210a:	d10b      	bne.n	8002124 <make_smap+0x114>
                            smap[y][x + 1] = m_step + 1; // 次の歩数を書き込む
 800210c:	79ba      	ldrb	r2, [r7, #6]
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	3301      	adds	r3, #1
 8002112:	7979      	ldrb	r1, [r7, #5]
 8002114:	3101      	adds	r1, #1
 8002116:	b2c8      	uxtb	r0, r1
 8002118:	4934      	ldr	r1, [pc, #208]	; (80021ec <make_smap+0x1dc>)
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	440a      	add	r2, r1
 800211e:	4413      	add	r3, r2
 8002120:	4602      	mov	r2, r0
 8002122:	701a      	strb	r2, [r3, #0]
                        }
                    }
                    //----南壁についての処理----
                    if (!(m_temp & 0x02) &&
 8002124:	793b      	ldrb	r3, [r7, #4]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <make_smap+0x150>
 800212e:	79bb      	ldrb	r3, [r7, #6]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d015      	beq.n	8002160 <make_smap+0x150>
                        y != 0) { // 南壁がなく現在最南端でないとき
                        if (smap[y - 1][x] == 0xff) { // 南側が未記入なら
 8002134:	79bb      	ldrb	r3, [r7, #6]
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	492c      	ldr	r1, [pc, #176]	; (80021ec <make_smap+0x1dc>)
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	440a      	add	r2, r1
 8002140:	4413      	add	r3, r2
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2bff      	cmp	r3, #255	; 0xff
 8002146:	d10b      	bne.n	8002160 <make_smap+0x150>
                            smap[y - 1][x] = m_step + 1; // 次の歩数を書き込む
 8002148:	79bb      	ldrb	r3, [r7, #6]
 800214a:	1e5a      	subs	r2, r3, #1
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	7979      	ldrb	r1, [r7, #5]
 8002150:	3101      	adds	r1, #1
 8002152:	b2c8      	uxtb	r0, r1
 8002154:	4925      	ldr	r1, [pc, #148]	; (80021ec <make_smap+0x1dc>)
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	440a      	add	r2, r1
 800215a:	4413      	add	r3, r2
 800215c:	4602      	mov	r2, r0
 800215e:	701a      	strb	r2, [r3, #0]
                        }
                    }
                    //----西壁についての処理----
                    if (!(m_temp & 0x01) &&
 8002160:	793b      	ldrb	r3, [r7, #4]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d118      	bne.n	800219c <make_smap+0x18c>
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d015      	beq.n	800219c <make_smap+0x18c>
                        x != 0) { // 西壁がなく現在最西端でないとき
                        if (smap[y][x - 1] == 0xff) { // 西側が未記入なら
 8002170:	79ba      	ldrb	r2, [r7, #6]
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	3b01      	subs	r3, #1
 8002176:	491d      	ldr	r1, [pc, #116]	; (80021ec <make_smap+0x1dc>)
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	440a      	add	r2, r1
 800217c:	4413      	add	r3, r2
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2bff      	cmp	r3, #255	; 0xff
 8002182:	d10b      	bne.n	800219c <make_smap+0x18c>
                            smap[y][x - 1] = m_step + 1; // 次の歩数を書き込む
 8002184:	79ba      	ldrb	r2, [r7, #6]
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	3b01      	subs	r3, #1
 800218a:	7979      	ldrb	r1, [r7, #5]
 800218c:	3101      	adds	r1, #1
 800218e:	b2c8      	uxtb	r0, r1
 8002190:	4916      	ldr	r1, [pc, #88]	; (80021ec <make_smap+0x1dc>)
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	440a      	add	r2, r1
 8002196:	4413      	add	r3, r2
 8002198:	4602      	mov	r2, r0
 800219a:	701a      	strb	r2, [r3, #0]
            for (x = 0; x <= 15; x++) { // 各X座標で実行
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	3301      	adds	r3, #1
 80021a0:	71fb      	strb	r3, [r7, #7]
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	f67f af64 	bls.w	8002072 <make_smap+0x62>
        for (y = 0; y <= 15; y++) {     // 各Y座標で実行
 80021aa:	79bb      	ldrb	r3, [r7, #6]
 80021ac:	3301      	adds	r3, #1
 80021ae:	71bb      	strb	r3, [r7, #6]
 80021b0:	79bb      	ldrb	r3, [r7, #6]
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	f67f af5a 	bls.w	800206c <make_smap+0x5c>
                    }
                }
            }
        }
        //====歩数カウンタのインクリメント====
        m_step++;
 80021b8:	797b      	ldrb	r3, [r7, #5]
 80021ba:	3301      	adds	r3, #1
 80021bc:	717b      	strb	r3, [r7, #5]
    } while (smap[mouse.y][mouse.x] ==
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <make_smap+0x1f0>)
 80021c0:	785b      	ldrb	r3, [r3, #1]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	4618      	mov	r0, r3
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <make_smap+0x1f0>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	4619      	mov	r1, r3
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <make_smap+0x1dc>)
 80021d0:	0103      	lsls	r3, r0, #4
 80021d2:	4413      	add	r3, r2
 80021d4:	440b      	add	r3, r1
 80021d6:	781b      	ldrb	r3, [r3, #0]
             0xff); // 現在座標が未記入ではなくなるまで実行
 80021d8:	2bff      	cmp	r3, #255	; 0xff
 80021da:	f43f af44 	beq.w	8002066 <make_smap+0x56>
}
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	200001c4 	.word	0x200001c4
 80021f0:	200002c6 	.word	0x200002c6
 80021f4:	200002c5 	.word	0x200002c5
 80021f8:	200000c4 	.word	0x200000c4
 80021fc:	2000008c 	.word	0x2000008c
 8002200:	200000c0 	.word	0x200000c0

08002204 <make_route>:
// make_route
// 最短経路を導出する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void make_route() {
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0

    //====変数宣言====
    uint8_t x, y; // X，Y座標
    uint8_t dir_temp =
 800220a:	4b90      	ldr	r3, [pc, #576]	; (800244c <make_route+0x248>)
 800220c:	789b      	ldrb	r3, [r3, #2]
 800220e:	707b      	strb	r3, [r7, #1]
        mouse.dir; // マウスの方角を表すmouse.dirの値をdir_temp変数に退避させる

    //====最短経路を初期化====
    uint16_t i;
    for (i = 0; i < 256; i++) {
 8002210:	2300      	movs	r3, #0
 8002212:	80bb      	strh	r3, [r7, #4]
 8002214:	e006      	b.n	8002224 <make_route+0x20>
        route[i] = 0xff; // routeを0xffで初期化
 8002216:	88bb      	ldrh	r3, [r7, #4]
 8002218:	4a8d      	ldr	r2, [pc, #564]	; (8002450 <make_route+0x24c>)
 800221a:	21ff      	movs	r1, #255	; 0xff
 800221c:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 256; i++) {
 800221e:	88bb      	ldrh	r3, [r7, #4]
 8002220:	3301      	adds	r3, #1
 8002222:	80bb      	strh	r3, [r7, #4]
 8002224:	88bb      	ldrh	r3, [r7, #4]
 8002226:	2bff      	cmp	r3, #255	; 0xff
 8002228:	d9f5      	bls.n	8002216 <make_route+0x12>
    }

    //====歩数カウンタをセット====
    uint8_t m_step = smap[mouse.y][mouse.x]; // 現在座標の歩数マップ値を取得
 800222a:	4b88      	ldr	r3, [pc, #544]	; (800244c <make_route+0x248>)
 800222c:	785b      	ldrb	r3, [r3, #1]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4618      	mov	r0, r3
 8002232:	4b86      	ldr	r3, [pc, #536]	; (800244c <make_route+0x248>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	4619      	mov	r1, r3
 800223a:	4a86      	ldr	r2, [pc, #536]	; (8002454 <make_route+0x250>)
 800223c:	0103      	lsls	r3, r0, #4
 800223e:	4413      	add	r3, r2
 8002240:	440b      	add	r3, r1
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	70fb      	strb	r3, [r7, #3]

    //====x, yに現在座標を書き込み====
    x = mouse.x;
 8002246:	4b81      	ldr	r3, [pc, #516]	; (800244c <make_route+0x248>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
    y = mouse.y;
 800224c:	4b7f      	ldr	r3, [pc, #508]	; (800244c <make_route+0x248>)
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	71bb      	strb	r3, [r7, #6]

    //====最短経路を導出====
    i = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	80bb      	strh	r3, [r7, #4]
    do {
        uint8_t m_temp = map[y][x]; // 比較用マップ情報の格納
 8002256:	79ba      	ldrb	r2, [r7, #6]
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	497f      	ldr	r1, [pc, #508]	; (8002458 <make_route+0x254>)
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	440a      	add	r2, r1
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	70bb      	strb	r3, [r7, #2]
        if (MF.FLAG
                .SCND) { // 二次走行用のマップを作成する場合（二次走行時はMF.FLAG.SCNDが立っている）
 8002266:	4b7d      	ldr	r3, [pc, #500]	; (800245c <make_route+0x258>)
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800226e:	b2db      	uxtb	r3, r3
        if (MF.FLAG
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <make_route+0x76>
            m_temp >>= 4; // 上位4bitを使うので4bit分右にシフトさせる
 8002274:	78bb      	ldrb	r3, [r7, #2]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	70bb      	strb	r3, [r7, #2]
        }

        //----北を見る----
        if (!(m_temp & 0x08) &&
 800227a:	78bb      	ldrb	r3, [r7, #2]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d122      	bne.n	80022ca <make_route+0xc6>
            (smap[y + 1][x] <
 8002284:	79bb      	ldrb	r3, [r7, #6]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	4972      	ldr	r1, [pc, #456]	; (8002454 <make_route+0x250>)
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	440a      	add	r2, r1
 8002290:	4413      	add	r3, r2
 8002292:	781b      	ldrb	r3, [r3, #0]
        if (!(m_temp & 0x08) &&
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	429a      	cmp	r2, r3
 8002298:	d917      	bls.n	80022ca <make_route+0xc6>
             m_step)) { // 北側に壁が無く、現在地より小さい歩数マップ値であれば
            route[i] = (0x00 - mouse.dir) & 0x03; // route配列に進行方向を記録
 800229a:	4b6c      	ldr	r3, [pc, #432]	; (800244c <make_route+0x248>)
 800229c:	789b      	ldrb	r3, [r3, #2]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	425b      	negs	r3, r3
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	b2d1      	uxtb	r1, r2
 80022ac:	4a68      	ldr	r2, [pc, #416]	; (8002450 <make_route+0x24c>)
 80022ae:	54d1      	strb	r1, [r2, r3]
            m_step = smap[y + 1][x]; // 最大歩数マップ値を更新
 80022b0:	79bb      	ldrb	r3, [r7, #6]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	4967      	ldr	r1, [pc, #412]	; (8002454 <make_route+0x250>)
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	440a      	add	r2, r1
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	70fb      	strb	r3, [r7, #3]
            y++; // 北に進んだのでY座標をインクリメント
 80022c2:	79bb      	ldrb	r3, [r7, #6]
 80022c4:	3301      	adds	r3, #1
 80022c6:	71bb      	strb	r3, [r7, #6]
 80022c8:	e079      	b.n	80023be <make_route+0x1ba>
        }
        //----東を見る----
        else if (
            !(m_temp & 0x04) &&
 80022ca:	78bb      	ldrb	r3, [r7, #2]
 80022cc:	f003 0304 	and.w	r3, r3, #4
        else if (
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d123      	bne.n	800231c <make_route+0x118>
            (smap[y][x + 1] <
 80022d4:	79ba      	ldrb	r2, [r7, #6]
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	3301      	adds	r3, #1
 80022da:	495e      	ldr	r1, [pc, #376]	; (8002454 <make_route+0x250>)
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	440a      	add	r2, r1
 80022e0:	4413      	add	r3, r2
 80022e2:	781b      	ldrb	r3, [r3, #0]
            !(m_temp & 0x04) &&
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d918      	bls.n	800231c <make_route+0x118>
             m_step)) { // 東側に壁が無く、現在地より小さい歩数マップ値であれば
            route[i] = (0x01 - mouse.dir) & 0x03; // route配列に進行方向を記録
 80022ea:	4b58      	ldr	r3, [pc, #352]	; (800244c <make_route+0x248>)
 80022ec:	789b      	ldrb	r3, [r3, #2]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f1c3 0301 	rsb	r3, r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	88bb      	ldrh	r3, [r7, #4]
 80022f8:	f002 0203 	and.w	r2, r2, #3
 80022fc:	b2d1      	uxtb	r1, r2
 80022fe:	4a54      	ldr	r2, [pc, #336]	; (8002450 <make_route+0x24c>)
 8002300:	54d1      	strb	r1, [r2, r3]
            m_step = smap[y][x + 1]; // 最大歩数マップ値を更新
 8002302:	79ba      	ldrb	r2, [r7, #6]
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	3301      	adds	r3, #1
 8002308:	4952      	ldr	r1, [pc, #328]	; (8002454 <make_route+0x250>)
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	440a      	add	r2, r1
 800230e:	4413      	add	r3, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	70fb      	strb	r3, [r7, #3]
            x++; // 東に進んだのでX座標をインクリメント
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	3301      	adds	r3, #1
 8002318:	71fb      	strb	r3, [r7, #7]
 800231a:	e050      	b.n	80023be <make_route+0x1ba>
        }
        //----南を見る----
        else if (
            !(m_temp & 0x02) &&
 800231c:	78bb      	ldrb	r3, [r7, #2]
 800231e:	f003 0302 	and.w	r3, r3, #2
        else if (
 8002322:	2b00      	cmp	r3, #0
 8002324:	d123      	bne.n	800236e <make_route+0x16a>
            (smap[y - 1][x] <
 8002326:	79bb      	ldrb	r3, [r7, #6]
 8002328:	1e5a      	subs	r2, r3, #1
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	4949      	ldr	r1, [pc, #292]	; (8002454 <make_route+0x250>)
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	440a      	add	r2, r1
 8002332:	4413      	add	r3, r2
 8002334:	781b      	ldrb	r3, [r3, #0]
            !(m_temp & 0x02) &&
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	429a      	cmp	r2, r3
 800233a:	d918      	bls.n	800236e <make_route+0x16a>
             m_step)) { // 南側に壁が無く、現在地より小さい歩数マップ値であれば
            route[i] = (0x02 - mouse.dir) & 0x03; // route配列に進行方向を記録
 800233c:	4b43      	ldr	r3, [pc, #268]	; (800244c <make_route+0x248>)
 800233e:	789b      	ldrb	r3, [r3, #2]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f1c3 0302 	rsb	r3, r3, #2
 8002346:	b2da      	uxtb	r2, r3
 8002348:	88bb      	ldrh	r3, [r7, #4]
 800234a:	f002 0203 	and.w	r2, r2, #3
 800234e:	b2d1      	uxtb	r1, r2
 8002350:	4a3f      	ldr	r2, [pc, #252]	; (8002450 <make_route+0x24c>)
 8002352:	54d1      	strb	r1, [r2, r3]
            m_step = smap[y - 1][x]; // 最大歩数マップ値を更新
 8002354:	79bb      	ldrb	r3, [r7, #6]
 8002356:	1e5a      	subs	r2, r3, #1
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	493e      	ldr	r1, [pc, #248]	; (8002454 <make_route+0x250>)
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	440a      	add	r2, r1
 8002360:	4413      	add	r3, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	70fb      	strb	r3, [r7, #3]
            y--; // 南に進んだのでY座標をデクリメント
 8002366:	79bb      	ldrb	r3, [r7, #6]
 8002368:	3b01      	subs	r3, #1
 800236a:	71bb      	strb	r3, [r7, #6]
 800236c:	e027      	b.n	80023be <make_route+0x1ba>
        }
        //----西を見る----
        else if (
            !(m_temp & 0x01) &&
 800236e:	78bb      	ldrb	r3, [r7, #2]
 8002370:	f003 0301 	and.w	r3, r3, #1
        else if (
 8002374:	2b00      	cmp	r3, #0
 8002376:	d122      	bne.n	80023be <make_route+0x1ba>
            (smap[y][x - 1] <
 8002378:	79ba      	ldrb	r2, [r7, #6]
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	3b01      	subs	r3, #1
 800237e:	4935      	ldr	r1, [pc, #212]	; (8002454 <make_route+0x250>)
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	440a      	add	r2, r1
 8002384:	4413      	add	r3, r2
 8002386:	781b      	ldrb	r3, [r3, #0]
            !(m_temp & 0x01) &&
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	429a      	cmp	r2, r3
 800238c:	d917      	bls.n	80023be <make_route+0x1ba>
             m_step)) { // 西側に壁が無く、現在地より小さい歩数マップ値であれば
            route[i] = (0x03 - mouse.dir) & 0x03; // route配列に進行方向を記録
 800238e:	4b2f      	ldr	r3, [pc, #188]	; (800244c <make_route+0x248>)
 8002390:	789b      	ldrb	r3, [r3, #2]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f1c3 0303 	rsb	r3, r3, #3
 8002398:	b2da      	uxtb	r2, r3
 800239a:	88bb      	ldrh	r3, [r7, #4]
 800239c:	f002 0203 	and.w	r2, r2, #3
 80023a0:	b2d1      	uxtb	r1, r2
 80023a2:	4a2b      	ldr	r2, [pc, #172]	; (8002450 <make_route+0x24c>)
 80023a4:	54d1      	strb	r1, [r2, r3]
            m_step = smap[y][x - 1]; // 最大歩数マップ値を更新
 80023a6:	79ba      	ldrb	r2, [r7, #6]
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	4929      	ldr	r1, [pc, #164]	; (8002454 <make_route+0x250>)
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	440a      	add	r2, r1
 80023b2:	4413      	add	r3, r2
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	70fb      	strb	r3, [r7, #3]
            x--; // 西に進んだのでX座標をデクリメント
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	71fb      	strb	r3, [r7, #7]
        }

        //----格納データ形式変更----
        switch (route[i]) {  // route配列に格納した要素値で分岐
 80023be:	88bb      	ldrh	r3, [r7, #4]
 80023c0:	4a23      	ldr	r2, [pc, #140]	; (8002450 <make_route+0x24c>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d828      	bhi.n	800241a <make_route+0x216>
 80023c8:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <make_route+0x1cc>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	080023e1 	.word	0x080023e1
 80023d4:	080023eb 	.word	0x080023eb
 80023d8:	080023fb 	.word	0x080023fb
 80023dc:	0800240b 	.word	0x0800240b
        case 0x00:           // 前進する場合
            route[i] = 0x88; // 格納データ形式を変更
 80023e0:	88bb      	ldrh	r3, [r7, #4]
 80023e2:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <make_route+0x24c>)
 80023e4:	2188      	movs	r1, #136	; 0x88
 80023e6:	54d1      	strb	r1, [r2, r3]
            break;
 80023e8:	e01c      	b.n	8002424 <make_route+0x220>
        case 0x01:                  // 右折する場合
            turn_dir(DIR_TURN_R90); // 内部情報の方向を90度右回転
 80023ea:	2001      	movs	r0, #1
 80023ec:	f7ff fdf8 	bl	8001fe0 <turn_dir>
            route[i] = 0x44;        // 格納データ形式を変更
 80023f0:	88bb      	ldrh	r3, [r7, #4]
 80023f2:	4a17      	ldr	r2, [pc, #92]	; (8002450 <make_route+0x24c>)
 80023f4:	2144      	movs	r1, #68	; 0x44
 80023f6:	54d1      	strb	r1, [r2, r3]
            break;
 80023f8:	e014      	b.n	8002424 <make_route+0x220>
        case 0x02:                  // Uターンする場合
            turn_dir(DIR_TURN_180); // 内部情報の方向を180度回転
 80023fa:	2002      	movs	r0, #2
 80023fc:	f7ff fdf0 	bl	8001fe0 <turn_dir>
            route[i] = 0x22;        // 格納データ形式を変更
 8002400:	88bb      	ldrh	r3, [r7, #4]
 8002402:	4a13      	ldr	r2, [pc, #76]	; (8002450 <make_route+0x24c>)
 8002404:	2122      	movs	r1, #34	; 0x22
 8002406:	54d1      	strb	r1, [r2, r3]
            break;
 8002408:	e00c      	b.n	8002424 <make_route+0x220>
        case 0x03:                  // 左折する場合
            turn_dir(DIR_TURN_L90); // 内部情報の方向を90度右回転
 800240a:	20ff      	movs	r0, #255	; 0xff
 800240c:	f7ff fde8 	bl	8001fe0 <turn_dir>
            route[i] = 0x11;        // 格納データ形式を変更
 8002410:	88bb      	ldrh	r3, [r7, #4]
 8002412:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <make_route+0x24c>)
 8002414:	2111      	movs	r1, #17
 8002416:	54d1      	strb	r1, [r2, r3]
            break;
 8002418:	e004      	b.n	8002424 <make_route+0x220>
        default:             // それ以外の場合
            route[i] = 0x00; // 格納データ形式を変更
 800241a:	88bb      	ldrh	r3, [r7, #4]
 800241c:	4a0c      	ldr	r2, [pc, #48]	; (8002450 <make_route+0x24c>)
 800241e:	2100      	movs	r1, #0
 8002420:	54d1      	strb	r1, [r2, r3]
            break;
 8002422:	bf00      	nop
        }
        i++; // カウンタをインクリメント
 8002424:	88bb      	ldrh	r3, [r7, #4]
 8002426:	3301      	adds	r3, #1
 8002428:	80bb      	strh	r3, [r7, #4]
    } while (smap[y][x] !=
 800242a:	79ba      	ldrb	r2, [r7, #6]
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	4909      	ldr	r1, [pc, #36]	; (8002454 <make_route+0x250>)
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	440a      	add	r2, r1
 8002434:	4413      	add	r3, r2
 8002436:	781b      	ldrb	r3, [r3, #0]
             0); // 進んだ先の歩数マップ値が0（=ゴール）になるまで実行
 8002438:	2b00      	cmp	r3, #0
 800243a:	f47f af0c 	bne.w	8002256 <make_route+0x52>
    mouse.dir = dir_temp; // dir_tempに退避させた値をmouse.dirにリストア
 800243e:	4a03      	ldr	r2, [pc, #12]	; (800244c <make_route+0x248>)
 8002440:	787b      	ldrb	r3, [r7, #1]
 8002442:	7093      	strb	r3, [r2, #2]
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	200000c0 	.word	0x200000c0
 8002450:	200002c8 	.word	0x200002c8
 8002454:	200001c4 	.word	0x200001c4
 8002458:	200000c4 	.word	0x200000c4
 800245c:	2000008c 	.word	0x2000008c

08002460 <store_map_in_eeprom>:
// store_map_in_eeprom
// mapデータをeepromに格納する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void store_map_in_eeprom(void) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
    eeprom_enable_write();
 8002466:	f7fe fb07 	bl	8000a78 <eeprom_enable_write>
    int i;
    for (i = 0; i < 16; i++) {
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	e01b      	b.n	80024a8 <store_map_in_eeprom+0x48>
        int j;
        for (j = 0; j < 16; j++) {
 8002470:	2300      	movs	r3, #0
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	e012      	b.n	800249c <store_map_in_eeprom+0x3c>
            eeprom_write_halfword(i * 16 + j, (uint16_t)map[i][j]);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	011a      	lsls	r2, r3, #4
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	4413      	add	r3, r2
 800247e:	4618      	mov	r0, r3
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <store_map_in_eeprom+0x5c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	441a      	add	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4413      	add	r3, r2
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	4619      	mov	r1, r3
 8002492:	f7fe fb1c 	bl	8000ace <eeprom_write_halfword>
        for (j = 0; j < 16; j++) {
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b0f      	cmp	r3, #15
 80024a0:	dde9      	ble.n	8002476 <store_map_in_eeprom+0x16>
    for (i = 0; i < 16; i++) {
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3301      	adds	r3, #1
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	dde0      	ble.n	8002470 <store_map_in_eeprom+0x10>
        }
    }
    eeprom_disable_write();
 80024ae:	f7fe fb07 	bl	8000ac0 <eeprom_disable_write>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200000c4 	.word	0x200000c4

080024c0 <load_map_from_eeprom>:
// load_map_in_eeprom
// mapデータをeepromから取得する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void load_map_from_eeprom(void) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 16; i++) {
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	e01c      	b.n	8002506 <load_map_from_eeprom+0x46>
        int j;
        for (j = 0; j < 16; j++) {
 80024cc:	2300      	movs	r3, #0
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	e013      	b.n	80024fa <load_map_from_eeprom+0x3a>
            map[i][j] = (uint8_t)eeprom_read_halfword(i * 16 + j);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	011a      	lsls	r2, r3, #4
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fb15 	bl	8000b0a <eeprom_read_halfword>
 80024e0:	4603      	mov	r3, r0
 80024e2:	b2d9      	uxtb	r1, r3
 80024e4:	4a0c      	ldr	r2, [pc, #48]	; (8002518 <load_map_from_eeprom+0x58>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	441a      	add	r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	460a      	mov	r2, r1
 80024f2:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < 16; j++) {
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	dde8      	ble.n	80024d2 <load_map_from_eeprom+0x12>
    for (i = 0; i < 16; i++) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3301      	adds	r3, #1
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	dddf      	ble.n	80024cc <load_map_from_eeprom+0xc>
        }
    }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200000c4 	.word	0x200000c4

0800251c <sensor_init>:
//sensor_init
// センサ系の変数の初期化，ADコンバータの設定とセンサ値取得に使用するタイマの設定をする
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void sensor_init(void){
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0

  //====センサ系の変数の初期化====
  tp = 0;
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <sensor_init+0x5c>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
  ad_l = ad_r = ad_fr = ad_fl = 0;
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <sensor_init+0x60>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <sensor_init+0x60>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <sensor_init+0x64>)
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <sensor_init+0x64>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a12      	ldr	r2, [pc, #72]	; (8002584 <sensor_init+0x68>)
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b11      	ldr	r3, [pc, #68]	; (8002584 <sensor_init+0x68>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a11      	ldr	r2, [pc, #68]	; (8002588 <sensor_init+0x6c>)
 8002542:	6013      	str	r3, [r2, #0]
  base_l = base_r = 0;
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <sensor_init+0x70>)
 8002546:	2200      	movs	r2, #0
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <sensor_init+0x70>)
 800254c:	881a      	ldrh	r2, [r3, #0]
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <sensor_init+0x74>)
 8002550:	801a      	strh	r2, [r3, #0]


  /*------------------------------------
    TIM6 Interrupt Initialization
  ------------------------------------*/
  __HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <sensor_init+0x78>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0201 	mvn.w	r2, #1
 800255a:	611a      	str	r2, [r3, #16]
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 800255c:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <sensor_init+0x78>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <sensor_init+0x78>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start(&htim6);
 800256c:	4809      	ldr	r0, [pc, #36]	; (8002594 <sensor_init+0x78>)
 800256e:	f003 fc6b 	bl	8005e48 <HAL_TIM_Base_Start>

}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000009e 	.word	0x2000009e
 800257c:	200000a8 	.word	0x200000a8
 8002580:	200000a4 	.word	0x200000a4
 8002584:	200000a0 	.word	0x200000a0
 8002588:	200000ac 	.word	0x200000ac
 800258c:	200000b6 	.word	0x200000b6
 8002590:	200000b4 	.word	0x200000b4
 8002594:	2000046c 	.word	0x2000046c

08002598 <get_adc_value>:
// 指定されたチャンネルのアナログ電圧値を取り出す
// 引数1：hadc …… 電圧値を取り出すチャンネルが属すADCのHandler
// 引数2：channel …… 電圧値を取り出すチャンネル
// 戻り値：電圧値（12bit分解能）
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_adc_value(ADC_HandleTypeDef *hadc, uint32_t channel){
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]

  ADC_ChannelConfTypeDef sConfig = {0};
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
 80025b0:	611a      	str	r2, [r3, #16]
 80025b2:	615a      	str	r2, [r3, #20]

  sConfig.Channel = channel;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025b8:	2301      	movs	r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80025c0:	2304      	movs	r3, #4
 80025c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	4619      	mov	r1, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 ff6a 	bl	80034ac <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);                    // AD変換を開始する
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fdd5 	bl	8003188 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 100);   // AD変換終了まで待機する
 80025de:	2164      	movs	r1, #100	; 0x64
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fe87 	bl	80032f4 <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(hadc);          // AD変換結果を取得する
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 ff52 	bl	8003490 <HAL_ADC_GetValue>
 80025ec:	4603      	mov	r3, r0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <get_sensor_value_r>:
//get_sensor_value_r
// Sensor R の値を読み取る
// 引数：無し
// 戻り値：電圧値（12bit分解能）
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_sensor_value_r(void){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  return get_adc_value(&hadc2, ADC_CHANNEL_1);
 80025fc:	2101      	movs	r1, #1
 80025fe:	4803      	ldr	r0, [pc, #12]	; (800260c <get_sensor_value_r+0x14>)
 8002600:	f7ff ffca 	bl	8002598 <get_adc_value>
 8002604:	4603      	mov	r3, r0
}
 8002606:	4618      	mov	r0, r3
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000041c 	.word	0x2000041c

08002610 <get_sensor_value_fr>:
//get_sensor_value_fr
// Sensor FR の値を読み取る
// 引数：無し
// 戻り値：電圧値（12bit分解能）
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_sensor_value_fr(void){
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  return get_adc_value(&hadc1, ADC_CHANNEL_2);
 8002614:	2102      	movs	r1, #2
 8002616:	4803      	ldr	r0, [pc, #12]	; (8002624 <get_sensor_value_fr+0x14>)
 8002618:	f7ff ffbe 	bl	8002598 <get_adc_value>
 800261c:	4603      	mov	r3, r0
}
 800261e:	4618      	mov	r0, r3
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200003cc 	.word	0x200003cc

08002628 <get_sensor_value_fl>:
//get_sensor_value_fl
// Sensor FL の値を読み取る
// 引数：無し
// 戻り値：電圧値（12bit分解能）
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_sensor_value_fl(void){
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  return get_adc_value(&hadc2, ADC_CHANNEL_4);
 800262c:	2104      	movs	r1, #4
 800262e:	4803      	ldr	r0, [pc, #12]	; (800263c <get_sensor_value_fl+0x14>)
 8002630:	f7ff ffb2 	bl	8002598 <get_adc_value>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	2000041c 	.word	0x2000041c

08002640 <get_sensor_value_l>:
//get_sensor_value_l
// Sensor L の値を読み取る
// 引数：無し
// 戻り値：電圧値（12bit分解能）
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_sensor_value_l(void){
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  return get_adc_value(&hadc1, ADC_CHANNEL_1);
 8002644:	2101      	movs	r1, #1
 8002646:	4803      	ldr	r0, [pc, #12]	; (8002654 <get_sensor_value_l+0x14>)
 8002648:	f7ff ffa6 	bl	8002598 <get_adc_value>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200003cc 	.word	0x200003cc

08002658 <get_batt_vol>:
//get_batt_vol
// VOL_CHECK の値を読み取る
// 引数：無し
// 戻り値：電圧値（12bit分解能）
//+++++++++++++++++++++++++++++++++++++++++++++++
int get_batt_vol(void){
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  return get_adc_value(&hadc1, ADC_CHANNEL_12);
 800265c:	210c      	movs	r1, #12
 800265e:	4803      	ldr	r0, [pc, #12]	; (800266c <get_batt_vol+0x14>)
 8002660:	f7ff ff9a 	bl	8002598 <get_adc_value>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200003cc 	.word	0x200003cc

08002670 <get_base>:
//get_base
// 壁制御用の基準値を取得する
// 引数：なし
// 戻り値：理想的な値を取得できたか　1:できた　0:できなかった
//+++++++++++++++++++++++++++++++++++++++++++++++
uint8_t get_base(){
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
  uint8_t res = 1;                  //理想的な値を取得できたか
 8002676:	2301      	movs	r3, #1
 8002678:	71fb      	strb	r3, [r7, #7]

  //----制御用の基準を取得----
  base_l = ad_l;                    //現在の左側のセンサ値で決定
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <get_base+0x2c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	b29a      	uxth	r2, r3
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <get_base+0x30>)
 8002682:	801a      	strh	r2, [r3, #0]
  base_r = ad_r;                    //現在の右側のセンサ値で決定
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <get_base+0x34>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	b29a      	uxth	r2, r3
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <get_base+0x38>)
 800268c:	801a      	strh	r2, [r3, #0]

  return res;                     //理想的な値を取得できたかを返す
 800268e:	79fb      	ldrb	r3, [r7, #7]

}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	200000ac 	.word	0x200000ac
 80026a0:	200000b4 	.word	0x200000b4
 80026a4:	200000a0 	.word	0x200000a0
 80026a8:	200000b6 	.word	0x200000b6

080026ac <get_wall_info>:
//get_wall_info
// 壁情報を取得する
// 引数：なし
// 戻り値：なし
//+++++++++++++++++++++++++++++++++++++++++++++++
void get_wall_info(){
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  //----壁情報の初期化----
  wall_info = 0x00;                 //壁情報を初期化
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <get_wall_info+0x68>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
  //----前壁を見る----
  if(ad_fr > WALL_BASE_FR || ad_fl > WALL_BASE_FL){
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <get_wall_info+0x6c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80026be:	d804      	bhi.n	80026ca <get_wall_info+0x1e>
 80026c0:	4b16      	ldr	r3, [pc, #88]	; (800271c <get_wall_info+0x70>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80026c8:	d906      	bls.n	80026d8 <get_wall_info+0x2c>
    //AD値が閾値より大きい（=壁があって光が跳ね返ってきている）場合
    wall_info |= 0x88;                //壁情報を更新
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <get_wall_info+0x68>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	f063 0377 	orn	r3, r3, #119	; 0x77
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <get_wall_info+0x68>)
 80026d6:	701a      	strb	r2, [r3, #0]
  }
  //----右壁を見る----
  if(ad_r > WALL_BASE_R){
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <get_wall_info+0x74>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80026e0:	d906      	bls.n	80026f0 <get_wall_info+0x44>
    //AD値が閾値より大きい（=壁があって光が跳ね返ってきている）場合
    wall_info |= 0x44;                //壁情報を更新
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <get_wall_info+0x68>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <get_wall_info+0x68>)
 80026ee:	701a      	strb	r2, [r3, #0]
  }
  //----左壁を見る----
  if(ad_l > WALL_BASE_L){
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <get_wall_info+0x78>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80026f8:	d906      	bls.n	8002708 <get_wall_info+0x5c>
    //AD値が閾値より大きい（=壁があって光が跳ね返ってきている）場合
    wall_info |= 0x11;                //壁情報を更新
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <get_wall_info+0x68>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	f043 0311 	orr.w	r3, r3, #17
 8002702:	b2da      	uxtb	r2, r3
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <get_wall_info+0x68>)
 8002706:	701a      	strb	r2, [r3, #0]
  }

}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	200002c4 	.word	0x200002c4
 8002718:	200000a4 	.word	0x200000a4
 800271c:	200000a8 	.word	0x200000a8
 8002720:	200000a0 	.word	0x200000a0
 8002724:	200000ac 	.word	0x200000ac

08002728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <HAL_MspInit+0x44>)
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	4a0e      	ldr	r2, [pc, #56]	; (800276c <HAL_MspInit+0x44>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6193      	str	r3, [r2, #24]
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_MspInit+0x44>)
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_MspInit+0x44>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	4a08      	ldr	r2, [pc, #32]	; (800276c <HAL_MspInit+0x44>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002750:	61d3      	str	r3, [r2, #28]
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_MspInit+0x44>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000

08002770 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	; 0x30
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002790:	d146      	bne.n	8002820 <HAL_ADC_MspInit+0xb0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002792:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_ADC_MspInit+0x120>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3301      	adds	r3, #1
 8002798:	4a3d      	ldr	r2, [pc, #244]	; (8002890 <HAL_ADC_MspInit+0x120>)
 800279a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800279c:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <HAL_ADC_MspInit+0x120>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d10b      	bne.n	80027bc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_ADC_MspInit+0x124>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	4a3a      	ldr	r2, [pc, #232]	; (8002894 <HAL_ADC_MspInit+0x124>)
 80027aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ae:	6153      	str	r3, [r2, #20]
 80027b0:	4b38      	ldr	r3, [pc, #224]	; (8002894 <HAL_ADC_MspInit+0x124>)
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027bc:	4b35      	ldr	r3, [pc, #212]	; (8002894 <HAL_ADC_MspInit+0x124>)
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	4a34      	ldr	r2, [pc, #208]	; (8002894 <HAL_ADC_MspInit+0x124>)
 80027c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c6:	6153      	str	r3, [r2, #20]
 80027c8:	4b32      	ldr	r3, [pc, #200]	; (8002894 <HAL_ADC_MspInit+0x124>)
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d4:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <HAL_ADC_MspInit+0x124>)
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <HAL_ADC_MspInit+0x124>)
 80027da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027de:	6153      	str	r3, [r2, #20]
 80027e0:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <HAL_ADC_MspInit+0x124>)
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = SENSOR_L_Pin|SENSOR_FR_Pin;
 80027ec:	2303      	movs	r3, #3
 80027ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027f0:	2303      	movs	r3, #3
 80027f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f8:	f107 031c 	add.w	r3, r7, #28
 80027fc:	4619      	mov	r1, r3
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002802:	f001 fd8d 	bl	8004320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOL_CHECK_Pin;
 8002806:	2302      	movs	r3, #2
 8002808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800280a:	2303      	movs	r3, #3
 800280c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VOL_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 031c 	add.w	r3, r7, #28
 8002816:	4619      	mov	r1, r3
 8002818:	481f      	ldr	r0, [pc, #124]	; (8002898 <HAL_ADC_MspInit+0x128>)
 800281a:	f001 fd81 	bl	8004320 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800281e:	e032      	b.n	8002886 <HAL_ADC_MspInit+0x116>
  else if(hadc->Instance==ADC2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1d      	ldr	r2, [pc, #116]	; (800289c <HAL_ADC_MspInit+0x12c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12d      	bne.n	8002886 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800282a:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_ADC_MspInit+0x120>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3301      	adds	r3, #1
 8002830:	4a17      	ldr	r2, [pc, #92]	; (8002890 <HAL_ADC_MspInit+0x120>)
 8002832:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <HAL_ADC_MspInit+0x120>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10b      	bne.n	8002854 <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_ADC_MspInit+0x124>)
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	4a14      	ldr	r2, [pc, #80]	; (8002894 <HAL_ADC_MspInit+0x124>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002846:	6153      	str	r3, [r2, #20]
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_ADC_MspInit+0x124>)
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_ADC_MspInit+0x124>)
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <HAL_ADC_MspInit+0x124>)
 800285a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285e:	6153      	str	r3, [r2, #20]
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <HAL_ADC_MspInit+0x124>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENSOR_R_Pin|SENSOR_FL_Pin;
 800286c:	2390      	movs	r3, #144	; 0x90
 800286e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002870:	2303      	movs	r3, #3
 8002872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002882:	f001 fd4d 	bl	8004320 <HAL_GPIO_Init>
}
 8002886:	bf00      	nop
 8002888:	3730      	adds	r7, #48	; 0x30
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200005d8 	.word	0x200005d8
 8002894:	40021000 	.word	0x40021000
 8002898:	48000400 	.word	0x48000400
 800289c:	50000100 	.word	0x50000100

080028a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <HAL_TIM_Base_MspInit+0xac>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d114      	bne.n	80028dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028b2:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_TIM_Base_MspInit+0xb0>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a26      	ldr	r2, [pc, #152]	; (8002950 <HAL_TIM_Base_MspInit+0xb0>)
 80028b8:	f043 0310 	orr.w	r3, r3, #16
 80028bc:	61d3      	str	r3, [r2, #28]
 80028be:	4b24      	ldr	r3, [pc, #144]	; (8002950 <HAL_TIM_Base_MspInit+0xb0>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2100      	movs	r1, #0
 80028ce:	2036      	movs	r0, #54	; 0x36
 80028d0:	f001 fb17 	bl	8003f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80028d4:	2036      	movs	r0, #54	; 0x36
 80028d6:	f001 fb30 	bl	8003f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80028da:	e032      	b.n	8002942 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1c      	ldr	r2, [pc, #112]	; (8002954 <HAL_TIM_Base_MspInit+0xb4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d114      	bne.n	8002910 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_TIM_Base_MspInit+0xb0>)
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	4a19      	ldr	r2, [pc, #100]	; (8002950 <HAL_TIM_Base_MspInit+0xb0>)
 80028ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f0:	6193      	str	r3, [r2, #24]
 80028f2:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_TIM_Base_MspInit+0xb0>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	2100      	movs	r1, #0
 8002902:	2019      	movs	r0, #25
 8002904:	f001 fafd 	bl	8003f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002908:	2019      	movs	r0, #25
 800290a:	f001 fb16 	bl	8003f3a <HAL_NVIC_EnableIRQ>
}
 800290e:	e018      	b.n	8002942 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_TIM_Base_MspInit+0xb8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d113      	bne.n	8002942 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_TIM_Base_MspInit+0xb0>)
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_TIM_Base_MspInit+0xb0>)
 8002920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002924:	6193      	str	r3, [r2, #24]
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_TIM_Base_MspInit+0xb0>)
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	201a      	movs	r0, #26
 8002938:	f001 fae3 	bl	8003f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800293c:	201a      	movs	r0, #26
 800293e:	f001 fafc 	bl	8003f3a <HAL_NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40001000 	.word	0x40001000
 8002950:	40021000 	.word	0x40021000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800

0800295c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <HAL_TIM_MspPostInit+0xa8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d11c      	bne.n	80029b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297e:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <HAL_TIM_MspPostInit+0xac>)
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	4a21      	ldr	r2, [pc, #132]	; (8002a08 <HAL_TIM_MspPostInit+0xac>)
 8002984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002988:	6153      	str	r3, [r2, #20]
 800298a:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <HAL_TIM_MspPostInit+0xac>)
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = CLOCK_R_Pin;
 8002996:	2310      	movs	r3, #16
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80029a6:	2301      	movs	r3, #1
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CLOCK_R_GPIO_Port, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	4816      	ldr	r0, [pc, #88]	; (8002a0c <HAL_TIM_MspPostInit+0xb0>)
 80029b2:	f001 fcb5 	bl	8004320 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80029b6:	e020      	b.n	80029fa <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM17)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <HAL_TIM_MspPostInit+0xb4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d11b      	bne.n	80029fa <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_TIM_MspPostInit+0xac>)
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	4a10      	ldr	r2, [pc, #64]	; (8002a08 <HAL_TIM_MspPostInit+0xac>)
 80029c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029cc:	6153      	str	r3, [r2, #20]
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <HAL_TIM_MspPostInit+0xac>)
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CLOCK_L_Pin;
 80029da:	2320      	movs	r3, #32
 80029dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80029ea:	230a      	movs	r3, #10
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CLOCK_L_GPIO_Port, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	4805      	ldr	r0, [pc, #20]	; (8002a0c <HAL_TIM_MspPostInit+0xb0>)
 80029f6:	f001 fc93 	bl	8004320 <HAL_GPIO_Init>
}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40014400 	.word	0x40014400
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	48000400 	.word	0x48000400
 8002a10:	40014800 	.word	0x40014800

08002a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_UART_MspInit+0x80>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d129      	bne.n	8002a8a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <HAL_UART_MspInit+0x84>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <HAL_UART_MspInit+0x84>)
 8002a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a40:	61d3      	str	r3, [r2, #28]
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_UART_MspInit+0x84>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_UART_MspInit+0x84>)
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <HAL_UART_MspInit+0x84>)
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a58:	6153      	str	r3, [r2, #20]
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <HAL_UART_MspInit+0x84>)
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002a66:	f248 0304 	movw	r3, #32772	; 0x8004
 8002a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a78:	2307      	movs	r3, #7
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	4619      	mov	r1, r3
 8002a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a86:	f001 fc4b 	bl	8004320 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3728      	adds	r7, #40	; 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40004400 	.word	0x40004400
 8002a98:	40021000 	.word	0x40021000

08002a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aae:	e7fe      	b.n	8002aae <HardFault_Handler+0x4>

08002ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <MemManage_Handler+0x4>

08002ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aba:	e7fe      	b.n	8002aba <BusFault_Handler+0x4>

08002abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <UsageFault_Handler+0x4>

08002ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af0:	f000 f974 	bl	8002ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002afe:	f003 fbd3 	bl	80062a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200004b8 	.word	0x200004b8

08002b0c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002b12:	f003 fbc9 	bl	80062a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000504 	.word	0x20000504

08002b20 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <TIM6_DAC1_IRQHandler+0x10>)
 8002b26:	f003 fbbf 	bl	80062a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	2000046c 	.word	0x2000046c

08002b34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	e00a      	b.n	8002b5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b46:	f3af 8000 	nop.w
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	60ba      	str	r2, [r7, #8]
 8002b52:	b2ca      	uxtb	r2, r1
 8002b54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	dbf0      	blt.n	8002b46 <_read+0x12>
	}

return len;
 8002b64:	687b      	ldr	r3, [r7, #4]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e009      	b.n	8002b94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	60ba      	str	r2, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fc23 	bl	80003d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3301      	adds	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	dbf1      	blt.n	8002b80 <_write+0x12>
	}
	return len;
 8002b9c:	687b      	ldr	r3, [r7, #4]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <_close>:

int _close(int file)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
	return -1;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bce:	605a      	str	r2, [r3, #4]
	return 0;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <_isatty>:

int _isatty(int file)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
	return 1;
 8002be6:	2301      	movs	r3, #1
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
	return 0;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <_sbrk+0x50>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <_sbrk+0x16>
		heap_end = &end;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <_sbrk+0x50>)
 8002c22:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <_sbrk+0x54>)
 8002c24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <_sbrk+0x50>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <_sbrk+0x50>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4413      	add	r3, r2
 8002c34:	466a      	mov	r2, sp
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d907      	bls.n	8002c4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c3a:	f004 fdfd 	bl	8007838 <__errno>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	220c      	movs	r2, #12
 8002c42:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c48:	e006      	b.n	8002c58 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <_sbrk+0x50>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	4a03      	ldr	r2, [pc, #12]	; (8002c60 <_sbrk+0x50>)
 8002c54:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	200005dc 	.word	0x200005dc
 8002c64:	20000618 	.word	0x20000618

08002c68 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c6c:	4b1f      	ldr	r3, [pc, #124]	; (8002cec <SystemInit+0x84>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <SystemInit+0x84>)
 8002c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <SystemInit+0x88>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <SystemInit+0x88>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <SystemInit+0x88>)
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	4918      	ldr	r1, [pc, #96]	; (8002cf0 <SystemInit+0x88>)
 8002c8e:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <SystemInit+0x8c>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <SystemInit+0x88>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <SystemInit+0x88>)
 8002c9a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <SystemInit+0x88>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <SystemInit+0x88>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <SystemInit+0x88>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <SystemInit+0x88>)
 8002cb6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002cba:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <SystemInit+0x88>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <SystemInit+0x88>)
 8002cc2:	f023 030f 	bic.w	r3, r3, #15
 8002cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <SystemInit+0x88>)
 8002cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ccc:	4908      	ldr	r1, [pc, #32]	; (8002cf0 <SystemInit+0x88>)
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <SystemInit+0x90>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <SystemInit+0x88>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <SystemInit+0x84>)
 8002cdc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ce0:	609a      	str	r2, [r3, #8]
#endif
}
 8002ce2:	bf00      	nop
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	f87fc00c 	.word	0xf87fc00c
 8002cf8:	ff00fccc 	.word	0xff00fccc

08002cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d00:	480d      	ldr	r0, [pc, #52]	; (8002d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d02:	490e      	ldr	r1, [pc, #56]	; (8002d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d04:	4a0e      	ldr	r2, [pc, #56]	; (8002d40 <LoopForever+0xe>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d08:	e002      	b.n	8002d10 <LoopCopyDataInit>

08002d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0e:	3304      	adds	r3, #4

08002d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d14:	d3f9      	bcc.n	8002d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d18:	4c0b      	ldr	r4, [pc, #44]	; (8002d48 <LoopForever+0x16>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d1c:	e001      	b.n	8002d22 <LoopFillZerobss>

08002d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d20:	3204      	adds	r2, #4

08002d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d24:	d3fb      	bcc.n	8002d1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d26:	f7ff ff9f 	bl	8002c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2a:	f004 fd8b 	bl	8007844 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d2e:	f7fe f9a7 	bl	8001080 <main>

08002d32 <LoopForever>:

LoopForever:
    b LoopForever
 8002d32:	e7fe      	b.n	8002d32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d34:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002d40:	08009aa4 	.word	0x08009aa4
  ldr r2, =_sbss
 8002d44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002d48:	20000618 	.word	0x20000618

08002d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d4c:	e7fe      	b.n	8002d4c <ADC1_2_IRQHandler>
	...

08002d50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <HAL_Init+0x28>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a07      	ldr	r2, [pc, #28]	; (8002d78 <HAL_Init+0x28>)
 8002d5a:	f043 0310 	orr.w	r3, r3, #16
 8002d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d60:	2003      	movs	r0, #3
 8002d62:	f001 f8c3 	bl	8003eec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f000 f808 	bl	8002d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d6c:	f7ff fcdc 	bl	8002728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40022000 	.word	0x40022000

08002d7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <HAL_InitTick+0x54>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_InitTick+0x58>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 f8db 	bl	8003f56 <HAL_SYSTICK_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e00e      	b.n	8002dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b0f      	cmp	r3, #15
 8002dae:	d80a      	bhi.n	8002dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db0:	2200      	movs	r2, #0
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002db8:	f001 f8a3 	bl	8003f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dbc:	4a06      	ldr	r2, [pc, #24]	; (8002dd8 <HAL_InitTick+0x5c>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	20000008 	.word	0x20000008
 8002dd8:	20000004 	.word	0x20000004

08002ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_IncTick+0x20>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_IncTick+0x24>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <HAL_IncTick+0x24>)
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000008 	.word	0x20000008
 8002e00:	200005e0 	.word	0x200005e0

08002e04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return uwTick;  
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_GetTick+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	200005e0 	.word	0x200005e0

08002e1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff ffee 	bl	8002e04 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e34:	d005      	beq.n	8002e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_Delay+0x44>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002e42:	bf00      	nop
 8002e44:	f7ff ffde 	bl	8002e04 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d8f7      	bhi.n	8002e44 <HAL_Delay+0x28>
  {
  }
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000008 	.word	0x20000008

08002e64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b09a      	sub	sp, #104	; 0x68
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e172      	b.n	800316a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d176      	bne.n	8002f84 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d152      	bne.n	8002f44 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff fc59 	bl	8002770 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d13b      	bne.n	8002f44 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fed7 	bl	8003c80 <ADC_Disable>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d12f      	bne.n	8002f44 <HAL_ADC_Init+0xe0>
 8002ee4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d12b      	bne.n	8002f44 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ef4:	f023 0302 	bic.w	r3, r3, #2
 8002ef8:	f043 0202 	orr.w	r2, r3, #2
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f0e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f1e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f20:	4b94      	ldr	r3, [pc, #592]	; (8003174 <HAL_ADC_Init+0x310>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a94      	ldr	r2, [pc, #592]	; (8003178 <HAL_ADC_Init+0x314>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0c9a      	lsrs	r2, r3, #18
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f36:	e002      	b.n	8002f3e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f9      	bne.n	8002f38 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f60:	d110      	bne.n	8002f84 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f023 0312 	bic.w	r3, r3, #18
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f040 80df 	bne.w	8003150 <HAL_ADC_Init+0x2ec>
 8002f92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 80da 	bne.w	8003150 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f040 80d2 	bne.w	8003150 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fb4:	f043 0202 	orr.w	r2, r3, #2
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fbc:	4b6f      	ldr	r3, [pc, #444]	; (800317c <HAL_ADC_Init+0x318>)
 8002fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc8:	d102      	bne.n	8002fd0 <HAL_ADC_Init+0x16c>
 8002fca:	4b6d      	ldr	r3, [pc, #436]	; (8003180 <HAL_ADC_Init+0x31c>)
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e002      	b.n	8002fd6 <HAL_ADC_Init+0x172>
 8002fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fd4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d108      	bne.n	8002ff6 <HAL_ADC_Init+0x192>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_Init+0x192>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_ADC_Init+0x194>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11c      	bne.n	8003036 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d010      	beq.n	8003024 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <HAL_ADC_Init+0x1ba>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_ADC_Init+0x1ba>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_ADC_Init+0x1bc>
 800301e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003020:	2b00      	cmp	r3, #0
 8003022:	d108      	bne.n	8003036 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	431a      	orrs	r2, r3
 8003032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003034:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7e5b      	ldrb	r3, [r3, #25]
 800303a:	035b      	lsls	r3, r3, #13
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003040:	2a01      	cmp	r2, #1
 8003042:	d002      	beq.n	800304a <HAL_ADC_Init+0x1e6>
 8003044:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003048:	e000      	b.n	800304c <HAL_ADC_Init+0x1e8>
 800304a:	2200      	movs	r2, #0
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4313      	orrs	r3, r2
 800305a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800305c:	4313      	orrs	r3, r2
 800305e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d11b      	bne.n	80030a2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7e5b      	ldrb	r3, [r3, #25]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	3b01      	subs	r3, #1
 8003078:	045a      	lsls	r2, r3, #17
 800307a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800307c:	4313      	orrs	r3, r2
 800307e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003082:	663b      	str	r3, [r7, #96]	; 0x60
 8003084:	e00d      	b.n	80030a2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800308e:	f043 0220 	orr.w	r2, r3, #32
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d007      	beq.n	80030ba <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	4313      	orrs	r3, r2
 80030b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030b6:	4313      	orrs	r3, r2
 80030b8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d114      	bne.n	80030f2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030d6:	f023 0302 	bic.w	r3, r3, #2
 80030da:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7e1b      	ldrb	r3, [r3, #24]
 80030e0:	039a      	lsls	r2, r3, #14
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4313      	orrs	r3, r2
 80030ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030ee:	4313      	orrs	r3, r2
 80030f0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	4b22      	ldr	r3, [pc, #136]	; (8003184 <HAL_ADC_Init+0x320>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003102:	430b      	orrs	r3, r1
 8003104:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10c      	bne.n	8003128 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	f023 010f 	bic.w	r1, r3, #15
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	1e5a      	subs	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
 8003126:	e007      	b.n	8003138 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 020f 	bic.w	r2, r2, #15
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f023 0303 	bic.w	r3, r3, #3
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
 800314e:	e00a      	b.n	8003166 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f023 0312 	bic.w	r3, r3, #18
 8003158:	f043 0210 	orr.w	r2, r3, #16
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003160:	2301      	movs	r3, #1
 8003162:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003166:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800316a:	4618      	mov	r0, r3
 800316c:	3768      	adds	r7, #104	; 0x68
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000000 	.word	0x20000000
 8003178:	431bde83 	.word	0x431bde83
 800317c:	50000300 	.word	0x50000300
 8003180:	50000100 	.word	0x50000100
 8003184:	fff0c007 	.word	0xfff0c007

08003188 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 809c 	bne.w	80032dc <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_Start+0x2a>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e097      	b.n	80032e2 <HAL_ADC_Start+0x15a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fcfc 	bl	8003bb8 <ADC_Enable>
 80031c0:	4603      	mov	r3, r0
 80031c2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f040 8083 	bne.w	80032d2 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031e0:	4b42      	ldr	r3, [pc, #264]	; (80032ec <HAL_ADC_Start+0x164>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <HAL_ADC_Start+0x6e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f4:	d115      	bne.n	8003222 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d027      	beq.n	8003260 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003218:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003220:	e01e      	b.n	8003260 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003236:	d004      	beq.n	8003242 <HAL_ADC_Start+0xba>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <HAL_ADC_Start+0x168>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10e      	bne.n	8003260 <HAL_ADC_Start+0xd8>
 8003242:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d007      	beq.n	8003260 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003258:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326c:	d106      	bne.n	800327c <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f023 0206 	bic.w	r2, r3, #6
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
 800327a:	e002      	b.n	8003282 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	221c      	movs	r2, #28
 8003290:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_ADC_Start+0x164>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	2b00      	cmp	r3, #0
 800329c:	d010      	beq.n	80032c0 <HAL_ADC_Start+0x138>
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <HAL_ADC_Start+0x164>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	2b05      	cmp	r3, #5
 80032a8:	d00a      	beq.n	80032c0 <HAL_ADC_Start+0x138>
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_ADC_Start+0x164>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2b09      	cmp	r3, #9
 80032b4:	d004      	beq.n	80032c0 <HAL_ADC_Start+0x138>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032be:	d10f      	bne.n	80032e0 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0204 	orr.w	r2, r2, #4
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	e006      	b.n	80032e0 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80032da:	e001      	b.n	80032e0 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
 80032de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	50000300 	.word	0x50000300
 80032f0:	50000100 	.word	0x50000100

080032f4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2b08      	cmp	r3, #8
 8003308:	d102      	bne.n	8003310 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800330a:	2308      	movs	r3, #8
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	e02e      	b.n	800336e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003310:	4b5e      	ldr	r3, [pc, #376]	; (800348c <HAL_ADC_PollForConversion+0x198>)
 8003312:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2b00      	cmp	r3, #0
 800331e:	d112      	bne.n	8003346 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d11d      	bne.n	800336a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f043 0220 	orr.w	r2, r3, #32
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e09d      	b.n	8003482 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f043 0220 	orr.w	r2, r3, #32
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e08b      	b.n	8003482 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800336a:	230c      	movs	r3, #12
 800336c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800336e:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_ADC_PollForConversion+0x198>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <HAL_ADC_PollForConversion+0x90>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003382:	d104      	bne.n	800338e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	e003      	b.n	8003396 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800338e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003396:	f7ff fd35 	bl	8002e04 <HAL_GetTick>
 800339a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800339c:	e021      	b.n	80033e2 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033a4:	d01d      	beq.n	80033e2 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d007      	beq.n	80033bc <HAL_ADC_PollForConversion+0xc8>
 80033ac:	f7ff fd2a 	bl	8002e04 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d212      	bcs.n	80033e2 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10b      	bne.n	80033e2 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f043 0204 	orr.w	r2, r3, #4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e04f      	b.n	8003482 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0d6      	beq.n	800339e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003406:	2b00      	cmp	r3, #0
 8003408:	d131      	bne.n	800346e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003410:	2b00      	cmp	r3, #0
 8003412:	d12c      	bne.n	800346e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b08      	cmp	r3, #8
 8003420:	d125      	bne.n	800346e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d112      	bne.n	8003456 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d112      	bne.n	800346e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
 8003454:	e00b      	b.n	800346e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	f043 0201 	orr.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d103      	bne.n	8003480 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	50000300 	.word	0x50000300

08003490 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b09b      	sub	sp, #108	; 0x6c
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x22>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e2a4      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x56c>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f040 8288 	bne.w	80039f6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d81c      	bhi.n	8003528 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	461a      	mov	r2, r3
 8003502:	231f      	movs	r3, #31
 8003504:	4093      	lsls	r3, r2
 8003506:	43db      	mvns	r3, r3
 8003508:	4019      	ands	r1, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	fa00 f203 	lsl.w	r2, r0, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
 8003526:	e063      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b09      	cmp	r3, #9
 800352e:	d81e      	bhi.n	800356e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	3b1e      	subs	r3, #30
 8003544:	221f      	movs	r2, #31
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	4019      	ands	r1, r3
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	3b1e      	subs	r3, #30
 8003560:	fa00 f203 	lsl.w	r2, r0, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	635a      	str	r2, [r3, #52]	; 0x34
 800356c:	e040      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b0e      	cmp	r3, #14
 8003574:	d81e      	bhi.n	80035b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	3b3c      	subs	r3, #60	; 0x3c
 800358a:	221f      	movs	r2, #31
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	4019      	ands	r1, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4413      	add	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	3b3c      	subs	r3, #60	; 0x3c
 80035a6:	fa00 f203 	lsl.w	r2, r0, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38
 80035b2:	e01d      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	3b5a      	subs	r3, #90	; 0x5a
 80035c8:	221f      	movs	r2, #31
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	4019      	ands	r1, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	3b5a      	subs	r3, #90	; 0x5a
 80035e4:	fa00 f203 	lsl.w	r2, r0, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f040 80e5 	bne.w	80037ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b09      	cmp	r3, #9
 8003606:	d91c      	bls.n	8003642 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6999      	ldr	r1, [r3, #24]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4613      	mov	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4413      	add	r3, r2
 8003618:	3b1e      	subs	r3, #30
 800361a:	2207      	movs	r2, #7
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	4019      	ands	r1, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6898      	ldr	r0, [r3, #8]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	3b1e      	subs	r3, #30
 8003634:	fa00 f203 	lsl.w	r2, r0, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	619a      	str	r2, [r3, #24]
 8003640:	e019      	b.n	8003676 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6959      	ldr	r1, [r3, #20]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	2207      	movs	r2, #7
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	4019      	ands	r1, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6898      	ldr	r0, [r3, #8]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	fa00 f203 	lsl.w	r2, r0, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	08db      	lsrs	r3, r3, #3
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	3b01      	subs	r3, #1
 8003694:	2b03      	cmp	r3, #3
 8003696:	d84f      	bhi.n	8003738 <HAL_ADC_ConfigChannel+0x28c>
 8003698:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <HAL_ADC_ConfigChannel+0x1f4>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036b1 	.word	0x080036b1
 80036a4:	080036d3 	.word	0x080036d3
 80036a8:	080036f5 	.word	0x080036f5
 80036ac:	08003717 	.word	0x08003717
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036b6:	4b94      	ldr	r3, [pc, #592]	; (8003908 <HAL_ADC_ConfigChannel+0x45c>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	0691      	lsls	r1, r2, #26
 80036c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036c2:	430a      	orrs	r2, r1
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036ce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80036d0:	e07e      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036d8:	4b8b      	ldr	r3, [pc, #556]	; (8003908 <HAL_ADC_ConfigChannel+0x45c>)
 80036da:	4013      	ands	r3, r2
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	0691      	lsls	r1, r2, #26
 80036e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036e4:	430a      	orrs	r2, r1
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036f0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80036f2:	e06d      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036fa:	4b83      	ldr	r3, [pc, #524]	; (8003908 <HAL_ADC_ConfigChannel+0x45c>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	0691      	lsls	r1, r2, #26
 8003704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003706:	430a      	orrs	r2, r1
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003712:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003714:	e05c      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800371c:	4b7a      	ldr	r3, [pc, #488]	; (8003908 <HAL_ADC_ConfigChannel+0x45c>)
 800371e:	4013      	ands	r3, r2
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	0691      	lsls	r1, r2, #26
 8003726:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003728:	430a      	orrs	r2, r1
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003734:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003736:	e04b      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	069b      	lsls	r3, r3, #26
 8003748:	429a      	cmp	r2, r3
 800374a:	d107      	bne.n	800375c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800375a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003762:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	069b      	lsls	r3, r3, #26
 800376c:	429a      	cmp	r2, r3
 800376e:	d107      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800377e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	069b      	lsls	r3, r3, #26
 8003790:	429a      	cmp	r2, r3
 8003792:	d107      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037a2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	069b      	lsls	r3, r3, #26
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d10a      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80037c8:	e001      	b.n	80037ce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80037ce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d108      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x344>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x344>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x346>
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f040 810a 	bne.w	8003a0c <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d00f      	beq.n	8003820 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2201      	movs	r2, #1
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	400a      	ands	r2, r1
 800381a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800381e:	e049      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2201      	movs	r2, #1
 800382e:	409a      	lsls	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b09      	cmp	r3, #9
 8003840:	d91c      	bls.n	800387c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6999      	ldr	r1, [r3, #24]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	3b1b      	subs	r3, #27
 8003854:	2207      	movs	r2, #7
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43db      	mvns	r3, r3
 800385c:	4019      	ands	r1, r3
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6898      	ldr	r0, [r3, #8]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4413      	add	r3, r2
 800386c:	3b1b      	subs	r3, #27
 800386e:	fa00 f203 	lsl.w	r2, r0, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	619a      	str	r2, [r3, #24]
 800387a:	e01b      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6959      	ldr	r1, [r3, #20]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	2207      	movs	r2, #7
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	4019      	ands	r1, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	6898      	ldr	r0, [r3, #8]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	4613      	mov	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4413      	add	r3, r2
 80038a8:	fa00 f203 	lsl.w	r2, r0, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038b4:	4b15      	ldr	r3, [pc, #84]	; (800390c <HAL_ADC_ConfigChannel+0x460>)
 80038b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d105      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038d0:	2b11      	cmp	r3, #17
 80038d2:	d105      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80038e4:	2b12      	cmp	r3, #18
 80038e6:	f040 8091 	bne.w	8003a0c <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80038ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f040 808a 	bne.w	8003a0c <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003900:	d108      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x468>
 8003902:	4b03      	ldr	r3, [pc, #12]	; (8003910 <HAL_ADC_ConfigChannel+0x464>)
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e008      	b.n	800391a <HAL_ADC_ConfigChannel+0x46e>
 8003908:	83fff000 	.word	0x83fff000
 800390c:	50000300 	.word	0x50000300
 8003910:	50000100 	.word	0x50000100
 8003914:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003918:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d108      	bne.n	800393a <HAL_ADC_ConfigChannel+0x48e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_ADC_ConfigChannel+0x48e>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_ADC_ConfigChannel+0x490>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d150      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003940:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003942:	2b00      	cmp	r3, #0
 8003944:	d010      	beq.n	8003968 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d107      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x4b6>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x4b6>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_ADC_ConfigChannel+0x4b8>
 8003962:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003964:	2b00      	cmp	r3, #0
 8003966:	d13c      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b10      	cmp	r3, #16
 800396e:	d11d      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x500>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003978:	d118      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800397a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003984:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003986:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <HAL_ADC_ConfigChannel+0x578>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a27      	ldr	r2, [pc, #156]	; (8003a28 <HAL_ADC_ConfigChannel+0x57c>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	0c9a      	lsrs	r2, r3, #18
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800399c:	e002      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f9      	bne.n	800399e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039aa:	e02e      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b11      	cmp	r3, #17
 80039b2:	d10b      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x520>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039bc:	d106      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80039be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80039c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039ca:	e01e      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b12      	cmp	r3, #18
 80039d2:	d11a      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80039d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80039dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039de:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80039e0:	e013      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80039f4:	e00a      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f043 0220 	orr.w	r2, r3, #32
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003a08:	e000      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a0a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	376c      	adds	r7, #108	; 0x6c
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	20000000 	.word	0x20000000
 8003a28:	431bde83 	.word	0x431bde83

08003a2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b099      	sub	sp, #100	; 0x64
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a44:	d102      	bne.n	8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003a46:	4b5a      	ldr	r3, [pc, #360]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	e002      	b.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8003a4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a50:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0a2      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e09b      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d17f      	bne.n	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d179      	bne.n	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a8c:	4b49      	ldr	r3, [pc, #292]	; (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8003a8e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d040      	beq.n	8003b1a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	6859      	ldr	r1, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003aaa:	035b      	lsls	r3, r3, #13
 8003aac:	430b      	orrs	r3, r1
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ab2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d108      	bne.n	8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d15c      	bne.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d107      	bne.n	8003af6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8003af6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d14b      	bne.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b04:	f023 030f 	bic.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	6811      	ldr	r1, [r2, #0]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	431a      	orrs	r2, r3
 8003b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b16:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b18:	e03c      	b.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b24:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d108      	bne.n	8003b46 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003b46:	2300      	movs	r3, #0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d123      	bne.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d107      	bne.n	8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003b68:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d112      	bne.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b76:	f023 030f 	bic.w	r3, r3, #15
 8003b7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b7c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b7e:	e009      	b.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003b92:	e000      	b.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b94:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3764      	adds	r7, #100	; 0x64
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	50000100 	.word	0x50000100
 8003bb4:	50000300 	.word	0x50000300

08003bb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d108      	bne.n	8003be4 <ADC_Enable+0x2c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <ADC_Enable+0x2c>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <ADC_Enable+0x2e>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d143      	bne.n	8003c72 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <ADC_Enable+0xc4>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00d      	beq.n	8003c14 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f043 0210 	orr.w	r2, r3, #16
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e02f      	b.n	8003c74 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003c24:	f7ff f8ee 	bl	8002e04 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c2a:	e01b      	b.n	8003c64 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c2c:	f7ff f8ea 	bl	8002e04 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d914      	bls.n	8003c64 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d00d      	beq.n	8003c64 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f043 0210 	orr.w	r2, r3, #16
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f043 0201 	orr.w	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e007      	b.n	8003c74 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d1dc      	bne.n	8003c2c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	8000003f 	.word	0x8000003f

08003c80 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d108      	bne.n	8003cac <ADC_Disable+0x2c>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <ADC_Disable+0x2c>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <ADC_Disable+0x2e>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d047      	beq.n	8003d42 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 030d 	and.w	r3, r3, #13
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d10f      	bne.n	8003ce0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0202 	orr.w	r2, r2, #2
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003cd8:	f7ff f894 	bl	8002e04 <HAL_GetTick>
 8003cdc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003cde:	e029      	b.n	8003d34 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f043 0210 	orr.w	r2, r3, #16
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	f043 0201 	orr.w	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e023      	b.n	8003d44 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cfc:	f7ff f882 	bl	8002e04 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d914      	bls.n	8003d34 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10d      	bne.n	8003d34 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f043 0210 	orr.w	r2, r3, #16
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e007      	b.n	8003d44 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d0dc      	beq.n	8003cfc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d5c:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <__NVIC_SetPriorityGrouping+0x44>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d68:	4013      	ands	r3, r2
 8003d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d7e:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <__NVIC_SetPriorityGrouping+0x44>)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	60d3      	str	r3, [r2, #12]
}
 8003d84:	bf00      	nop
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <__NVIC_GetPriorityGrouping+0x18>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	0a1b      	lsrs	r3, r3, #8
 8003d9e:	f003 0307 	and.w	r3, r3, #7
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	db0b      	blt.n	8003dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	f003 021f 	and.w	r2, r3, #31
 8003dc8:	4907      	ldr	r1, [pc, #28]	; (8003de8 <__NVIC_EnableIRQ+0x38>)
 8003dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	e000e100 	.word	0xe000e100

08003dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	6039      	str	r1, [r7, #0]
 8003df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	db0a      	blt.n	8003e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	490c      	ldr	r1, [pc, #48]	; (8003e38 <__NVIC_SetPriority+0x4c>)
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	0112      	lsls	r2, r2, #4
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	440b      	add	r3, r1
 8003e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e14:	e00a      	b.n	8003e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	4908      	ldr	r1, [pc, #32]	; (8003e3c <__NVIC_SetPriority+0x50>)
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	3b04      	subs	r3, #4
 8003e24:	0112      	lsls	r2, r2, #4
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	440b      	add	r3, r1
 8003e2a:	761a      	strb	r2, [r3, #24]
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	e000e100 	.word	0xe000e100
 8003e3c:	e000ed00 	.word	0xe000ed00

08003e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b089      	sub	sp, #36	; 0x24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f1c3 0307 	rsb	r3, r3, #7
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	bf28      	it	cs
 8003e5e:	2304      	movcs	r3, #4
 8003e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3304      	adds	r3, #4
 8003e66:	2b06      	cmp	r3, #6
 8003e68:	d902      	bls.n	8003e70 <NVIC_EncodePriority+0x30>
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	3b03      	subs	r3, #3
 8003e6e:	e000      	b.n	8003e72 <NVIC_EncodePriority+0x32>
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43da      	mvns	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	401a      	ands	r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	43d9      	mvns	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e98:	4313      	orrs	r3, r2
         );
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3724      	adds	r7, #36	; 0x24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
	...

08003ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb8:	d301      	bcc.n	8003ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e00f      	b.n	8003ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <SysTick_Config+0x40>)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ec6:	210f      	movs	r1, #15
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ecc:	f7ff ff8e 	bl	8003dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <SysTick_Config+0x40>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ed6:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <SysTick_Config+0x40>)
 8003ed8:	2207      	movs	r2, #7
 8003eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	e000e010 	.word	0xe000e010

08003eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ff29 	bl	8003d4c <__NVIC_SetPriorityGrouping>
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b086      	sub	sp, #24
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	4603      	mov	r3, r0
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f14:	f7ff ff3e 	bl	8003d94 <__NVIC_GetPriorityGrouping>
 8003f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	6978      	ldr	r0, [r7, #20]
 8003f20:	f7ff ff8e 	bl	8003e40 <NVIC_EncodePriority>
 8003f24:	4602      	mov	r2, r0
 8003f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff5d 	bl	8003dec <__NVIC_SetPriority>
}
 8003f32:	bf00      	nop
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	4603      	mov	r3, r0
 8003f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff31 	bl	8003db0 <__NVIC_EnableIRQ>
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ffa2 	bl	8003ea8 <SysTick_Config>
 8003f64:	4603      	mov	r3, r0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <HAL_FLASH_Program+0xd8>)
 8003f8c:	7e1b      	ldrb	r3, [r3, #24]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_FLASH_Program+0x26>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e054      	b.n	8004040 <HAL_FLASH_Program+0xd0>
 8003f96:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <HAL_FLASH_Program+0xd8>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003f9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fa0:	f000 f8a8 	bl	80040f4 <FLASH_WaitForLastOperation>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d144      	bne.n	8004038 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	757b      	strb	r3, [r7, #21]
 8003fb8:	e007      	b.n	8003fca <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d102      	bne.n	8003fc6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	757b      	strb	r3, [r7, #21]
 8003fc4:	e001      	b.n	8003fca <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003fc6:	2304      	movs	r3, #4
 8003fc8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75bb      	strb	r3, [r7, #22]
 8003fce:	e02d      	b.n	800402c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003fd0:	7dbb      	ldrb	r3, [r7, #22]
 8003fd2:	005a      	lsls	r2, r3, #1
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	eb02 0c03 	add.w	ip, r2, r3
 8003fda:	7dbb      	ldrb	r3, [r7, #22]
 8003fdc:	0119      	lsls	r1, r3, #4
 8003fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fe2:	f1c1 0620 	rsb	r6, r1, #32
 8003fe6:	f1a1 0020 	sub.w	r0, r1, #32
 8003fea:	fa22 f401 	lsr.w	r4, r2, r1
 8003fee:	fa03 f606 	lsl.w	r6, r3, r6
 8003ff2:	4334      	orrs	r4, r6
 8003ff4:	fa23 f000 	lsr.w	r0, r3, r0
 8003ff8:	4304      	orrs	r4, r0
 8003ffa:	fa23 f501 	lsr.w	r5, r3, r1
 8003ffe:	b2a3      	uxth	r3, r4
 8004000:	4619      	mov	r1, r3
 8004002:	4660      	mov	r0, ip
 8004004:	f000 f85a 	bl	80040bc <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004008:	f24c 3050 	movw	r0, #50000	; 0xc350
 800400c:	f000 f872 	bl	80040f4 <FLASH_WaitForLastOperation>
 8004010:	4603      	mov	r3, r0
 8004012:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004014:	4b0d      	ldr	r3, [pc, #52]	; (800404c <HAL_FLASH_Program+0xdc>)
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	4a0c      	ldr	r2, [pc, #48]	; (800404c <HAL_FLASH_Program+0xdc>)
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d107      	bne.n	8004036 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004026:	7dbb      	ldrb	r3, [r7, #22]
 8004028:	3301      	adds	r3, #1
 800402a:	75bb      	strb	r3, [r7, #22]
 800402c:	7dba      	ldrb	r2, [r7, #22]
 800402e:	7d7b      	ldrb	r3, [r7, #21]
 8004030:	429a      	cmp	r2, r3
 8004032:	d3cd      	bcc.n	8003fd0 <HAL_FLASH_Program+0x60>
 8004034:	e000      	b.n	8004038 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004036:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <HAL_FLASH_Program+0xd8>)
 800403a:	2200      	movs	r2, #0
 800403c:	761a      	strb	r2, [r3, #24]

  return status;
 800403e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004040:	4618      	mov	r0, r3
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004048:	200005e8 	.word	0x200005e8
 800404c:	40022000 	.word	0x40022000

08004050 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800405a:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <HAL_FLASH_Unlock+0x40>)
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00d      	beq.n	8004082 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <HAL_FLASH_Unlock+0x40>)
 8004068:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <HAL_FLASH_Unlock+0x44>)
 800406a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <HAL_FLASH_Unlock+0x40>)
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <HAL_FLASH_Unlock+0x48>)
 8004070:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <HAL_FLASH_Unlock+0x40>)
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004082:	79fb      	ldrb	r3, [r7, #7]
}
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40022000 	.word	0x40022000
 8004094:	45670123 	.word	0x45670123
 8004098:	cdef89ab 	.word	0xcdef89ab

0800409c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_FLASH_Lock+0x1c>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <HAL_FLASH_Lock+0x1c>)
 80040a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040aa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	40022000 	.word	0x40022000

080040bc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040c8:	4b08      	ldr	r3, [pc, #32]	; (80040ec <FLASH_Program_HalfWord+0x30>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <FLASH_Program_HalfWord+0x34>)
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	4a07      	ldr	r2, [pc, #28]	; (80040f0 <FLASH_Program_HalfWord+0x34>)
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	887a      	ldrh	r2, [r7, #2]
 80040de:	801a      	strh	r2, [r3, #0]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	200005e8 	.word	0x200005e8
 80040f0:	40022000 	.word	0x40022000

080040f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80040fc:	f7fe fe82 	bl	8002e04 <HAL_GetTick>
 8004100:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004102:	e010      	b.n	8004126 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800410a:	d00c      	beq.n	8004126 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <FLASH_WaitForLastOperation+0x2e>
 8004112:	f7fe fe77 	bl	8002e04 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d201      	bcs.n	8004126 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e01f      	b.n	8004166 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <FLASH_WaitForLastOperation+0x7c>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d0e8      	beq.n	8004104 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <FLASH_WaitForLastOperation+0x7c>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b20      	cmp	r3, #32
 800413c:	d102      	bne.n	8004144 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800413e:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <FLASH_WaitForLastOperation+0x7c>)
 8004140:	2220      	movs	r2, #32
 8004142:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <FLASH_WaitForLastOperation+0x7c>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b10      	cmp	r3, #16
 800414e:	d005      	beq.n	800415c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <FLASH_WaitForLastOperation+0x7c>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004158:	2b04      	cmp	r3, #4
 800415a:	d103      	bne.n	8004164 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800415c:	f000 f80a 	bl	8004174 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40022000 	.word	0x40022000

08004174 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800417e:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <FLASH_SetErrorCode+0x5c>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b10      	cmp	r3, #16
 8004188:	d109      	bne.n	800419e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <FLASH_SetErrorCode+0x60>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f043 0302 	orr.w	r3, r3, #2
 8004192:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <FLASH_SetErrorCode+0x60>)
 8004194:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f043 0310 	orr.w	r3, r3, #16
 800419c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800419e:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <FLASH_SetErrorCode+0x5c>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d109      	bne.n	80041be <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80041aa:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <FLASH_SetErrorCode+0x60>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	4a08      	ldr	r2, [pc, #32]	; (80041d4 <FLASH_SetErrorCode+0x60>)
 80041b4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f043 0304 	orr.w	r3, r3, #4
 80041bc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80041be:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <FLASH_SetErrorCode+0x5c>)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	60d3      	str	r3, [r2, #12]
}  
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40022000 	.word	0x40022000
 80041d4:	200005e8 	.word	0x200005e8

080041d8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041ea:	4b2e      	ldr	r3, [pc, #184]	; (80042a4 <HAL_FLASHEx_Erase+0xcc>)
 80041ec:	7e1b      	ldrb	r3, [r3, #24]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_FLASHEx_Erase+0x1e>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e052      	b.n	800429c <HAL_FLASHEx_Erase+0xc4>
 80041f6:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <HAL_FLASHEx_Erase+0xcc>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d115      	bne.n	8004230 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004204:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004208:	f7ff ff74 	bl	80040f4 <FLASH_WaitForLastOperation>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d140      	bne.n	8004294 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8004212:	f000 f84b 	bl	80042ac <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004216:	f24c 3050 	movw	r0, #50000	; 0xc350
 800421a:	f7ff ff6b 	bl	80040f4 <FLASH_WaitForLastOperation>
 800421e:	4603      	mov	r3, r0
 8004220:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004222:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <HAL_FLASHEx_Erase+0xd0>)
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	4a20      	ldr	r2, [pc, #128]	; (80042a8 <HAL_FLASHEx_Erase+0xd0>)
 8004228:	f023 0304 	bic.w	r3, r3, #4
 800422c:	6113      	str	r3, [r2, #16]
 800422e:	e031      	b.n	8004294 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004230:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004234:	f7ff ff5e 	bl	80040f4 <FLASH_WaitForLastOperation>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d12a      	bne.n	8004294 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004244:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	e019      	b.n	8004282 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800424e:	68b8      	ldr	r0, [r7, #8]
 8004250:	f000 f846 	bl	80042e0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004254:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004258:	f7ff ff4c 	bl	80040f4 <FLASH_WaitForLastOperation>
 800425c:	4603      	mov	r3, r0
 800425e:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_FLASHEx_Erase+0xd0>)
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	4a10      	ldr	r2, [pc, #64]	; (80042a8 <HAL_FLASHEx_Erase+0xd0>)
 8004266:	f023 0302 	bic.w	r3, r3, #2
 800426a:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	601a      	str	r2, [r3, #0]
            break;
 8004278:	e00c      	b.n	8004294 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	02da      	lsls	r2, r3, #11
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	429a      	cmp	r2, r3
 8004292:	d3dc      	bcc.n	800424e <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <HAL_FLASHEx_Erase+0xcc>)
 8004296:	2200      	movs	r2, #0
 8004298:	761a      	strb	r2, [r3, #24]

  return status;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	200005e8 	.word	0x200005e8
 80042a8:	40022000 	.word	0x40022000

080042ac <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <FLASH_MassErase+0x2c>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80042b6:	4b09      	ldr	r3, [pc, #36]	; (80042dc <FLASH_MassErase+0x30>)
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	4a08      	ldr	r2, [pc, #32]	; (80042dc <FLASH_MassErase+0x30>)
 80042bc:	f043 0304 	orr.w	r3, r3, #4
 80042c0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <FLASH_MassErase+0x30>)
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	4a05      	ldr	r2, [pc, #20]	; (80042dc <FLASH_MassErase+0x30>)
 80042c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042cc:	6113      	str	r3, [r2, #16]
}
 80042ce:	bf00      	nop
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	200005e8 	.word	0x200005e8
 80042dc:	40022000 	.word	0x40022000

080042e0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042e8:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <FLASH_PageErase+0x38>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <FLASH_PageErase+0x3c>)
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	4a0a      	ldr	r2, [pc, #40]	; (800431c <FLASH_PageErase+0x3c>)
 80042f4:	f043 0302 	orr.w	r3, r3, #2
 80042f8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <FLASH_PageErase+0x3c>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <FLASH_PageErase+0x3c>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	4a05      	ldr	r2, [pc, #20]	; (800431c <FLASH_PageErase+0x3c>)
 8004306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800430a:	6113      	str	r3, [r2, #16]
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	200005e8 	.word	0x200005e8
 800431c:	40022000 	.word	0x40022000

08004320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800432e:	e14e      	b.n	80045ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	2101      	movs	r1, #1
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	fa01 f303 	lsl.w	r3, r1, r3
 800433c:	4013      	ands	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8140 	beq.w	80045c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d005      	beq.n	8004360 <HAL_GPIO_Init+0x40>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d130      	bne.n	80043c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	2203      	movs	r2, #3
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4013      	ands	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004396:	2201      	movs	r2, #1
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43db      	mvns	r3, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4013      	ands	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	f003 0201 	and.w	r2, r3, #1
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d017      	beq.n	80043fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	2203      	movs	r2, #3
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4013      	ands	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d123      	bne.n	8004452 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	08da      	lsrs	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3208      	adds	r2, #8
 8004412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004416:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	220f      	movs	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4013      	ands	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	08da      	lsrs	r2, r3, #3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3208      	adds	r2, #8
 800444c:	6939      	ldr	r1, [r7, #16]
 800444e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	2203      	movs	r2, #3
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43db      	mvns	r3, r3
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4013      	ands	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 0203 	and.w	r2, r3, #3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 809a 	beq.w	80045c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004494:	4b55      	ldr	r3, [pc, #340]	; (80045ec <HAL_GPIO_Init+0x2cc>)
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	4a54      	ldr	r2, [pc, #336]	; (80045ec <HAL_GPIO_Init+0x2cc>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6193      	str	r3, [r2, #24]
 80044a0:	4b52      	ldr	r3, [pc, #328]	; (80045ec <HAL_GPIO_Init+0x2cc>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044ac:	4a50      	ldr	r2, [pc, #320]	; (80045f0 <HAL_GPIO_Init+0x2d0>)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	3302      	adds	r3, #2
 80044b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	220f      	movs	r2, #15
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4013      	ands	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044d6:	d013      	beq.n	8004500 <HAL_GPIO_Init+0x1e0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a46      	ldr	r2, [pc, #280]	; (80045f4 <HAL_GPIO_Init+0x2d4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00d      	beq.n	80044fc <HAL_GPIO_Init+0x1dc>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a45      	ldr	r2, [pc, #276]	; (80045f8 <HAL_GPIO_Init+0x2d8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <HAL_GPIO_Init+0x1d8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a44      	ldr	r2, [pc, #272]	; (80045fc <HAL_GPIO_Init+0x2dc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d101      	bne.n	80044f4 <HAL_GPIO_Init+0x1d4>
 80044f0:	2303      	movs	r3, #3
 80044f2:	e006      	b.n	8004502 <HAL_GPIO_Init+0x1e2>
 80044f4:	2305      	movs	r3, #5
 80044f6:	e004      	b.n	8004502 <HAL_GPIO_Init+0x1e2>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e002      	b.n	8004502 <HAL_GPIO_Init+0x1e2>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <HAL_GPIO_Init+0x1e2>
 8004500:	2300      	movs	r3, #0
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	f002 0203 	and.w	r2, r2, #3
 8004508:	0092      	lsls	r2, r2, #2
 800450a:	4093      	lsls	r3, r2
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004512:	4937      	ldr	r1, [pc, #220]	; (80045f0 <HAL_GPIO_Init+0x2d0>)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	3302      	adds	r3, #2
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004520:	4b37      	ldr	r3, [pc, #220]	; (8004600 <HAL_GPIO_Init+0x2e0>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	43db      	mvns	r3, r3
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4013      	ands	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004544:	4a2e      	ldr	r2, [pc, #184]	; (8004600 <HAL_GPIO_Init+0x2e0>)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800454a:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <HAL_GPIO_Init+0x2e0>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	43db      	mvns	r3, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4013      	ands	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800456e:	4a24      	ldr	r2, [pc, #144]	; (8004600 <HAL_GPIO_Init+0x2e0>)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004574:	4b22      	ldr	r3, [pc, #136]	; (8004600 <HAL_GPIO_Init+0x2e0>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	43db      	mvns	r3, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004598:	4a19      	ldr	r2, [pc, #100]	; (8004600 <HAL_GPIO_Init+0x2e0>)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800459e:	4b18      	ldr	r3, [pc, #96]	; (8004600 <HAL_GPIO_Init+0x2e0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80045c2:	4a0f      	ldr	r2, [pc, #60]	; (8004600 <HAL_GPIO_Init+0x2e0>)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	3301      	adds	r3, #1
 80045cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f47f aea9 	bne.w	8004330 <HAL_GPIO_Init+0x10>
  }
}
 80045de:	bf00      	nop
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40010000 	.word	0x40010000
 80045f4:	48000400 	.word	0x48000400
 80045f8:	48000800 	.word	0x48000800
 80045fc:	48000c00 	.word	0x48000c00
 8004600:	40010400 	.word	0x40010400

08004604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e001      	b.n	8004626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
 8004640:	4613      	mov	r3, r2
 8004642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004644:	787b      	ldrb	r3, [r7, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004650:	e002      	b.n	8004658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800466a:	af00      	add	r7, sp, #0
 800466c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004670:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004674:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	f001 b823 	b.w	80056d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800468a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 817d 	beq.w	800499a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80046a0:	4bbc      	ldr	r3, [pc, #752]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d00c      	beq.n	80046c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046ac:	4bb9      	ldr	r3, [pc, #740]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 030c 	and.w	r3, r3, #12
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d15c      	bne.n	8004772 <HAL_RCC_OscConfig+0x10e>
 80046b8:	4bb6      	ldr	r3, [pc, #728]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d155      	bne.n	8004772 <HAL_RCC_OscConfig+0x10e>
 80046c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d102      	bne.n	80046f8 <HAL_RCC_OscConfig+0x94>
 80046f2:	4ba8      	ldr	r3, [pc, #672]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	e015      	b.n	8004724 <HAL_RCC_OscConfig+0xc0>
 80046f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004700:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004704:	fa93 f3a3 	rbit	r3, r3
 8004708:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800470c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004710:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004714:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004718:	fa93 f3a3 	rbit	r3, r3
 800471c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004720:	4b9c      	ldr	r3, [pc, #624]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004728:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800472c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004730:	fa92 f2a2 	rbit	r2, r2
 8004734:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004738:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800473c:	fab2 f282 	clz	r2, r2
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	f042 0220 	orr.w	r2, r2, #32
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	f002 021f 	and.w	r2, r2, #31
 800474c:	2101      	movs	r1, #1
 800474e:	fa01 f202 	lsl.w	r2, r1, r2
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 811f 	beq.w	8004998 <HAL_RCC_OscConfig+0x334>
 800475a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 8116 	bne.w	8004998 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	f000 bfaf 	b.w	80056d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004782:	d106      	bne.n	8004792 <HAL_RCC_OscConfig+0x12e>
 8004784:	4b83      	ldr	r3, [pc, #524]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a82      	ldr	r2, [pc, #520]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 800478a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	e036      	b.n	8004800 <HAL_RCC_OscConfig+0x19c>
 8004792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10c      	bne.n	80047bc <HAL_RCC_OscConfig+0x158>
 80047a2:	4b7c      	ldr	r3, [pc, #496]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a7b      	ldr	r2, [pc, #492]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	4b79      	ldr	r3, [pc, #484]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a78      	ldr	r2, [pc, #480]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e021      	b.n	8004800 <HAL_RCC_OscConfig+0x19c>
 80047bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x184>
 80047ce:	4b71      	ldr	r3, [pc, #452]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a70      	ldr	r2, [pc, #448]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	4b6e      	ldr	r3, [pc, #440]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6d      	ldr	r2, [pc, #436]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e00b      	b.n	8004800 <HAL_RCC_OscConfig+0x19c>
 80047e8:	4b6a      	ldr	r3, [pc, #424]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a69      	ldr	r2, [pc, #420]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	4b67      	ldr	r3, [pc, #412]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a66      	ldr	r2, [pc, #408]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80047fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004800:	4b64      	ldr	r3, [pc, #400]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	f023 020f 	bic.w	r2, r3, #15
 8004808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800480c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	495f      	ldr	r1, [pc, #380]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 8004816:	4313      	orrs	r3, r2
 8004818:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800481a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d059      	beq.n	80048de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482a:	f7fe faeb 	bl	8002e04 <HAL_GetTick>
 800482e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004832:	e00a      	b.n	800484a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004834:	f7fe fae6 	bl	8002e04 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b64      	cmp	r3, #100	; 0x64
 8004842:	d902      	bls.n	800484a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	f000 bf43 	b.w	80056d0 <HAL_RCC_OscConfig+0x106c>
 800484a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800484e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004852:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800485e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004862:	fab3 f383 	clz	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	d102      	bne.n	800487c <HAL_RCC_OscConfig+0x218>
 8004876:	4b47      	ldr	r3, [pc, #284]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	e015      	b.n	80048a8 <HAL_RCC_OscConfig+0x244>
 800487c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004880:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004894:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004898:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800489c:	fa93 f3a3 	rbit	r3, r3
 80048a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80048a4:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80048b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80048b4:	fa92 f2a2 	rbit	r2, r2
 80048b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80048bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80048c0:	fab2 f282 	clz	r2, r2
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	f042 0220 	orr.w	r2, r2, #32
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	f002 021f 	and.w	r2, r2, #31
 80048d0:	2101      	movs	r1, #1
 80048d2:	fa01 f202 	lsl.w	r2, r1, r2
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ab      	beq.n	8004834 <HAL_RCC_OscConfig+0x1d0>
 80048dc:	e05d      	b.n	800499a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048de:	f7fe fa91 	bl	8002e04 <HAL_GetTick>
 80048e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e8:	f7fe fa8c 	bl	8002e04 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b64      	cmp	r3, #100	; 0x64
 80048f6:	d902      	bls.n	80048fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	f000 bee9 	b.w	80056d0 <HAL_RCC_OscConfig+0x106c>
 80048fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004902:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800490a:	fa93 f3a3 	rbit	r3, r3
 800490e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004912:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	fab3 f383 	clz	r3, r3
 800491a:	b2db      	uxtb	r3, r3
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b01      	cmp	r3, #1
 8004928:	d102      	bne.n	8004930 <HAL_RCC_OscConfig+0x2cc>
 800492a:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	e015      	b.n	800495c <HAL_RCC_OscConfig+0x2f8>
 8004930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004934:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004948:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800494c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004950:	fa93 f3a3 	rbit	r3, r3
 8004954:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004958:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <HAL_RCC_OscConfig+0x330>)
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004960:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004964:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004968:	fa92 f2a2 	rbit	r2, r2
 800496c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004970:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004974:	fab2 f282 	clz	r2, r2
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	f042 0220 	orr.w	r2, r2, #32
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	f002 021f 	and.w	r2, r2, #31
 8004984:	2101      	movs	r1, #1
 8004986:	fa01 f202 	lsl.w	r2, r1, r2
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1ab      	bne.n	80048e8 <HAL_RCC_OscConfig+0x284>
 8004990:	e003      	b.n	800499a <HAL_RCC_OscConfig+0x336>
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800499a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 817d 	beq.w	8004caa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80049b0:	4ba6      	ldr	r3, [pc, #664]	; (8004c4c <HAL_RCC_OscConfig+0x5e8>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 030c 	and.w	r3, r3, #12
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00b      	beq.n	80049d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80049bc:	4ba3      	ldr	r3, [pc, #652]	; (8004c4c <HAL_RCC_OscConfig+0x5e8>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 030c 	and.w	r3, r3, #12
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d172      	bne.n	8004aae <HAL_RCC_OscConfig+0x44a>
 80049c8:	4ba0      	ldr	r3, [pc, #640]	; (8004c4c <HAL_RCC_OscConfig+0x5e8>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d16c      	bne.n	8004aae <HAL_RCC_OscConfig+0x44a>
 80049d4:	2302      	movs	r3, #2
 80049d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80049de:	fa93 f3a3 	rbit	r3, r3
 80049e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80049e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d102      	bne.n	8004a04 <HAL_RCC_OscConfig+0x3a0>
 80049fe:	4b93      	ldr	r3, [pc, #588]	; (8004c4c <HAL_RCC_OscConfig+0x5e8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	e013      	b.n	8004a2c <HAL_RCC_OscConfig+0x3c8>
 8004a04:	2302      	movs	r3, #2
 8004a06:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004a0e:	fa93 f3a3 	rbit	r3, r3
 8004a12:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004a16:	2302      	movs	r3, #2
 8004a18:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004a1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004a20:	fa93 f3a3 	rbit	r3, r3
 8004a24:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004a28:	4b88      	ldr	r3, [pc, #544]	; (8004c4c <HAL_RCC_OscConfig+0x5e8>)
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004a32:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004a36:	fa92 f2a2 	rbit	r2, r2
 8004a3a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004a3e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004a42:	fab2 f282 	clz	r2, r2
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	f042 0220 	orr.w	r2, r2, #32
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	f002 021f 	and.w	r2, r2, #31
 8004a52:	2101      	movs	r1, #1
 8004a54:	fa01 f202 	lsl.w	r2, r1, r2
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCC_OscConfig+0x410>
 8004a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d002      	beq.n	8004a74 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f000 be2e 	b.w	80056d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a74:	4b75      	ldr	r3, [pc, #468]	; (8004c4c <HAL_RCC_OscConfig+0x5e8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	21f8      	movs	r1, #248	; 0xf8
 8004a8a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004a92:	fa91 f1a1 	rbit	r1, r1
 8004a96:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004a9a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004a9e:	fab1 f181 	clz	r1, r1
 8004aa2:	b2c9      	uxtb	r1, r1
 8004aa4:	408b      	lsls	r3, r1
 8004aa6:	4969      	ldr	r1, [pc, #420]	; (8004c4c <HAL_RCC_OscConfig+0x5e8>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aac:	e0fd      	b.n	8004caa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8088 	beq.w	8004bd0 <HAL_RCC_OscConfig+0x56c>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004aca:	fa93 f3a3 	rbit	r3, r3
 8004ace:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004ad2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ae0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	2301      	movs	r3, #1
 8004aea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aec:	f7fe f98a 	bl	8002e04 <HAL_GetTick>
 8004af0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af4:	e00a      	b.n	8004b0c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af6:	f7fe f985 	bl	8002e04 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d902      	bls.n	8004b0c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	f000 bde2 	b.w	80056d0 <HAL_RCC_OscConfig+0x106c>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004b16:	fa93 f3a3 	rbit	r3, r3
 8004b1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004b1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	fab3 f383 	clz	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d102      	bne.n	8004b3c <HAL_RCC_OscConfig+0x4d8>
 8004b36:	4b45      	ldr	r3, [pc, #276]	; (8004c4c <HAL_RCC_OscConfig+0x5e8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	e013      	b.n	8004b64 <HAL_RCC_OscConfig+0x500>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b46:	fa93 f3a3 	rbit	r3, r3
 8004b4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004b4e:	2302      	movs	r3, #2
 8004b50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004b54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004b58:	fa93 f3a3 	rbit	r3, r3
 8004b5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004b60:	4b3a      	ldr	r3, [pc, #232]	; (8004c4c <HAL_RCC_OscConfig+0x5e8>)
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	2202      	movs	r2, #2
 8004b66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004b6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004b6e:	fa92 f2a2 	rbit	r2, r2
 8004b72:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004b76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004b7a:	fab2 f282 	clz	r2, r2
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	f042 0220 	orr.w	r2, r2, #32
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	f002 021f 	and.w	r2, r2, #31
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0af      	beq.n	8004af6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b96:	4b2d      	ldr	r3, [pc, #180]	; (8004c4c <HAL_RCC_OscConfig+0x5e8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	21f8      	movs	r1, #248	; 0xf8
 8004bac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004bb4:	fa91 f1a1 	rbit	r1, r1
 8004bb8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004bbc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004bc0:	fab1 f181 	clz	r1, r1
 8004bc4:	b2c9      	uxtb	r1, r1
 8004bc6:	408b      	lsls	r3, r1
 8004bc8:	4920      	ldr	r1, [pc, #128]	; (8004c4c <HAL_RCC_OscConfig+0x5e8>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
 8004bce:	e06c      	b.n	8004caa <HAL_RCC_OscConfig+0x646>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004bda:	fa93 f3a3 	rbit	r3, r3
 8004bde:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004be2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be6:	fab3 f383 	clz	r3, r3
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fe f902 	bl	8002e04 <HAL_GetTick>
 8004c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c04:	e00a      	b.n	8004c1c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c06:	f7fe f8fd 	bl	8002e04 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d902      	bls.n	8004c1c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	f000 bd5a 	b.w	80056d0 <HAL_RCC_OscConfig+0x106c>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c26:	fa93 f3a3 	rbit	r3, r3
 8004c2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c32:	fab3 f383 	clz	r3, r3
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d104      	bne.n	8004c50 <HAL_RCC_OscConfig+0x5ec>
 8004c46:	4b01      	ldr	r3, [pc, #4]	; (8004c4c <HAL_RCC_OscConfig+0x5e8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	e015      	b.n	8004c78 <HAL_RCC_OscConfig+0x614>
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	2302      	movs	r3, #2
 8004c52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c5a:	fa93 f3a3 	rbit	r3, r3
 8004c5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c62:	2302      	movs	r3, #2
 8004c64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c74:	4bc8      	ldr	r3, [pc, #800]	; (8004f98 <HAL_RCC_OscConfig+0x934>)
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	2202      	movs	r2, #2
 8004c7a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004c7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004c82:	fa92 f2a2 	rbit	r2, r2
 8004c86:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004c8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004c8e:	fab2 f282 	clz	r2, r2
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	f042 0220 	orr.w	r2, r2, #32
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	f002 021f 	and.w	r2, r2, #31
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1ad      	bne.n	8004c06 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 8110 	beq.w	8004ee0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d079      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x760>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004cda:	fa93 f3a3 	rbit	r3, r3
 8004cde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	461a      	mov	r2, r3
 8004cee:	4bab      	ldr	r3, [pc, #684]	; (8004f9c <HAL_RCC_OscConfig+0x938>)
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfa:	f7fe f883 	bl	8002e04 <HAL_GetTick>
 8004cfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d04:	f7fe f87e 	bl	8002e04 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d902      	bls.n	8004d1a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	f000 bcdb 	b.w	80056d0 <HAL_RCC_OscConfig+0x106c>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d24:	fa93 f3a3 	rbit	r3, r3
 8004d28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d34:	2202      	movs	r2, #2
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	fa93 f2a3 	rbit	r2, r3
 8004d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d58:	2202      	movs	r2, #2
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	fa93 f2a3 	rbit	r2, r3
 8004d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d74:	4b88      	ldr	r3, [pc, #544]	; (8004f98 <HAL_RCC_OscConfig+0x934>)
 8004d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d80:	2102      	movs	r1, #2
 8004d82:	6019      	str	r1, [r3, #0]
 8004d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	fa93 f1a3 	rbit	r1, r3
 8004d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d9a:	6019      	str	r1, [r3, #0]
  return result;
 8004d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	fab3 f383 	clz	r3, r3
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	2101      	movs	r1, #1
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0a0      	beq.n	8004d04 <HAL_RCC_OscConfig+0x6a0>
 8004dc2:	e08d      	b.n	8004ee0 <HAL_RCC_OscConfig+0x87c>
 8004dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	fa93 f2a3 	rbit	r2, r3
 8004dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004de6:	601a      	str	r2, [r3, #0]
  return result;
 8004de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004df0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df2:	fab3 f383 	clz	r3, r3
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b68      	ldr	r3, [pc, #416]	; (8004f9c <HAL_RCC_OscConfig+0x938>)
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	461a      	mov	r2, r3
 8004e02:	2300      	movs	r3, #0
 8004e04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e06:	f7fd fffd 	bl	8002e04 <HAL_GetTick>
 8004e0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e10:	f7fd fff8 	bl	8002e04 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d902      	bls.n	8004e26 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	f000 bc55 	b.w	80056d0 <HAL_RCC_OscConfig+0x106c>
 8004e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e2e:	2202      	movs	r2, #2
 8004e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	fa93 f2a3 	rbit	r2, r3
 8004e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e52:	2202      	movs	r2, #2
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	fa93 f2a3 	rbit	r2, r3
 8004e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e76:	2202      	movs	r2, #2
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	fa93 f2a3 	rbit	r2, r3
 8004e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004e90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e92:	4b41      	ldr	r3, [pc, #260]	; (8004f98 <HAL_RCC_OscConfig+0x934>)
 8004e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004e9e:	2102      	movs	r1, #2
 8004ea0:	6019      	str	r1, [r3, #0]
 8004ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	fa93 f1a3 	rbit	r1, r3
 8004eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004eb8:	6019      	str	r1, [r3, #0]
  return result;
 8004eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ebe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	fab3 f383 	clz	r3, r3
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d197      	bne.n	8004e10 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 81a1 	beq.w	8005238 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efc:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <HAL_RCC_OscConfig+0x934>)
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d116      	bne.n	8004f36 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f08:	4b23      	ldr	r3, [pc, #140]	; (8004f98 <HAL_RCC_OscConfig+0x934>)
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	4a22      	ldr	r2, [pc, #136]	; (8004f98 <HAL_RCC_OscConfig+0x934>)
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f12:	61d3      	str	r3, [r2, #28]
 8004f14:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <HAL_RCC_OscConfig+0x934>)
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f20:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004f2e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f36:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <HAL_RCC_OscConfig+0x93c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d11a      	bne.n	8004f78 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f42:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <HAL_RCC_OscConfig+0x93c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <HAL_RCC_OscConfig+0x93c>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f4e:	f7fd ff59 	bl	8002e04 <HAL_GetTick>
 8004f52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f56:	e009      	b.n	8004f6c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f58:	f7fd ff54 	bl	8002e04 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b64      	cmp	r3, #100	; 0x64
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e3b1      	b.n	80056d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <HAL_RCC_OscConfig+0x93c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0ef      	beq.n	8004f58 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d10d      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x940>
 8004f88:	4b03      	ldr	r3, [pc, #12]	; (8004f98 <HAL_RCC_OscConfig+0x934>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4a02      	ldr	r2, [pc, #8]	; (8004f98 <HAL_RCC_OscConfig+0x934>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6213      	str	r3, [r2, #32]
 8004f94:	e03c      	b.n	8005010 <HAL_RCC_OscConfig+0x9ac>
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	10908120 	.word	0x10908120
 8004fa0:	40007000 	.word	0x40007000
 8004fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10c      	bne.n	8004fce <HAL_RCC_OscConfig+0x96a>
 8004fb4:	4bc1      	ldr	r3, [pc, #772]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	4ac0      	ldr	r2, [pc, #768]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	6213      	str	r3, [r2, #32]
 8004fc0:	4bbe      	ldr	r3, [pc, #760]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	4abd      	ldr	r2, [pc, #756]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 8004fc6:	f023 0304 	bic.w	r3, r3, #4
 8004fca:	6213      	str	r3, [r2, #32]
 8004fcc:	e020      	b.n	8005010 <HAL_RCC_OscConfig+0x9ac>
 8004fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2b05      	cmp	r3, #5
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x994>
 8004fde:	4bb7      	ldr	r3, [pc, #732]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	4ab6      	ldr	r2, [pc, #728]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 8004fe4:	f043 0304 	orr.w	r3, r3, #4
 8004fe8:	6213      	str	r3, [r2, #32]
 8004fea:	4bb4      	ldr	r3, [pc, #720]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	4ab3      	ldr	r2, [pc, #716]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 8004ff0:	f043 0301 	orr.w	r3, r3, #1
 8004ff4:	6213      	str	r3, [r2, #32]
 8004ff6:	e00b      	b.n	8005010 <HAL_RCC_OscConfig+0x9ac>
 8004ff8:	4bb0      	ldr	r3, [pc, #704]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	4aaf      	ldr	r2, [pc, #700]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	6213      	str	r3, [r2, #32]
 8005004:	4bad      	ldr	r3, [pc, #692]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	4aac      	ldr	r2, [pc, #688]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 800500a:	f023 0304 	bic.w	r3, r3, #4
 800500e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005014:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8081 	beq.w	8005124 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005022:	f7fd feef 	bl	8002e04 <HAL_GetTick>
 8005026:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502a:	e00b      	b.n	8005044 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502c:	f7fd feea 	bl	8002e04 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	; 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e345      	b.n	80056d0 <HAL_RCC_OscConfig+0x106c>
 8005044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005048:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800504c:	2202      	movs	r2, #2
 800504e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005054:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	fa93 f2a3 	rbit	r2, r3
 800505e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005062:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005070:	2202      	movs	r2, #2
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005078:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	fa93 f2a3 	rbit	r2, r3
 8005082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005086:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800508a:	601a      	str	r2, [r3, #0]
  return result;
 800508c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005090:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005094:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005096:	fab3 f383 	clz	r3, r3
 800509a:	b2db      	uxtb	r3, r3
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f043 0302 	orr.w	r3, r3, #2
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d102      	bne.n	80050b0 <HAL_RCC_OscConfig+0xa4c>
 80050aa:	4b84      	ldr	r3, [pc, #528]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	e013      	b.n	80050d8 <HAL_RCC_OscConfig+0xa74>
 80050b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80050b8:	2202      	movs	r2, #2
 80050ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	fa93 f2a3 	rbit	r2, r3
 80050ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	4b79      	ldr	r3, [pc, #484]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80050e0:	2102      	movs	r1, #2
 80050e2:	6011      	str	r1, [r2, #0]
 80050e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	fa92 f1a2 	rbit	r1, r2
 80050f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80050fa:	6011      	str	r1, [r2, #0]
  return result;
 80050fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005100:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	fab2 f282 	clz	r2, r2
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	f002 021f 	and.w	r2, r2, #31
 8005116:	2101      	movs	r1, #1
 8005118:	fa01 f202 	lsl.w	r2, r1, r2
 800511c:	4013      	ands	r3, r2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d084      	beq.n	800502c <HAL_RCC_OscConfig+0x9c8>
 8005122:	e07f      	b.n	8005224 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005124:	f7fd fe6e 	bl	8002e04 <HAL_GetTick>
 8005128:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800512c:	e00b      	b.n	8005146 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512e:	f7fd fe69 	bl	8002e04 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	f241 3288 	movw	r2, #5000	; 0x1388
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e2c4      	b.n	80056d0 <HAL_RCC_OscConfig+0x106c>
 8005146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800514a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800514e:	2202      	movs	r2, #2
 8005150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005156:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	fa93 f2a3 	rbit	r2, r3
 8005160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005164:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005172:	2202      	movs	r2, #2
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	fa93 f2a3 	rbit	r2, r3
 8005184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005188:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800518c:	601a      	str	r2, [r3, #0]
  return result;
 800518e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005192:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005196:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005198:	fab3 f383 	clz	r3, r3
 800519c:	b2db      	uxtb	r3, r3
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	f043 0302 	orr.w	r3, r3, #2
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d102      	bne.n	80051b2 <HAL_RCC_OscConfig+0xb4e>
 80051ac:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	e013      	b.n	80051da <HAL_RCC_OscConfig+0xb76>
 80051b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80051ba:	2202      	movs	r2, #2
 80051bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	fa93 f2a3 	rbit	r2, r3
 80051cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	4b39      	ldr	r3, [pc, #228]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80051e2:	2102      	movs	r1, #2
 80051e4:	6011      	str	r1, [r2, #0]
 80051e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	fa92 f1a2 	rbit	r1, r2
 80051f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80051fc:	6011      	str	r1, [r2, #0]
  return result;
 80051fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005202:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	fab2 f282 	clz	r2, r2
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	f002 021f 	and.w	r2, r2, #31
 8005218:	2101      	movs	r1, #1
 800521a:	fa01 f202 	lsl.w	r2, r1, r2
 800521e:	4013      	ands	r3, r2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d184      	bne.n	800512e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005224:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005228:	2b01      	cmp	r3, #1
 800522a:	d105      	bne.n	8005238 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800522c:	4b23      	ldr	r3, [pc, #140]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 8005232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005236:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800523c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8242 	beq.w	80056ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800524a:	4b1c      	ldr	r3, [pc, #112]	; (80052bc <HAL_RCC_OscConfig+0xc58>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	2b08      	cmp	r3, #8
 8005254:	f000 8213 	beq.w	800567e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	2b02      	cmp	r3, #2
 8005266:	f040 8162 	bne.w	800552e <HAL_RCC_OscConfig+0xeca>
 800526a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800526e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005272:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	fa93 f2a3 	rbit	r2, r3
 8005286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800528e:	601a      	str	r2, [r3, #0]
  return result;
 8005290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005294:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005298:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529a:	fab3 f383 	clz	r3, r3
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80052a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	461a      	mov	r2, r3
 80052ac:	2300      	movs	r3, #0
 80052ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b0:	f7fd fda8 	bl	8002e04 <HAL_GetTick>
 80052b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052b8:	e00c      	b.n	80052d4 <HAL_RCC_OscConfig+0xc70>
 80052ba:	bf00      	nop
 80052bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fd fda0 	bl	8002e04 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e1fd      	b.n	80056d0 <HAL_RCC_OscConfig+0x106c>
 80052d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80052dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	fa93 f2a3 	rbit	r2, r3
 80052f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80052f8:	601a      	str	r2, [r3, #0]
  return result;
 80052fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005302:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005304:	fab3 f383 	clz	r3, r3
 8005308:	b2db      	uxtb	r3, r3
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f043 0301 	orr.w	r3, r3, #1
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	d102      	bne.n	800531e <HAL_RCC_OscConfig+0xcba>
 8005318:	4bb0      	ldr	r3, [pc, #704]	; (80055dc <HAL_RCC_OscConfig+0xf78>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	e027      	b.n	800536e <HAL_RCC_OscConfig+0xd0a>
 800531e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005322:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005326:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800532a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005330:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	fa93 f2a3 	rbit	r2, r3
 800533a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800533e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005348:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800534c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005356:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	fa93 f2a3 	rbit	r2, r3
 8005360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005364:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	4b9c      	ldr	r3, [pc, #624]	; (80055dc <HAL_RCC_OscConfig+0xf78>)
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005372:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005376:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800537a:	6011      	str	r1, [r2, #0]
 800537c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005380:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	fa92 f1a2 	rbit	r1, r2
 800538a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800538e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005392:	6011      	str	r1, [r2, #0]
  return result;
 8005394:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005398:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	fab2 f282 	clz	r2, r2
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	f042 0220 	orr.w	r2, r2, #32
 80053a8:	b2d2      	uxtb	r2, r2
 80053aa:	f002 021f 	and.w	r2, r2, #31
 80053ae:	2101      	movs	r1, #1
 80053b0:	fa01 f202 	lsl.w	r2, r1, r2
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d182      	bne.n	80052c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053ba:	4b88      	ldr	r3, [pc, #544]	; (80055dc <HAL_RCC_OscConfig+0xf78>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80053ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	430b      	orrs	r3, r1
 80053dc:	497f      	ldr	r1, [pc, #508]	; (80055dc <HAL_RCC_OscConfig+0xf78>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	604b      	str	r3, [r1, #4]
 80053e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80053ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	fa93 f2a3 	rbit	r2, r3
 80053fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005402:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005406:	601a      	str	r2, [r3, #0]
  return result;
 8005408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005410:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005412:	fab3 f383 	clz	r3, r3
 8005416:	b2db      	uxtb	r3, r3
 8005418:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800541c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	461a      	mov	r2, r3
 8005424:	2301      	movs	r3, #1
 8005426:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005428:	f7fd fcec 	bl	8002e04 <HAL_GetTick>
 800542c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005430:	e009      	b.n	8005446 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005432:	f7fd fce7 	bl	8002e04 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e144      	b.n	80056d0 <HAL_RCC_OscConfig+0x106c>
 8005446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800544e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005458:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	fa93 f2a3 	rbit	r2, r3
 8005462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005466:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800546a:	601a      	str	r2, [r3, #0]
  return result;
 800546c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005470:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005474:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005476:	fab3 f383 	clz	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b01      	cmp	r3, #1
 8005488:	d102      	bne.n	8005490 <HAL_RCC_OscConfig+0xe2c>
 800548a:	4b54      	ldr	r3, [pc, #336]	; (80055dc <HAL_RCC_OscConfig+0xf78>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	e027      	b.n	80054e0 <HAL_RCC_OscConfig+0xe7c>
 8005490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005494:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800549c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	fa93 f2a3 	rbit	r2, r3
 80054ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80054be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	fa93 f2a3 	rbit	r2, r3
 80054d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	4b3f      	ldr	r3, [pc, #252]	; (80055dc <HAL_RCC_OscConfig+0xf78>)
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054e4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80054e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054ec:	6011      	str	r1, [r2, #0]
 80054ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054f2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	fa92 f1a2 	rbit	r1, r2
 80054fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005500:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005504:	6011      	str	r1, [r2, #0]
  return result;
 8005506:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800550a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	fab2 f282 	clz	r2, r2
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	f042 0220 	orr.w	r2, r2, #32
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	f002 021f 	and.w	r2, r2, #31
 8005520:	2101      	movs	r1, #1
 8005522:	fa01 f202 	lsl.w	r2, r1, r2
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d082      	beq.n	8005432 <HAL_RCC_OscConfig+0xdce>
 800552c:	e0cf      	b.n	80056ce <HAL_RCC_OscConfig+0x106a>
 800552e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005532:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005536:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800553a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005540:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	fa93 f2a3 	rbit	r2, r3
 800554a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005552:	601a      	str	r2, [r3, #0]
  return result;
 8005554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005558:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800555c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800555e:	fab3 f383 	clz	r3, r3
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005568:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	461a      	mov	r2, r3
 8005570:	2300      	movs	r3, #0
 8005572:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fd fc46 	bl	8002e04 <HAL_GetTick>
 8005578:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800557c:	e009      	b.n	8005592 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557e:	f7fd fc41 	bl	8002e04 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e09e      	b.n	80056d0 <HAL_RCC_OscConfig+0x106c>
 8005592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005596:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800559a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800559e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	fa93 f2a3 	rbit	r2, r3
 80055ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80055b6:	601a      	str	r2, [r3, #0]
  return result;
 80055b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80055c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055c2:	fab3 f383 	clz	r3, r3
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d104      	bne.n	80055e0 <HAL_RCC_OscConfig+0xf7c>
 80055d6:	4b01      	ldr	r3, [pc, #4]	; (80055dc <HAL_RCC_OscConfig+0xf78>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	e029      	b.n	8005630 <HAL_RCC_OscConfig+0xfcc>
 80055dc:	40021000 	.word	0x40021000
 80055e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80055e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	fa93 f2a3 	rbit	r2, r3
 80055fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005600:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800560a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800560e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005618:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	fa93 f2a3 	rbit	r2, r3
 8005622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005626:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <HAL_RCC_OscConfig+0x1078>)
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005634:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005638:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800563c:	6011      	str	r1, [r2, #0]
 800563e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005642:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	fa92 f1a2 	rbit	r1, r2
 800564c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005650:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005654:	6011      	str	r1, [r2, #0]
  return result;
 8005656:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800565a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	fab2 f282 	clz	r2, r2
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	f042 0220 	orr.w	r2, r2, #32
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	f002 021f 	and.w	r2, r2, #31
 8005670:	2101      	movs	r1, #1
 8005672:	fa01 f202 	lsl.w	r2, r1, r2
 8005676:	4013      	ands	r3, r2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d180      	bne.n	800557e <HAL_RCC_OscConfig+0xf1a>
 800567c:	e027      	b.n	80056ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800567e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005682:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e01e      	b.n	80056d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005692:	4b12      	ldr	r3, [pc, #72]	; (80056dc <HAL_RCC_OscConfig+0x1078>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800569a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800569e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80056a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d10b      	bne.n	80056ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80056b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80056b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80056ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d001      	beq.n	80056ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40021000 	.word	0x40021000

080056e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b09e      	sub	sp, #120	; 0x78
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e162      	b.n	80059be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056f8:	4b90      	ldr	r3, [pc, #576]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d910      	bls.n	8005728 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005706:	4b8d      	ldr	r3, [pc, #564]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 0207 	bic.w	r2, r3, #7
 800570e:	498b      	ldr	r1, [pc, #556]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	4313      	orrs	r3, r2
 8005714:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005716:	4b89      	ldr	r3, [pc, #548]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d001      	beq.n	8005728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e14a      	b.n	80059be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005734:	4b82      	ldr	r3, [pc, #520]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	497f      	ldr	r1, [pc, #508]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005742:	4313      	orrs	r3, r2
 8005744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80dc 	beq.w	800590c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d13c      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xf6>
 800575c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005760:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005764:	fa93 f3a3 	rbit	r3, r3
 8005768:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800576a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576c:	fab3 f383 	clz	r3, r3
 8005770:	b2db      	uxtb	r3, r3
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d102      	bne.n	8005786 <HAL_RCC_ClockConfig+0xa6>
 8005780:	4b6f      	ldr	r3, [pc, #444]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	e00f      	b.n	80057a6 <HAL_RCC_ClockConfig+0xc6>
 8005786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800578a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800578e:	fa93 f3a3 	rbit	r3, r3
 8005792:	667b      	str	r3, [r7, #100]	; 0x64
 8005794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005798:	663b      	str	r3, [r7, #96]	; 0x60
 800579a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800579c:	fa93 f3a3 	rbit	r3, r3
 80057a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057a2:	4b67      	ldr	r3, [pc, #412]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80057ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057ae:	fa92 f2a2 	rbit	r2, r2
 80057b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80057b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057b6:	fab2 f282 	clz	r2, r2
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	f042 0220 	orr.w	r2, r2, #32
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	f002 021f 	and.w	r2, r2, #31
 80057c6:	2101      	movs	r1, #1
 80057c8:	fa01 f202 	lsl.w	r2, r1, r2
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d17b      	bne.n	80058ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e0f3      	b.n	80059be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d13c      	bne.n	8005858 <HAL_RCC_ClockConfig+0x178>
 80057de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057e6:	fa93 f3a3 	rbit	r3, r3
 80057ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80057ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ee:	fab3 f383 	clz	r3, r3
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	095b      	lsrs	r3, r3, #5
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d102      	bne.n	8005808 <HAL_RCC_ClockConfig+0x128>
 8005802:	4b4f      	ldr	r3, [pc, #316]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	e00f      	b.n	8005828 <HAL_RCC_ClockConfig+0x148>
 8005808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800580c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005810:	fa93 f3a3 	rbit	r3, r3
 8005814:	647b      	str	r3, [r7, #68]	; 0x44
 8005816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800581a:	643b      	str	r3, [r7, #64]	; 0x40
 800581c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581e:	fa93 f3a3 	rbit	r3, r3
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005824:	4b46      	ldr	r3, [pc, #280]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800582c:	63ba      	str	r2, [r7, #56]	; 0x38
 800582e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005830:	fa92 f2a2 	rbit	r2, r2
 8005834:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005838:	fab2 f282 	clz	r2, r2
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	f042 0220 	orr.w	r2, r2, #32
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	f002 021f 	and.w	r2, r2, #31
 8005848:	2101      	movs	r1, #1
 800584a:	fa01 f202 	lsl.w	r2, r1, r2
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d13a      	bne.n	80058ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0b2      	b.n	80059be <HAL_RCC_ClockConfig+0x2de>
 8005858:	2302      	movs	r3, #2
 800585a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	fa93 f3a3 	rbit	r3, r3
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005866:	fab3 f383 	clz	r3, r3
 800586a:	b2db      	uxtb	r3, r3
 800586c:	095b      	lsrs	r3, r3, #5
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	d102      	bne.n	8005880 <HAL_RCC_ClockConfig+0x1a0>
 800587a:	4b31      	ldr	r3, [pc, #196]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	e00d      	b.n	800589c <HAL_RCC_ClockConfig+0x1bc>
 8005880:	2302      	movs	r3, #2
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	fa93 f3a3 	rbit	r3, r3
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
 800588c:	2302      	movs	r3, #2
 800588e:	623b      	str	r3, [r7, #32]
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	fa93 f3a3 	rbit	r3, r3
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	4b29      	ldr	r3, [pc, #164]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	2202      	movs	r2, #2
 800589e:	61ba      	str	r2, [r7, #24]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	fa92 f2a2 	rbit	r2, r2
 80058a6:	617a      	str	r2, [r7, #20]
  return result;
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	fab2 f282 	clz	r2, r2
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	f042 0220 	orr.w	r2, r2, #32
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	f002 021f 	and.w	r2, r2, #31
 80058ba:	2101      	movs	r1, #1
 80058bc:	fa01 f202 	lsl.w	r2, r1, r2
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e079      	b.n	80059be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ca:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f023 0203 	bic.w	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	491a      	ldr	r1, [pc, #104]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058dc:	f7fd fa92 	bl	8002e04 <HAL_GetTick>
 80058e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e2:	e00a      	b.n	80058fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e4:	f7fd fa8e 	bl	8002e04 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e061      	b.n	80059be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <HAL_RCC_ClockConfig+0x260>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f003 020c 	and.w	r2, r3, #12
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	429a      	cmp	r2, r3
 800590a:	d1eb      	bne.n	80058e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800590c:	4b0b      	ldr	r3, [pc, #44]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d214      	bcs.n	8005944 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591a:	4b08      	ldr	r3, [pc, #32]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f023 0207 	bic.w	r2, r3, #7
 8005922:	4906      	ldr	r1, [pc, #24]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	4313      	orrs	r3, r2
 8005928:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800592a:	4b04      	ldr	r3, [pc, #16]	; (800593c <HAL_RCC_ClockConfig+0x25c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d005      	beq.n	8005944 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e040      	b.n	80059be <HAL_RCC_ClockConfig+0x2de>
 800593c:	40022000 	.word	0x40022000
 8005940:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005950:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <HAL_RCC_ClockConfig+0x2e8>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	491a      	ldr	r1, [pc, #104]	; (80059c8 <HAL_RCC_ClockConfig+0x2e8>)
 800595e:	4313      	orrs	r3, r2
 8005960:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800596e:	4b16      	ldr	r3, [pc, #88]	; (80059c8 <HAL_RCC_ClockConfig+0x2e8>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4912      	ldr	r1, [pc, #72]	; (80059c8 <HAL_RCC_ClockConfig+0x2e8>)
 800597e:	4313      	orrs	r3, r2
 8005980:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005982:	f000 f829 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8005986:	4601      	mov	r1, r0
 8005988:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <HAL_RCC_ClockConfig+0x2e8>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005990:	22f0      	movs	r2, #240	; 0xf0
 8005992:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	fa92 f2a2 	rbit	r2, r2
 800599a:	60fa      	str	r2, [r7, #12]
  return result;
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	fab2 f282 	clz	r2, r2
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	40d3      	lsrs	r3, r2
 80059a6:	4a09      	ldr	r2, [pc, #36]	; (80059cc <HAL_RCC_ClockConfig+0x2ec>)
 80059a8:	5cd3      	ldrb	r3, [r2, r3]
 80059aa:	fa21 f303 	lsr.w	r3, r1, r3
 80059ae:	4a08      	ldr	r2, [pc, #32]	; (80059d0 <HAL_RCC_ClockConfig+0x2f0>)
 80059b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80059b2:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <HAL_RCC_ClockConfig+0x2f4>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fd f9e0 	bl	8002d7c <HAL_InitTick>
  
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3778      	adds	r7, #120	; 0x78
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40021000 	.word	0x40021000
 80059cc:	080099cc 	.word	0x080099cc
 80059d0:	20000000 	.word	0x20000000
 80059d4:	20000004 	.word	0x20000004

080059d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	b08b      	sub	sp, #44	; 0x2c
 80059dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	2300      	movs	r3, #0
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	2300      	movs	r3, #0
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80059f2:	4b29      	ldr	r3, [pc, #164]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d002      	beq.n	8005a08 <HAL_RCC_GetSysClockFreq+0x30>
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d003      	beq.n	8005a0e <HAL_RCC_GetSysClockFreq+0x36>
 8005a06:	e03c      	b.n	8005a82 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a08:	4b24      	ldr	r3, [pc, #144]	; (8005a9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a0a:	623b      	str	r3, [r7, #32]
      break;
 8005a0c:	e03c      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005a14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005a18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	fa92 f2a2 	rbit	r2, r2
 8005a20:	607a      	str	r2, [r7, #4]
  return result;
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	fab2 f282 	clz	r2, r2
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	40d3      	lsrs	r3, r2
 8005a2c:	4a1c      	ldr	r2, [pc, #112]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a2e:	5cd3      	ldrb	r3, [r2, r3]
 8005a30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005a32:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	220f      	movs	r2, #15
 8005a3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	fa92 f2a2 	rbit	r2, r2
 8005a44:	60fa      	str	r2, [r7, #12]
  return result;
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	fab2 f282 	clz	r2, r2
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	40d3      	lsrs	r3, r2
 8005a50:	4a14      	ldr	r2, [pc, #80]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a52:	5cd3      	ldrb	r3, [r2, r3]
 8005a54:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a60:	4a0e      	ldr	r2, [pc, #56]	; (8005a9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a70:	e004      	b.n	8005a7c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	4a0c      	ldr	r2, [pc, #48]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a76:	fb02 f303 	mul.w	r3, r2, r3
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	623b      	str	r3, [r7, #32]
      break;
 8005a80:	e002      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a84:	623b      	str	r3, [r7, #32]
      break;
 8005a86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a88:	6a3b      	ldr	r3, [r7, #32]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	372c      	adds	r7, #44	; 0x2c
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	007a1200 	.word	0x007a1200
 8005aa0:	080099e4 	.word	0x080099e4
 8005aa4:	080099f4 	.word	0x080099f4
 8005aa8:	003d0900 	.word	0x003d0900

08005aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab0:	4b03      	ldr	r3, [pc, #12]	; (8005ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000000 	.word	0x20000000

08005ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005aca:	f7ff ffef 	bl	8005aac <HAL_RCC_GetHCLKFreq>
 8005ace:	4601      	mov	r1, r0
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ad8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005adc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	fa92 f2a2 	rbit	r2, r2
 8005ae4:	603a      	str	r2, [r7, #0]
  return result;
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	fab2 f282 	clz	r2, r2
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	40d3      	lsrs	r3, r2
 8005af0:	4a04      	ldr	r2, [pc, #16]	; (8005b04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005af2:	5cd3      	ldrb	r3, [r2, r3]
 8005af4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40021000 	.word	0x40021000
 8005b04:	080099dc 	.word	0x080099dc

08005b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005b0e:	f7ff ffcd 	bl	8005aac <HAL_RCC_GetHCLKFreq>
 8005b12:	4601      	mov	r1, r0
 8005b14:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005b1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005b20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	fa92 f2a2 	rbit	r2, r2
 8005b28:	603a      	str	r2, [r7, #0]
  return result;
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	fab2 f282 	clz	r2, r2
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	40d3      	lsrs	r3, r2
 8005b34:	4a04      	ldr	r2, [pc, #16]	; (8005b48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005b36:	5cd3      	ldrb	r3, [r2, r3]
 8005b38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40021000 	.word	0x40021000
 8005b48:	080099dc 	.word	0x080099dc

08005b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b092      	sub	sp, #72	; 0x48
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 80cd 	beq.w	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b70:	4b86      	ldr	r3, [pc, #536]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10e      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b7c:	4b83      	ldr	r3, [pc, #524]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	4a82      	ldr	r2, [pc, #520]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b86:	61d3      	str	r3, [r2, #28]
 8005b88:	4b80      	ldr	r3, [pc, #512]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b94:	2301      	movs	r3, #1
 8005b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9a:	4b7d      	ldr	r3, [pc, #500]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d118      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ba6:	4b7a      	ldr	r3, [pc, #488]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a79      	ldr	r2, [pc, #484]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb2:	f7fd f927 	bl	8002e04 <HAL_GetTick>
 8005bb6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb8:	e008      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bba:	f7fd f923 	bl	8002e04 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b64      	cmp	r3, #100	; 0x64
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e0db      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bcc:	4b70      	ldr	r3, [pc, #448]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0f0      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bd8:	4b6c      	ldr	r3, [pc, #432]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d07d      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d076      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bf6:	4b65      	ldr	r3, [pc, #404]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c04:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	fa93 f3a3 	rbit	r3, r3
 8005c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c10:	fab3 f383 	clz	r3, r3
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	4b5e      	ldr	r3, [pc, #376]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	461a      	mov	r2, r3
 8005c20:	2301      	movs	r3, #1
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2c:	fa93 f3a3 	rbit	r3, r3
 8005c30:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c34:	fab3 f383 	clz	r3, r3
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	4b55      	ldr	r3, [pc, #340]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	461a      	mov	r2, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c48:	4a50      	ldr	r2, [pc, #320]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d045      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c58:	f7fd f8d4 	bl	8002e04 <HAL_GetTick>
 8005c5c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5e:	e00a      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c60:	f7fd f8d0 	bl	8002e04 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e086      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005c76:	2302      	movs	r3, #2
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	fa93 f3a3 	rbit	r3, r3
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
 8005c82:	2302      	movs	r3, #2
 8005c84:	623b      	str	r3, [r7, #32]
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	fa93 f3a3 	rbit	r3, r3
 8005c8c:	61fb      	str	r3, [r7, #28]
  return result;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c90:	fab3 f383 	clz	r3, r3
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	f043 0302 	orr.w	r3, r3, #2
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d102      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005ca4:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	e007      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005caa:	2302      	movs	r3, #2
 8005cac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	fa93 f3a3 	rbit	r3, r3
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	4b35      	ldr	r3, [pc, #212]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2202      	movs	r2, #2
 8005cbc:	613a      	str	r2, [r7, #16]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	fa92 f2a2 	rbit	r2, r2
 8005cc4:	60fa      	str	r2, [r7, #12]
  return result;
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	fab2 f282 	clz	r2, r2
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	f002 021f 	and.w	r2, r2, #31
 8005cd8:	2101      	movs	r1, #1
 8005cda:	fa01 f202 	lsl.w	r2, r1, r2
 8005cde:	4013      	ands	r3, r2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0bd      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005ce4:	4b29      	ldr	r3, [pc, #164]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4926      	ldr	r1, [pc, #152]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005cf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d105      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cfe:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	4a22      	ldr	r2, [pc, #136]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d08:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d008      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d16:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1a:	f023 0203 	bic.w	r2, r3, #3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	491a      	ldr	r1, [pc, #104]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d34:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d38:	f023 0210 	bic.w	r2, r3, #16
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4912      	ldr	r1, [pc, #72]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d52:	4b0e      	ldr	r3, [pc, #56]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	490b      	ldr	r1, [pc, #44]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d008      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005d70:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	4903      	ldr	r1, [pc, #12]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3748      	adds	r7, #72	; 0x48
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	40007000 	.word	0x40007000
 8005d94:	10908100 	.word	0x10908100

08005d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e049      	b.n	8005e3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fc fd6e 	bl	80028a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f000 fcc2 	bl	8006760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d001      	beq.n	8005e60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e038      	b.n	8005ed2 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1c      	ldr	r2, [pc, #112]	; (8005ee0 <HAL_TIM_Base_Start+0x98>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00e      	beq.n	8005e90 <HAL_TIM_Base_Start+0x48>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7a:	d009      	beq.n	8005e90 <HAL_TIM_Base_Start+0x48>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a18      	ldr	r2, [pc, #96]	; (8005ee4 <HAL_TIM_Base_Start+0x9c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d004      	beq.n	8005e90 <HAL_TIM_Base_Start+0x48>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <HAL_TIM_Base_Start+0xa0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d115      	bne.n	8005ebc <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	4b15      	ldr	r3, [pc, #84]	; (8005eec <HAL_TIM_Base_Start+0xa4>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d015      	beq.n	8005ece <HAL_TIM_Base_Start+0x86>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea8:	d011      	beq.n	8005ece <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0201 	orr.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eba:	e008      	b.n	8005ece <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	e000      	b.n	8005ed0 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ece:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	00010007 	.word	0x00010007

08005ef0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e049      	b.n	8005f96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f841 	bl	8005f9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4610      	mov	r0, r2
 8005f30:	f000 fc16 	bl	8006760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
	...

08005fb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d109      	bne.n	8005fd8 <HAL_TIM_PWM_Start+0x24>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	bf14      	ite	ne
 8005fd0:	2301      	movne	r3, #1
 8005fd2:	2300      	moveq	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	e03c      	b.n	8006052 <HAL_TIM_PWM_Start+0x9e>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d109      	bne.n	8005ff2 <HAL_TIM_PWM_Start+0x3e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	bf14      	ite	ne
 8005fea:	2301      	movne	r3, #1
 8005fec:	2300      	moveq	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	e02f      	b.n	8006052 <HAL_TIM_PWM_Start+0x9e>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d109      	bne.n	800600c <HAL_TIM_PWM_Start+0x58>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	bf14      	ite	ne
 8006004:	2301      	movne	r3, #1
 8006006:	2300      	moveq	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	e022      	b.n	8006052 <HAL_TIM_PWM_Start+0x9e>
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b0c      	cmp	r3, #12
 8006010:	d109      	bne.n	8006026 <HAL_TIM_PWM_Start+0x72>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b01      	cmp	r3, #1
 800601c:	bf14      	ite	ne
 800601e:	2301      	movne	r3, #1
 8006020:	2300      	moveq	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	e015      	b.n	8006052 <HAL_TIM_PWM_Start+0x9e>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b10      	cmp	r3, #16
 800602a:	d109      	bne.n	8006040 <HAL_TIM_PWM_Start+0x8c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b01      	cmp	r3, #1
 8006036:	bf14      	ite	ne
 8006038:	2301      	movne	r3, #1
 800603a:	2300      	moveq	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	e008      	b.n	8006052 <HAL_TIM_PWM_Start+0x9e>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	bf14      	ite	ne
 800604c:	2301      	movne	r3, #1
 800604e:	2300      	moveq	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e088      	b.n	800616c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d104      	bne.n	800606a <HAL_TIM_PWM_Start+0xb6>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006068:	e023      	b.n	80060b2 <HAL_TIM_PWM_Start+0xfe>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b04      	cmp	r3, #4
 800606e:	d104      	bne.n	800607a <HAL_TIM_PWM_Start+0xc6>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006078:	e01b      	b.n	80060b2 <HAL_TIM_PWM_Start+0xfe>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b08      	cmp	r3, #8
 800607e:	d104      	bne.n	800608a <HAL_TIM_PWM_Start+0xd6>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006088:	e013      	b.n	80060b2 <HAL_TIM_PWM_Start+0xfe>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b0c      	cmp	r3, #12
 800608e:	d104      	bne.n	800609a <HAL_TIM_PWM_Start+0xe6>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006098:	e00b      	b.n	80060b2 <HAL_TIM_PWM_Start+0xfe>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b10      	cmp	r3, #16
 800609e:	d104      	bne.n	80060aa <HAL_TIM_PWM_Start+0xf6>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060a8:	e003      	b.n	80060b2 <HAL_TIM_PWM_Start+0xfe>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2202      	movs	r2, #2
 80060ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2201      	movs	r2, #1
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fe6e 	bl	8006d9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a2b      	ldr	r2, [pc, #172]	; (8006174 <HAL_TIM_PWM_Start+0x1c0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00e      	beq.n	80060e8 <HAL_TIM_PWM_Start+0x134>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2a      	ldr	r2, [pc, #168]	; (8006178 <HAL_TIM_PWM_Start+0x1c4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d009      	beq.n	80060e8 <HAL_TIM_PWM_Start+0x134>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a28      	ldr	r2, [pc, #160]	; (800617c <HAL_TIM_PWM_Start+0x1c8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d004      	beq.n	80060e8 <HAL_TIM_PWM_Start+0x134>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a27      	ldr	r2, [pc, #156]	; (8006180 <HAL_TIM_PWM_Start+0x1cc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d101      	bne.n	80060ec <HAL_TIM_PWM_Start+0x138>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <HAL_TIM_PWM_Start+0x13a>
 80060ec:	2300      	movs	r3, #0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006100:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1b      	ldr	r2, [pc, #108]	; (8006174 <HAL_TIM_PWM_Start+0x1c0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00e      	beq.n	800612a <HAL_TIM_PWM_Start+0x176>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006114:	d009      	beq.n	800612a <HAL_TIM_PWM_Start+0x176>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1a      	ldr	r2, [pc, #104]	; (8006184 <HAL_TIM_PWM_Start+0x1d0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <HAL_TIM_PWM_Start+0x176>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a14      	ldr	r2, [pc, #80]	; (8006178 <HAL_TIM_PWM_Start+0x1c4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d115      	bne.n	8006156 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	4b15      	ldr	r3, [pc, #84]	; (8006188 <HAL_TIM_PWM_Start+0x1d4>)
 8006132:	4013      	ands	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b06      	cmp	r3, #6
 800613a:	d015      	beq.n	8006168 <HAL_TIM_PWM_Start+0x1b4>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006142:	d011      	beq.n	8006168 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006154:	e008      	b.n	8006168 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f042 0201 	orr.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	e000      	b.n	800616a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006168:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40012c00 	.word	0x40012c00
 8006178:	40014000 	.word	0x40014000
 800617c:	40014400 	.word	0x40014400
 8006180:	40014800 	.word	0x40014800
 8006184:	40000400 	.word	0x40000400
 8006188:	00010007 	.word	0x00010007

0800618c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2200      	movs	r2, #0
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fdfc 	bl	8006d9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a3b      	ldr	r2, [pc, #236]	; (8006298 <HAL_TIM_PWM_Stop+0x10c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d00e      	beq.n	80061cc <HAL_TIM_PWM_Stop+0x40>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a3a      	ldr	r2, [pc, #232]	; (800629c <HAL_TIM_PWM_Stop+0x110>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d009      	beq.n	80061cc <HAL_TIM_PWM_Stop+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a38      	ldr	r2, [pc, #224]	; (80062a0 <HAL_TIM_PWM_Stop+0x114>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d004      	beq.n	80061cc <HAL_TIM_PWM_Stop+0x40>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a37      	ldr	r2, [pc, #220]	; (80062a4 <HAL_TIM_PWM_Stop+0x118>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d101      	bne.n	80061d0 <HAL_TIM_PWM_Stop+0x44>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <HAL_TIM_PWM_Stop+0x46>
 80061d0:	2300      	movs	r3, #0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d017      	beq.n	8006206 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6a1a      	ldr	r2, [r3, #32]
 80061dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80061e0:	4013      	ands	r3, r2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10f      	bne.n	8006206 <HAL_TIM_PWM_Stop+0x7a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6a1a      	ldr	r2, [r3, #32]
 80061ec:	f240 4344 	movw	r3, #1092	; 0x444
 80061f0:	4013      	ands	r3, r2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d107      	bne.n	8006206 <HAL_TIM_PWM_Stop+0x7a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006204:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6a1a      	ldr	r2, [r3, #32]
 800620c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006210:	4013      	ands	r3, r2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10f      	bne.n	8006236 <HAL_TIM_PWM_Stop+0xaa>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6a1a      	ldr	r2, [r3, #32]
 800621c:	f240 4344 	movw	r3, #1092	; 0x444
 8006220:	4013      	ands	r3, r2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d107      	bne.n	8006236 <HAL_TIM_PWM_Stop+0xaa>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d104      	bne.n	8006246 <HAL_TIM_PWM_Stop+0xba>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006244:	e023      	b.n	800628e <HAL_TIM_PWM_Stop+0x102>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b04      	cmp	r3, #4
 800624a:	d104      	bne.n	8006256 <HAL_TIM_PWM_Stop+0xca>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006254:	e01b      	b.n	800628e <HAL_TIM_PWM_Stop+0x102>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b08      	cmp	r3, #8
 800625a:	d104      	bne.n	8006266 <HAL_TIM_PWM_Stop+0xda>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006264:	e013      	b.n	800628e <HAL_TIM_PWM_Stop+0x102>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b0c      	cmp	r3, #12
 800626a:	d104      	bne.n	8006276 <HAL_TIM_PWM_Stop+0xea>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006274:	e00b      	b.n	800628e <HAL_TIM_PWM_Stop+0x102>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b10      	cmp	r3, #16
 800627a:	d104      	bne.n	8006286 <HAL_TIM_PWM_Stop+0xfa>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006284:	e003      	b.n	800628e <HAL_TIM_PWM_Stop+0x102>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	40012c00 	.word	0x40012c00
 800629c:	40014000 	.word	0x40014000
 80062a0:	40014400 	.word	0x40014400
 80062a4:	40014800 	.word	0x40014800

080062a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d122      	bne.n	8006304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d11b      	bne.n	8006304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0202 	mvn.w	r2, #2
 80062d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa1a 	bl	8006724 <HAL_TIM_IC_CaptureCallback>
 80062f0:	e005      	b.n	80062fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fa0c 	bl	8006710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fa1d 	bl	8006738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	2b04      	cmp	r3, #4
 8006310:	d122      	bne.n	8006358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b04      	cmp	r3, #4
 800631e:	d11b      	bne.n	8006358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f06f 0204 	mvn.w	r2, #4
 8006328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2202      	movs	r2, #2
 800632e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f9f0 	bl	8006724 <HAL_TIM_IC_CaptureCallback>
 8006344:	e005      	b.n	8006352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f9e2 	bl	8006710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f9f3 	bl	8006738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b08      	cmp	r3, #8
 8006364:	d122      	bne.n	80063ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b08      	cmp	r3, #8
 8006372:	d11b      	bne.n	80063ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0208 	mvn.w	r2, #8
 800637c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2204      	movs	r2, #4
 8006382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f9c6 	bl	8006724 <HAL_TIM_IC_CaptureCallback>
 8006398:	e005      	b.n	80063a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f9b8 	bl	8006710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f9c9 	bl	8006738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b10      	cmp	r3, #16
 80063b8:	d122      	bne.n	8006400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b10      	cmp	r3, #16
 80063c6:	d11b      	bne.n	8006400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0210 	mvn.w	r2, #16
 80063d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2208      	movs	r2, #8
 80063d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f99c 	bl	8006724 <HAL_TIM_IC_CaptureCallback>
 80063ec:	e005      	b.n	80063fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f98e 	bl	8006710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f99f 	bl	8006738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b01      	cmp	r3, #1
 800640c:	d10e      	bne.n	800642c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b01      	cmp	r3, #1
 800641a:	d107      	bne.n	800642c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0201 	mvn.w	r2, #1
 8006424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fa fb86 	bl	8000b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006436:	2b80      	cmp	r3, #128	; 0x80
 8006438:	d10e      	bne.n	8006458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006444:	2b80      	cmp	r3, #128	; 0x80
 8006446:	d107      	bne.n	8006458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fdb8 	bl	8006fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006466:	d10e      	bne.n	8006486 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006472:	2b80      	cmp	r3, #128	; 0x80
 8006474:	d107      	bne.n	8006486 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800647e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fdab 	bl	8006fdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006490:	2b40      	cmp	r3, #64	; 0x40
 8006492:	d10e      	bne.n	80064b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d107      	bne.n	80064b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f94d 	bl	800674c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d10e      	bne.n	80064de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	d107      	bne.n	80064de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f06f 0220 	mvn.w	r2, #32
 80064d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fd6b 	bl	8006fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006502:	2302      	movs	r3, #2
 8006504:	e0ff      	b.n	8006706 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b14      	cmp	r3, #20
 8006512:	f200 80f0 	bhi.w	80066f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006516:	a201      	add	r2, pc, #4	; (adr r2, 800651c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006571 	.word	0x08006571
 8006520:	080066f7 	.word	0x080066f7
 8006524:	080066f7 	.word	0x080066f7
 8006528:	080066f7 	.word	0x080066f7
 800652c:	080065b1 	.word	0x080065b1
 8006530:	080066f7 	.word	0x080066f7
 8006534:	080066f7 	.word	0x080066f7
 8006538:	080066f7 	.word	0x080066f7
 800653c:	080065f3 	.word	0x080065f3
 8006540:	080066f7 	.word	0x080066f7
 8006544:	080066f7 	.word	0x080066f7
 8006548:	080066f7 	.word	0x080066f7
 800654c:	08006633 	.word	0x08006633
 8006550:	080066f7 	.word	0x080066f7
 8006554:	080066f7 	.word	0x080066f7
 8006558:	080066f7 	.word	0x080066f7
 800655c:	08006675 	.word	0x08006675
 8006560:	080066f7 	.word	0x080066f7
 8006564:	080066f7 	.word	0x080066f7
 8006568:	080066f7 	.word	0x080066f7
 800656c:	080066b5 	.word	0x080066b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 f96a 	bl	8006850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0208 	orr.w	r2, r2, #8
 800658a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0204 	bic.w	r2, r2, #4
 800659a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6999      	ldr	r1, [r3, #24]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	619a      	str	r2, [r3, #24]
      break;
 80065ae:	e0a5      	b.n	80066fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 f9d0 	bl	800695c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699a      	ldr	r2, [r3, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6999      	ldr	r1, [r3, #24]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	021a      	lsls	r2, r3, #8
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	619a      	str	r2, [r3, #24]
      break;
 80065f0:	e084      	b.n	80066fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fa2f 	bl	8006a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0208 	orr.w	r2, r2, #8
 800660c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69da      	ldr	r2, [r3, #28]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0204 	bic.w	r2, r2, #4
 800661c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69d9      	ldr	r1, [r3, #28]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	61da      	str	r2, [r3, #28]
      break;
 8006630:	e064      	b.n	80066fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fa8d 	bl	8006b58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800664c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69d9      	ldr	r1, [r3, #28]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	021a      	lsls	r2, r3, #8
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	61da      	str	r2, [r3, #28]
      break;
 8006672:	e043      	b.n	80066fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fad0 	bl	8006c20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0208 	orr.w	r2, r2, #8
 800668e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0204 	bic.w	r2, r2, #4
 800669e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066b2:	e023      	b.n	80066fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 fb0e 	bl	8006cdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	021a      	lsls	r2, r3, #8
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066f4:	e002      	b.n	80066fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	75fb      	strb	r3, [r7, #23]
      break;
 80066fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006704:	7dfb      	ldrb	r3, [r7, #23]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop

08006710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a32      	ldr	r2, [pc, #200]	; (800683c <TIM_Base_SetConfig+0xdc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d007      	beq.n	8006788 <TIM_Base_SetConfig+0x28>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677e:	d003      	beq.n	8006788 <TIM_Base_SetConfig+0x28>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a2f      	ldr	r2, [pc, #188]	; (8006840 <TIM_Base_SetConfig+0xe0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d108      	bne.n	800679a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a27      	ldr	r2, [pc, #156]	; (800683c <TIM_Base_SetConfig+0xdc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d013      	beq.n	80067ca <TIM_Base_SetConfig+0x6a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a8:	d00f      	beq.n	80067ca <TIM_Base_SetConfig+0x6a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a24      	ldr	r2, [pc, #144]	; (8006840 <TIM_Base_SetConfig+0xe0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00b      	beq.n	80067ca <TIM_Base_SetConfig+0x6a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a23      	ldr	r2, [pc, #140]	; (8006844 <TIM_Base_SetConfig+0xe4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d007      	beq.n	80067ca <TIM_Base_SetConfig+0x6a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a22      	ldr	r2, [pc, #136]	; (8006848 <TIM_Base_SetConfig+0xe8>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <TIM_Base_SetConfig+0x6a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a21      	ldr	r2, [pc, #132]	; (800684c <TIM_Base_SetConfig+0xec>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d108      	bne.n	80067dc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a0e      	ldr	r2, [pc, #56]	; (800683c <TIM_Base_SetConfig+0xdc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00b      	beq.n	8006820 <TIM_Base_SetConfig+0xc0>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a0e      	ldr	r2, [pc, #56]	; (8006844 <TIM_Base_SetConfig+0xe4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d007      	beq.n	8006820 <TIM_Base_SetConfig+0xc0>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a0d      	ldr	r2, [pc, #52]	; (8006848 <TIM_Base_SetConfig+0xe8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_Base_SetConfig+0xc0>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a0c      	ldr	r2, [pc, #48]	; (800684c <TIM_Base_SetConfig+0xec>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d103      	bne.n	8006828 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	615a      	str	r2, [r3, #20]
}
 800682e:	bf00      	nop
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40012c00 	.word	0x40012c00
 8006840:	40000400 	.word	0x40000400
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800

08006850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	f023 0201 	bic.w	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800687e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0303 	bic.w	r3, r3, #3
 800688a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f023 0302 	bic.w	r3, r3, #2
 800689c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a28      	ldr	r2, [pc, #160]	; (800694c <TIM_OC1_SetConfig+0xfc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00b      	beq.n	80068c8 <TIM_OC1_SetConfig+0x78>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a27      	ldr	r2, [pc, #156]	; (8006950 <TIM_OC1_SetConfig+0x100>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d007      	beq.n	80068c8 <TIM_OC1_SetConfig+0x78>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a26      	ldr	r2, [pc, #152]	; (8006954 <TIM_OC1_SetConfig+0x104>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC1_SetConfig+0x78>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a25      	ldr	r2, [pc, #148]	; (8006958 <TIM_OC1_SetConfig+0x108>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d10c      	bne.n	80068e2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f023 0308 	bic.w	r3, r3, #8
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f023 0304 	bic.w	r3, r3, #4
 80068e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a19      	ldr	r2, [pc, #100]	; (800694c <TIM_OC1_SetConfig+0xfc>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00b      	beq.n	8006902 <TIM_OC1_SetConfig+0xb2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a18      	ldr	r2, [pc, #96]	; (8006950 <TIM_OC1_SetConfig+0x100>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d007      	beq.n	8006902 <TIM_OC1_SetConfig+0xb2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a17      	ldr	r2, [pc, #92]	; (8006954 <TIM_OC1_SetConfig+0x104>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_OC1_SetConfig+0xb2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a16      	ldr	r2, [pc, #88]	; (8006958 <TIM_OC1_SetConfig+0x108>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d111      	bne.n	8006926 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	621a      	str	r2, [r3, #32]
}
 8006940:	bf00      	nop
 8006942:	371c      	adds	r7, #28
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40014000 	.word	0x40014000
 8006954:	40014400 	.word	0x40014400
 8006958:	40014800 	.word	0x40014800

0800695c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	f023 0210 	bic.w	r2, r3, #16
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 0320 	bic.w	r3, r3, #32
 80069aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a24      	ldr	r2, [pc, #144]	; (8006a4c <TIM_OC2_SetConfig+0xf0>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d10d      	bne.n	80069dc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a1b      	ldr	r2, [pc, #108]	; (8006a4c <TIM_OC2_SetConfig+0xf0>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00b      	beq.n	80069fc <TIM_OC2_SetConfig+0xa0>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a1a      	ldr	r2, [pc, #104]	; (8006a50 <TIM_OC2_SetConfig+0xf4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <TIM_OC2_SetConfig+0xa0>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a19      	ldr	r2, [pc, #100]	; (8006a54 <TIM_OC2_SetConfig+0xf8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_OC2_SetConfig+0xa0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a18      	ldr	r2, [pc, #96]	; (8006a58 <TIM_OC2_SetConfig+0xfc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d113      	bne.n	8006a24 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a02:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a0a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40012c00 	.word	0x40012c00
 8006a50:	40014000 	.word	0x40014000
 8006a54:	40014400 	.word	0x40014400
 8006a58:	40014800 	.word	0x40014800

08006a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0303 	bic.w	r3, r3, #3
 8006a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	021b      	lsls	r3, r3, #8
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a23      	ldr	r2, [pc, #140]	; (8006b48 <TIM_OC3_SetConfig+0xec>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d10d      	bne.n	8006ada <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ad8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a1a      	ldr	r2, [pc, #104]	; (8006b48 <TIM_OC3_SetConfig+0xec>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00b      	beq.n	8006afa <TIM_OC3_SetConfig+0x9e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a19      	ldr	r2, [pc, #100]	; (8006b4c <TIM_OC3_SetConfig+0xf0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d007      	beq.n	8006afa <TIM_OC3_SetConfig+0x9e>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a18      	ldr	r2, [pc, #96]	; (8006b50 <TIM_OC3_SetConfig+0xf4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d003      	beq.n	8006afa <TIM_OC3_SetConfig+0x9e>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a17      	ldr	r2, [pc, #92]	; (8006b54 <TIM_OC3_SetConfig+0xf8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d113      	bne.n	8006b22 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	621a      	str	r2, [r3, #32]
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	40012c00 	.word	0x40012c00
 8006b4c:	40014000 	.word	0x40014000
 8006b50:	40014400 	.word	0x40014400
 8006b54:	40014800 	.word	0x40014800

08006b58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	031b      	lsls	r3, r3, #12
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a16      	ldr	r2, [pc, #88]	; (8006c10 <TIM_OC4_SetConfig+0xb8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00b      	beq.n	8006bd4 <TIM_OC4_SetConfig+0x7c>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a15      	ldr	r2, [pc, #84]	; (8006c14 <TIM_OC4_SetConfig+0xbc>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d007      	beq.n	8006bd4 <TIM_OC4_SetConfig+0x7c>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a14      	ldr	r2, [pc, #80]	; (8006c18 <TIM_OC4_SetConfig+0xc0>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_OC4_SetConfig+0x7c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a13      	ldr	r2, [pc, #76]	; (8006c1c <TIM_OC4_SetConfig+0xc4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d109      	bne.n	8006be8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	019b      	lsls	r3, r3, #6
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	621a      	str	r2, [r3, #32]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40014400 	.word	0x40014400
 8006c1c:	40014800 	.word	0x40014800

08006c20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	041b      	lsls	r3, r3, #16
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <TIM_OC5_SetConfig+0xac>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00b      	beq.n	8006c92 <TIM_OC5_SetConfig+0x72>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a14      	ldr	r2, [pc, #80]	; (8006cd0 <TIM_OC5_SetConfig+0xb0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d007      	beq.n	8006c92 <TIM_OC5_SetConfig+0x72>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <TIM_OC5_SetConfig+0xb4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d003      	beq.n	8006c92 <TIM_OC5_SetConfig+0x72>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a12      	ldr	r2, [pc, #72]	; (8006cd8 <TIM_OC5_SetConfig+0xb8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d109      	bne.n	8006ca6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	621a      	str	r2, [r3, #32]
}
 8006cc0:	bf00      	nop
 8006cc2:	371c      	adds	r7, #28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	40012c00 	.word	0x40012c00
 8006cd0:	40014000 	.word	0x40014000
 8006cd4:	40014400 	.word	0x40014400
 8006cd8:	40014800 	.word	0x40014800

08006cdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	051b      	lsls	r3, r3, #20
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a16      	ldr	r2, [pc, #88]	; (8006d8c <TIM_OC6_SetConfig+0xb0>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00b      	beq.n	8006d50 <TIM_OC6_SetConfig+0x74>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a15      	ldr	r2, [pc, #84]	; (8006d90 <TIM_OC6_SetConfig+0xb4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d007      	beq.n	8006d50 <TIM_OC6_SetConfig+0x74>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a14      	ldr	r2, [pc, #80]	; (8006d94 <TIM_OC6_SetConfig+0xb8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d003      	beq.n	8006d50 <TIM_OC6_SetConfig+0x74>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a13      	ldr	r2, [pc, #76]	; (8006d98 <TIM_OC6_SetConfig+0xbc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d109      	bne.n	8006d64 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	029b      	lsls	r3, r3, #10
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40012c00 	.word	0x40012c00
 8006d90:	40014000 	.word	0x40014000
 8006d94:	40014400 	.word	0x40014400
 8006d98:	40014800 	.word	0x40014800

08006d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f003 031f 	and.w	r3, r3, #31
 8006dae:	2201      	movs	r2, #1
 8006db0:	fa02 f303 	lsl.w	r3, r2, r3
 8006db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1a      	ldr	r2, [r3, #32]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	401a      	ands	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a1a      	ldr	r2, [r3, #32]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e054      	b.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a24      	ldr	r2, [pc, #144]	; (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d108      	bne.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a17      	ldr	r2, [pc, #92]	; (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00e      	beq.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e68:	d009      	beq.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d004      	beq.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a11      	ldr	r2, [pc, #68]	; (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d10c      	bne.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	40012c00 	.word	0x40012c00
 8006ebc:	40000400 	.word	0x40000400
 8006ec0:	40014000 	.word	0x40014000

08006ec4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e060      	b.n	8006fa2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	041b      	lsls	r3, r3, #16
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a14      	ldr	r2, [pc, #80]	; (8006fb0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d115      	bne.n	8006f90 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	051b      	lsls	r3, r3, #20
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	40012c00 	.word	0x40012c00

08006fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e040      	b.n	8007084 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d106      	bne.n	8007018 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7fb fcfe 	bl	8002a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2224      	movs	r2, #36	; 0x24
 800701c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0201 	bic.w	r2, r2, #1
 800702c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f8b6 	bl	80071a0 <UART_SetConfig>
 8007034:	4603      	mov	r3, r0
 8007036:	2b01      	cmp	r3, #1
 8007038:	d101      	bne.n	800703e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e022      	b.n	8007084 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9e0 	bl	800740c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800705a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800706a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fa67 	bl	8007550 <UART_CheckIdleState>
 8007082:	4603      	mov	r3, r0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	; 0x28
 8007090:	af02      	add	r7, sp, #8
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	603b      	str	r3, [r7, #0]
 8007098:	4613      	mov	r3, r2
 800709a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d178      	bne.n	8007196 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <HAL_UART_Transmit+0x24>
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e071      	b.n	8007198 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2221      	movs	r2, #33	; 0x21
 80070c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070c2:	f7fb fe9f 	bl	8002e04 <HAL_GetTick>
 80070c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	88fa      	ldrh	r2, [r7, #6]
 80070cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	88fa      	ldrh	r2, [r7, #6]
 80070d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e0:	d108      	bne.n	80070f4 <HAL_UART_Transmit+0x68>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d104      	bne.n	80070f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	e003      	b.n	80070fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070fc:	e030      	b.n	8007160 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2200      	movs	r2, #0
 8007106:	2180      	movs	r1, #128	; 0x80
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 fac9 	bl	80076a0 <UART_WaitOnFlagUntilTimeout>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2220      	movs	r2, #32
 8007118:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e03c      	b.n	8007198 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10b      	bne.n	800713c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	881a      	ldrh	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007130:	b292      	uxth	r2, r2
 8007132:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	3302      	adds	r3, #2
 8007138:	61bb      	str	r3, [r7, #24]
 800713a:	e008      	b.n	800714e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	781a      	ldrb	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	b292      	uxth	r2, r2
 8007146:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	3301      	adds	r3, #1
 800714c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b29a      	uxth	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007166:	b29b      	uxth	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1c8      	bne.n	80070fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2200      	movs	r2, #0
 8007174:	2140      	movs	r1, #64	; 0x40
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 fa92 	bl	80076a0 <UART_WaitOnFlagUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d004      	beq.n	800718c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2220      	movs	r2, #32
 8007186:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e005      	b.n	8007198 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2220      	movs	r2, #32
 8007190:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e000      	b.n	8007198 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007196:	2302      	movs	r3, #2
  }
}
 8007198:	4618      	mov	r0, r3
 800719a:	3720      	adds	r7, #32
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4b8a      	ldr	r3, [pc, #552]	; (80073f4 <UART_SetConfig+0x254>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	6979      	ldr	r1, [r7, #20]
 80071d4:	430b      	orrs	r3, r1
 80071d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	430a      	orrs	r2, r1
 8007210:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a78      	ldr	r2, [pc, #480]	; (80073f8 <UART_SetConfig+0x258>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d120      	bne.n	800725e <UART_SetConfig+0xbe>
 800721c:	4b77      	ldr	r3, [pc, #476]	; (80073fc <UART_SetConfig+0x25c>)
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	f003 0303 	and.w	r3, r3, #3
 8007224:	2b03      	cmp	r3, #3
 8007226:	d817      	bhi.n	8007258 <UART_SetConfig+0xb8>
 8007228:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <UART_SetConfig+0x90>)
 800722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722e:	bf00      	nop
 8007230:	08007241 	.word	0x08007241
 8007234:	0800724d 	.word	0x0800724d
 8007238:	08007253 	.word	0x08007253
 800723c:	08007247 	.word	0x08007247
 8007240:	2300      	movs	r3, #0
 8007242:	77fb      	strb	r3, [r7, #31]
 8007244:	e01d      	b.n	8007282 <UART_SetConfig+0xe2>
 8007246:	2302      	movs	r3, #2
 8007248:	77fb      	strb	r3, [r7, #31]
 800724a:	e01a      	b.n	8007282 <UART_SetConfig+0xe2>
 800724c:	2304      	movs	r3, #4
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e017      	b.n	8007282 <UART_SetConfig+0xe2>
 8007252:	2308      	movs	r3, #8
 8007254:	77fb      	strb	r3, [r7, #31]
 8007256:	e014      	b.n	8007282 <UART_SetConfig+0xe2>
 8007258:	2310      	movs	r3, #16
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e011      	b.n	8007282 <UART_SetConfig+0xe2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a67      	ldr	r2, [pc, #412]	; (8007400 <UART_SetConfig+0x260>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d102      	bne.n	800726e <UART_SetConfig+0xce>
 8007268:	2300      	movs	r3, #0
 800726a:	77fb      	strb	r3, [r7, #31]
 800726c:	e009      	b.n	8007282 <UART_SetConfig+0xe2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a64      	ldr	r2, [pc, #400]	; (8007404 <UART_SetConfig+0x264>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d102      	bne.n	800727e <UART_SetConfig+0xde>
 8007278:	2300      	movs	r3, #0
 800727a:	77fb      	strb	r3, [r7, #31]
 800727c:	e001      	b.n	8007282 <UART_SetConfig+0xe2>
 800727e:	2310      	movs	r3, #16
 8007280:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800728a:	d15a      	bne.n	8007342 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800728c:	7ffb      	ldrb	r3, [r7, #31]
 800728e:	2b08      	cmp	r3, #8
 8007290:	d827      	bhi.n	80072e2 <UART_SetConfig+0x142>
 8007292:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <UART_SetConfig+0xf8>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	080072bd 	.word	0x080072bd
 800729c:	080072c5 	.word	0x080072c5
 80072a0:	080072cd 	.word	0x080072cd
 80072a4:	080072e3 	.word	0x080072e3
 80072a8:	080072d3 	.word	0x080072d3
 80072ac:	080072e3 	.word	0x080072e3
 80072b0:	080072e3 	.word	0x080072e3
 80072b4:	080072e3 	.word	0x080072e3
 80072b8:	080072db 	.word	0x080072db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072bc:	f7fe fc02 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 80072c0:	61b8      	str	r0, [r7, #24]
        break;
 80072c2:	e013      	b.n	80072ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072c4:	f7fe fc20 	bl	8005b08 <HAL_RCC_GetPCLK2Freq>
 80072c8:	61b8      	str	r0, [r7, #24]
        break;
 80072ca:	e00f      	b.n	80072ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072cc:	4b4e      	ldr	r3, [pc, #312]	; (8007408 <UART_SetConfig+0x268>)
 80072ce:	61bb      	str	r3, [r7, #24]
        break;
 80072d0:	e00c      	b.n	80072ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072d2:	f7fe fb81 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 80072d6:	61b8      	str	r0, [r7, #24]
        break;
 80072d8:	e008      	b.n	80072ec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072de:	61bb      	str	r3, [r7, #24]
        break;
 80072e0:	e004      	b.n	80072ec <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	77bb      	strb	r3, [r7, #30]
        break;
 80072ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d074      	beq.n	80073dc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	005a      	lsls	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	085b      	lsrs	r3, r3, #1
 80072fc:	441a      	add	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	fbb2 f3f3 	udiv	r3, r2, r3
 8007306:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2b0f      	cmp	r3, #15
 800730c:	d916      	bls.n	800733c <UART_SetConfig+0x19c>
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007314:	d212      	bcs.n	800733c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	b29b      	uxth	r3, r3
 800731a:	f023 030f 	bic.w	r3, r3, #15
 800731e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	b29b      	uxth	r3, r3
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	b29a      	uxth	r2, r3
 800732c:	89fb      	ldrh	r3, [r7, #14]
 800732e:	4313      	orrs	r3, r2
 8007330:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	89fa      	ldrh	r2, [r7, #14]
 8007338:	60da      	str	r2, [r3, #12]
 800733a:	e04f      	b.n	80073dc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	77bb      	strb	r3, [r7, #30]
 8007340:	e04c      	b.n	80073dc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007342:	7ffb      	ldrb	r3, [r7, #31]
 8007344:	2b08      	cmp	r3, #8
 8007346:	d828      	bhi.n	800739a <UART_SetConfig+0x1fa>
 8007348:	a201      	add	r2, pc, #4	; (adr r2, 8007350 <UART_SetConfig+0x1b0>)
 800734a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734e:	bf00      	nop
 8007350:	08007375 	.word	0x08007375
 8007354:	0800737d 	.word	0x0800737d
 8007358:	08007385 	.word	0x08007385
 800735c:	0800739b 	.word	0x0800739b
 8007360:	0800738b 	.word	0x0800738b
 8007364:	0800739b 	.word	0x0800739b
 8007368:	0800739b 	.word	0x0800739b
 800736c:	0800739b 	.word	0x0800739b
 8007370:	08007393 	.word	0x08007393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007374:	f7fe fba6 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 8007378:	61b8      	str	r0, [r7, #24]
        break;
 800737a:	e013      	b.n	80073a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800737c:	f7fe fbc4 	bl	8005b08 <HAL_RCC_GetPCLK2Freq>
 8007380:	61b8      	str	r0, [r7, #24]
        break;
 8007382:	e00f      	b.n	80073a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007384:	4b20      	ldr	r3, [pc, #128]	; (8007408 <UART_SetConfig+0x268>)
 8007386:	61bb      	str	r3, [r7, #24]
        break;
 8007388:	e00c      	b.n	80073a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800738a:	f7fe fb25 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 800738e:	61b8      	str	r0, [r7, #24]
        break;
 8007390:	e008      	b.n	80073a4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007396:	61bb      	str	r3, [r7, #24]
        break;
 8007398:	e004      	b.n	80073a4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	77bb      	strb	r3, [r7, #30]
        break;
 80073a2:	bf00      	nop
    }

    if (pclk != 0U)
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d018      	beq.n	80073dc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	085a      	lsrs	r2, r3, #1
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	441a      	add	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b0f      	cmp	r3, #15
 80073c2:	d909      	bls.n	80073d8 <UART_SetConfig+0x238>
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ca:	d205      	bcs.n	80073d8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	60da      	str	r2, [r3, #12]
 80073d6:	e001      	b.n	80073dc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80073e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3720      	adds	r7, #32
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	efff69f3 	.word	0xefff69f3
 80073f8:	40013800 	.word	0x40013800
 80073fc:	40021000 	.word	0x40021000
 8007400:	40004400 	.word	0x40004400
 8007404:	40004800 	.word	0x40004800
 8007408:	007a1200 	.word	0x007a1200

0800740c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	f003 0310 	and.w	r3, r3, #16
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	430a      	orrs	r2, r1
 80074de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01a      	beq.n	8007522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800750a:	d10a      	bne.n	8007522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	605a      	str	r2, [r3, #4]
  }
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b098      	sub	sp, #96	; 0x60
 8007554:	af02      	add	r7, sp, #8
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007560:	f7fb fc50 	bl	8002e04 <HAL_GetTick>
 8007564:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b08      	cmp	r3, #8
 8007572:	d12e      	bne.n	80075d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800757c:	2200      	movs	r2, #0
 800757e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f88c 	bl	80076a0 <UART_WaitOnFlagUntilTimeout>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d021      	beq.n	80075d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800759c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a2:	653b      	str	r3, [r7, #80]	; 0x50
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ac:	647b      	str	r3, [r7, #68]	; 0x44
 80075ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e6      	bne.n	800758e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e062      	b.n	8007698 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d149      	bne.n	8007674 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075e8:	2200      	movs	r2, #0
 80075ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f856 	bl	80076a0 <UART_WaitOnFlagUntilTimeout>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d03c      	beq.n	8007674 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	623b      	str	r3, [r7, #32]
   return(result);
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800760e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
 8007616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007618:	633b      	str	r3, [r7, #48]	; 0x30
 800761a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800761e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e6      	bne.n	80075fa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	60fb      	str	r3, [r7, #12]
   return(result);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	64bb      	str	r3, [r7, #72]	; 0x48
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3308      	adds	r3, #8
 800764a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800764c:	61fa      	str	r2, [r7, #28]
 800764e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	69b9      	ldr	r1, [r7, #24]
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	617b      	str	r3, [r7, #20]
   return(result);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e5      	bne.n	800762c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e011      	b.n	8007698 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2220      	movs	r2, #32
 800767e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3758      	adds	r7, #88	; 0x58
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	4613      	mov	r3, r2
 80076ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076b0:	e049      	b.n	8007746 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076b8:	d045      	beq.n	8007746 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ba:	f7fb fba3 	bl	8002e04 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d302      	bcc.n	80076d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e048      	b.n	8007766 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d031      	beq.n	8007746 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d110      	bne.n	8007712 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2208      	movs	r2, #8
 80076f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 f838 	bl	800776e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2208      	movs	r2, #8
 8007702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e029      	b.n	8007766 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800771c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007720:	d111      	bne.n	8007746 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800772a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f81e 	bl	800776e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2220      	movs	r2, #32
 8007736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e00f      	b.n	8007766 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69da      	ldr	r2, [r3, #28]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4013      	ands	r3, r2
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	429a      	cmp	r2, r3
 8007754:	bf0c      	ite	eq
 8007756:	2301      	moveq	r3, #1
 8007758:	2300      	movne	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	429a      	cmp	r2, r3
 8007762:	d0a6      	beq.n	80076b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800776e:	b480      	push	{r7}
 8007770:	b095      	sub	sp, #84	; 0x54
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800778a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007794:	643b      	str	r3, [r7, #64]	; 0x40
 8007796:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800779a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800779c:	e841 2300 	strex	r3, r2, [r1]
 80077a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e6      	bne.n	8007776 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3308      	adds	r3, #8
 80077ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	f023 0301 	bic.w	r3, r3, #1
 80077be:	64bb      	str	r3, [r7, #72]	; 0x48
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3308      	adds	r3, #8
 80077c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e5      	bne.n	80077a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d118      	bne.n	8007816 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	e853 3f00 	ldrex	r3, [r3]
 80077f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	f023 0310 	bic.w	r3, r3, #16
 80077f8:	647b      	str	r3, [r7, #68]	; 0x44
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007802:	61bb      	str	r3, [r7, #24]
 8007804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	6979      	ldr	r1, [r7, #20]
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	613b      	str	r3, [r7, #16]
   return(result);
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e6      	bne.n	80077e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2220      	movs	r2, #32
 800781a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	669a      	str	r2, [r3, #104]	; 0x68
}
 800782a:	bf00      	nop
 800782c:	3754      	adds	r7, #84	; 0x54
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
	...

08007838 <__errno>:
 8007838:	4b01      	ldr	r3, [pc, #4]	; (8007840 <__errno+0x8>)
 800783a:	6818      	ldr	r0, [r3, #0]
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	2000000c 	.word	0x2000000c

08007844 <__libc_init_array>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	4d0d      	ldr	r5, [pc, #52]	; (800787c <__libc_init_array+0x38>)
 8007848:	4c0d      	ldr	r4, [pc, #52]	; (8007880 <__libc_init_array+0x3c>)
 800784a:	1b64      	subs	r4, r4, r5
 800784c:	10a4      	asrs	r4, r4, #2
 800784e:	2600      	movs	r6, #0
 8007850:	42a6      	cmp	r6, r4
 8007852:	d109      	bne.n	8007868 <__libc_init_array+0x24>
 8007854:	4d0b      	ldr	r5, [pc, #44]	; (8007884 <__libc_init_array+0x40>)
 8007856:	4c0c      	ldr	r4, [pc, #48]	; (8007888 <__libc_init_array+0x44>)
 8007858:	f001 f8fa 	bl	8008a50 <_init>
 800785c:	1b64      	subs	r4, r4, r5
 800785e:	10a4      	asrs	r4, r4, #2
 8007860:	2600      	movs	r6, #0
 8007862:	42a6      	cmp	r6, r4
 8007864:	d105      	bne.n	8007872 <__libc_init_array+0x2e>
 8007866:	bd70      	pop	{r4, r5, r6, pc}
 8007868:	f855 3b04 	ldr.w	r3, [r5], #4
 800786c:	4798      	blx	r3
 800786e:	3601      	adds	r6, #1
 8007870:	e7ee      	b.n	8007850 <__libc_init_array+0xc>
 8007872:	f855 3b04 	ldr.w	r3, [r5], #4
 8007876:	4798      	blx	r3
 8007878:	3601      	adds	r6, #1
 800787a:	e7f2      	b.n	8007862 <__libc_init_array+0x1e>
 800787c:	08009a9c 	.word	0x08009a9c
 8007880:	08009a9c 	.word	0x08009a9c
 8007884:	08009a9c 	.word	0x08009a9c
 8007888:	08009aa0 	.word	0x08009aa0

0800788c <memset>:
 800788c:	4402      	add	r2, r0
 800788e:	4603      	mov	r3, r0
 8007890:	4293      	cmp	r3, r2
 8007892:	d100      	bne.n	8007896 <memset+0xa>
 8007894:	4770      	bx	lr
 8007896:	f803 1b01 	strb.w	r1, [r3], #1
 800789a:	e7f9      	b.n	8007890 <memset+0x4>

0800789c <iprintf>:
 800789c:	b40f      	push	{r0, r1, r2, r3}
 800789e:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <iprintf+0x2c>)
 80078a0:	b513      	push	{r0, r1, r4, lr}
 80078a2:	681c      	ldr	r4, [r3, #0]
 80078a4:	b124      	cbz	r4, 80078b0 <iprintf+0x14>
 80078a6:	69a3      	ldr	r3, [r4, #24]
 80078a8:	b913      	cbnz	r3, 80078b0 <iprintf+0x14>
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 fb2c 	bl	8007f08 <__sinit>
 80078b0:	ab05      	add	r3, sp, #20
 80078b2:	9a04      	ldr	r2, [sp, #16]
 80078b4:	68a1      	ldr	r1, [r4, #8]
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	4620      	mov	r0, r4
 80078ba:	f000 fd3d 	bl	8008338 <_vfiprintf_r>
 80078be:	b002      	add	sp, #8
 80078c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c4:	b004      	add	sp, #16
 80078c6:	4770      	bx	lr
 80078c8:	2000000c 	.word	0x2000000c

080078cc <_puts_r>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	460e      	mov	r6, r1
 80078d0:	4605      	mov	r5, r0
 80078d2:	b118      	cbz	r0, 80078dc <_puts_r+0x10>
 80078d4:	6983      	ldr	r3, [r0, #24]
 80078d6:	b90b      	cbnz	r3, 80078dc <_puts_r+0x10>
 80078d8:	f000 fb16 	bl	8007f08 <__sinit>
 80078dc:	69ab      	ldr	r3, [r5, #24]
 80078de:	68ac      	ldr	r4, [r5, #8]
 80078e0:	b913      	cbnz	r3, 80078e8 <_puts_r+0x1c>
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 fb10 	bl	8007f08 <__sinit>
 80078e8:	4b2c      	ldr	r3, [pc, #176]	; (800799c <_puts_r+0xd0>)
 80078ea:	429c      	cmp	r4, r3
 80078ec:	d120      	bne.n	8007930 <_puts_r+0x64>
 80078ee:	686c      	ldr	r4, [r5, #4]
 80078f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078f2:	07db      	lsls	r3, r3, #31
 80078f4:	d405      	bmi.n	8007902 <_puts_r+0x36>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	0598      	lsls	r0, r3, #22
 80078fa:	d402      	bmi.n	8007902 <_puts_r+0x36>
 80078fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078fe:	f000 fba1 	bl	8008044 <__retarget_lock_acquire_recursive>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	0719      	lsls	r1, r3, #28
 8007906:	d51d      	bpl.n	8007944 <_puts_r+0x78>
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	b1db      	cbz	r3, 8007944 <_puts_r+0x78>
 800790c:	3e01      	subs	r6, #1
 800790e:	68a3      	ldr	r3, [r4, #8]
 8007910:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007914:	3b01      	subs	r3, #1
 8007916:	60a3      	str	r3, [r4, #8]
 8007918:	bb39      	cbnz	r1, 800796a <_puts_r+0x9e>
 800791a:	2b00      	cmp	r3, #0
 800791c:	da38      	bge.n	8007990 <_puts_r+0xc4>
 800791e:	4622      	mov	r2, r4
 8007920:	210a      	movs	r1, #10
 8007922:	4628      	mov	r0, r5
 8007924:	f000 f916 	bl	8007b54 <__swbuf_r>
 8007928:	3001      	adds	r0, #1
 800792a:	d011      	beq.n	8007950 <_puts_r+0x84>
 800792c:	250a      	movs	r5, #10
 800792e:	e011      	b.n	8007954 <_puts_r+0x88>
 8007930:	4b1b      	ldr	r3, [pc, #108]	; (80079a0 <_puts_r+0xd4>)
 8007932:	429c      	cmp	r4, r3
 8007934:	d101      	bne.n	800793a <_puts_r+0x6e>
 8007936:	68ac      	ldr	r4, [r5, #8]
 8007938:	e7da      	b.n	80078f0 <_puts_r+0x24>
 800793a:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <_puts_r+0xd8>)
 800793c:	429c      	cmp	r4, r3
 800793e:	bf08      	it	eq
 8007940:	68ec      	ldreq	r4, [r5, #12]
 8007942:	e7d5      	b.n	80078f0 <_puts_r+0x24>
 8007944:	4621      	mov	r1, r4
 8007946:	4628      	mov	r0, r5
 8007948:	f000 f956 	bl	8007bf8 <__swsetup_r>
 800794c:	2800      	cmp	r0, #0
 800794e:	d0dd      	beq.n	800790c <_puts_r+0x40>
 8007950:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007956:	07da      	lsls	r2, r3, #31
 8007958:	d405      	bmi.n	8007966 <_puts_r+0x9a>
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	059b      	lsls	r3, r3, #22
 800795e:	d402      	bmi.n	8007966 <_puts_r+0x9a>
 8007960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007962:	f000 fb70 	bl	8008046 <__retarget_lock_release_recursive>
 8007966:	4628      	mov	r0, r5
 8007968:	bd70      	pop	{r4, r5, r6, pc}
 800796a:	2b00      	cmp	r3, #0
 800796c:	da04      	bge.n	8007978 <_puts_r+0xac>
 800796e:	69a2      	ldr	r2, [r4, #24]
 8007970:	429a      	cmp	r2, r3
 8007972:	dc06      	bgt.n	8007982 <_puts_r+0xb6>
 8007974:	290a      	cmp	r1, #10
 8007976:	d004      	beq.n	8007982 <_puts_r+0xb6>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	6022      	str	r2, [r4, #0]
 800797e:	7019      	strb	r1, [r3, #0]
 8007980:	e7c5      	b.n	800790e <_puts_r+0x42>
 8007982:	4622      	mov	r2, r4
 8007984:	4628      	mov	r0, r5
 8007986:	f000 f8e5 	bl	8007b54 <__swbuf_r>
 800798a:	3001      	adds	r0, #1
 800798c:	d1bf      	bne.n	800790e <_puts_r+0x42>
 800798e:	e7df      	b.n	8007950 <_puts_r+0x84>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	250a      	movs	r5, #10
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	6022      	str	r2, [r4, #0]
 8007998:	701d      	strb	r5, [r3, #0]
 800799a:	e7db      	b.n	8007954 <_puts_r+0x88>
 800799c:	08009a28 	.word	0x08009a28
 80079a0:	08009a48 	.word	0x08009a48
 80079a4:	08009a08 	.word	0x08009a08

080079a8 <puts>:
 80079a8:	4b02      	ldr	r3, [pc, #8]	; (80079b4 <puts+0xc>)
 80079aa:	4601      	mov	r1, r0
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	f7ff bf8d 	b.w	80078cc <_puts_r>
 80079b2:	bf00      	nop
 80079b4:	2000000c 	.word	0x2000000c

080079b8 <setbuf>:
 80079b8:	2900      	cmp	r1, #0
 80079ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079be:	bf0c      	ite	eq
 80079c0:	2202      	moveq	r2, #2
 80079c2:	2200      	movne	r2, #0
 80079c4:	f000 b800 	b.w	80079c8 <setvbuf>

080079c8 <setvbuf>:
 80079c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	461d      	mov	r5, r3
 80079ce:	4b5d      	ldr	r3, [pc, #372]	; (8007b44 <setvbuf+0x17c>)
 80079d0:	681f      	ldr	r7, [r3, #0]
 80079d2:	4604      	mov	r4, r0
 80079d4:	460e      	mov	r6, r1
 80079d6:	4690      	mov	r8, r2
 80079d8:	b127      	cbz	r7, 80079e4 <setvbuf+0x1c>
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	b913      	cbnz	r3, 80079e4 <setvbuf+0x1c>
 80079de:	4638      	mov	r0, r7
 80079e0:	f000 fa92 	bl	8007f08 <__sinit>
 80079e4:	4b58      	ldr	r3, [pc, #352]	; (8007b48 <setvbuf+0x180>)
 80079e6:	429c      	cmp	r4, r3
 80079e8:	d167      	bne.n	8007aba <setvbuf+0xf2>
 80079ea:	687c      	ldr	r4, [r7, #4]
 80079ec:	f1b8 0f02 	cmp.w	r8, #2
 80079f0:	d006      	beq.n	8007a00 <setvbuf+0x38>
 80079f2:	f1b8 0f01 	cmp.w	r8, #1
 80079f6:	f200 809f 	bhi.w	8007b38 <setvbuf+0x170>
 80079fa:	2d00      	cmp	r5, #0
 80079fc:	f2c0 809c 	blt.w	8007b38 <setvbuf+0x170>
 8007a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a02:	07db      	lsls	r3, r3, #31
 8007a04:	d405      	bmi.n	8007a12 <setvbuf+0x4a>
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	0598      	lsls	r0, r3, #22
 8007a0a:	d402      	bmi.n	8007a12 <setvbuf+0x4a>
 8007a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a0e:	f000 fb19 	bl	8008044 <__retarget_lock_acquire_recursive>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4638      	mov	r0, r7
 8007a16:	f000 f9e3 	bl	8007de0 <_fflush_r>
 8007a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a1c:	b141      	cbz	r1, 8007a30 <setvbuf+0x68>
 8007a1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a22:	4299      	cmp	r1, r3
 8007a24:	d002      	beq.n	8007a2c <setvbuf+0x64>
 8007a26:	4638      	mov	r0, r7
 8007a28:	f000 fb7c 	bl	8008124 <_free_r>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	6363      	str	r3, [r4, #52]	; 0x34
 8007a30:	2300      	movs	r3, #0
 8007a32:	61a3      	str	r3, [r4, #24]
 8007a34:	6063      	str	r3, [r4, #4]
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	0619      	lsls	r1, r3, #24
 8007a3a:	d503      	bpl.n	8007a44 <setvbuf+0x7c>
 8007a3c:	6921      	ldr	r1, [r4, #16]
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f000 fb70 	bl	8008124 <_free_r>
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	f1b8 0f02 	cmp.w	r8, #2
 8007a52:	81a3      	strh	r3, [r4, #12]
 8007a54:	d06c      	beq.n	8007b30 <setvbuf+0x168>
 8007a56:	ab01      	add	r3, sp, #4
 8007a58:	466a      	mov	r2, sp
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4638      	mov	r0, r7
 8007a5e:	f000 faf3 	bl	8008048 <__swhatbuf_r>
 8007a62:	89a3      	ldrh	r3, [r4, #12]
 8007a64:	4318      	orrs	r0, r3
 8007a66:	81a0      	strh	r0, [r4, #12]
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	d130      	bne.n	8007ace <setvbuf+0x106>
 8007a6c:	9d00      	ldr	r5, [sp, #0]
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f000 fb50 	bl	8008114 <malloc>
 8007a74:	4606      	mov	r6, r0
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d155      	bne.n	8007b26 <setvbuf+0x15e>
 8007a7a:	f8dd 9000 	ldr.w	r9, [sp]
 8007a7e:	45a9      	cmp	r9, r5
 8007a80:	d14a      	bne.n	8007b18 <setvbuf+0x150>
 8007a82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007a86:	2200      	movs	r2, #0
 8007a88:	60a2      	str	r2, [r4, #8]
 8007a8a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007a8e:	6022      	str	r2, [r4, #0]
 8007a90:	6122      	str	r2, [r4, #16]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a98:	6162      	str	r2, [r4, #20]
 8007a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a9c:	f043 0302 	orr.w	r3, r3, #2
 8007aa0:	07d2      	lsls	r2, r2, #31
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	d405      	bmi.n	8007ab2 <setvbuf+0xea>
 8007aa6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007aaa:	d102      	bne.n	8007ab2 <setvbuf+0xea>
 8007aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aae:	f000 faca 	bl	8008046 <__retarget_lock_release_recursive>
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	b003      	add	sp, #12
 8007ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aba:	4b24      	ldr	r3, [pc, #144]	; (8007b4c <setvbuf+0x184>)
 8007abc:	429c      	cmp	r4, r3
 8007abe:	d101      	bne.n	8007ac4 <setvbuf+0xfc>
 8007ac0:	68bc      	ldr	r4, [r7, #8]
 8007ac2:	e793      	b.n	80079ec <setvbuf+0x24>
 8007ac4:	4b22      	ldr	r3, [pc, #136]	; (8007b50 <setvbuf+0x188>)
 8007ac6:	429c      	cmp	r4, r3
 8007ac8:	bf08      	it	eq
 8007aca:	68fc      	ldreq	r4, [r7, #12]
 8007acc:	e78e      	b.n	80079ec <setvbuf+0x24>
 8007ace:	2e00      	cmp	r6, #0
 8007ad0:	d0cd      	beq.n	8007a6e <setvbuf+0xa6>
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	b913      	cbnz	r3, 8007adc <setvbuf+0x114>
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	f000 fa16 	bl	8007f08 <__sinit>
 8007adc:	f1b8 0f01 	cmp.w	r8, #1
 8007ae0:	bf08      	it	eq
 8007ae2:	89a3      	ldrheq	r3, [r4, #12]
 8007ae4:	6026      	str	r6, [r4, #0]
 8007ae6:	bf04      	itt	eq
 8007ae8:	f043 0301 	orreq.w	r3, r3, #1
 8007aec:	81a3      	strheq	r3, [r4, #12]
 8007aee:	89a2      	ldrh	r2, [r4, #12]
 8007af0:	f012 0308 	ands.w	r3, r2, #8
 8007af4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007af8:	d01c      	beq.n	8007b34 <setvbuf+0x16c>
 8007afa:	07d3      	lsls	r3, r2, #31
 8007afc:	bf41      	itttt	mi
 8007afe:	2300      	movmi	r3, #0
 8007b00:	426d      	negmi	r5, r5
 8007b02:	60a3      	strmi	r3, [r4, #8]
 8007b04:	61a5      	strmi	r5, [r4, #24]
 8007b06:	bf58      	it	pl
 8007b08:	60a5      	strpl	r5, [r4, #8]
 8007b0a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007b0c:	f015 0501 	ands.w	r5, r5, #1
 8007b10:	d115      	bne.n	8007b3e <setvbuf+0x176>
 8007b12:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007b16:	e7c8      	b.n	8007aaa <setvbuf+0xe2>
 8007b18:	4648      	mov	r0, r9
 8007b1a:	f000 fafb 	bl	8008114 <malloc>
 8007b1e:	4606      	mov	r6, r0
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d0ae      	beq.n	8007a82 <setvbuf+0xba>
 8007b24:	464d      	mov	r5, r9
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b2c:	81a3      	strh	r3, [r4, #12]
 8007b2e:	e7d0      	b.n	8007ad2 <setvbuf+0x10a>
 8007b30:	2500      	movs	r5, #0
 8007b32:	e7a8      	b.n	8007a86 <setvbuf+0xbe>
 8007b34:	60a3      	str	r3, [r4, #8]
 8007b36:	e7e8      	b.n	8007b0a <setvbuf+0x142>
 8007b38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007b3c:	e7b9      	b.n	8007ab2 <setvbuf+0xea>
 8007b3e:	2500      	movs	r5, #0
 8007b40:	e7b7      	b.n	8007ab2 <setvbuf+0xea>
 8007b42:	bf00      	nop
 8007b44:	2000000c 	.word	0x2000000c
 8007b48:	08009a28 	.word	0x08009a28
 8007b4c:	08009a48 	.word	0x08009a48
 8007b50:	08009a08 	.word	0x08009a08

08007b54 <__swbuf_r>:
 8007b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b56:	460e      	mov	r6, r1
 8007b58:	4614      	mov	r4, r2
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	b118      	cbz	r0, 8007b66 <__swbuf_r+0x12>
 8007b5e:	6983      	ldr	r3, [r0, #24]
 8007b60:	b90b      	cbnz	r3, 8007b66 <__swbuf_r+0x12>
 8007b62:	f000 f9d1 	bl	8007f08 <__sinit>
 8007b66:	4b21      	ldr	r3, [pc, #132]	; (8007bec <__swbuf_r+0x98>)
 8007b68:	429c      	cmp	r4, r3
 8007b6a:	d12b      	bne.n	8007bc4 <__swbuf_r+0x70>
 8007b6c:	686c      	ldr	r4, [r5, #4]
 8007b6e:	69a3      	ldr	r3, [r4, #24]
 8007b70:	60a3      	str	r3, [r4, #8]
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	071a      	lsls	r2, r3, #28
 8007b76:	d52f      	bpl.n	8007bd8 <__swbuf_r+0x84>
 8007b78:	6923      	ldr	r3, [r4, #16]
 8007b7a:	b36b      	cbz	r3, 8007bd8 <__swbuf_r+0x84>
 8007b7c:	6923      	ldr	r3, [r4, #16]
 8007b7e:	6820      	ldr	r0, [r4, #0]
 8007b80:	1ac0      	subs	r0, r0, r3
 8007b82:	6963      	ldr	r3, [r4, #20]
 8007b84:	b2f6      	uxtb	r6, r6
 8007b86:	4283      	cmp	r3, r0
 8007b88:	4637      	mov	r7, r6
 8007b8a:	dc04      	bgt.n	8007b96 <__swbuf_r+0x42>
 8007b8c:	4621      	mov	r1, r4
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 f926 	bl	8007de0 <_fflush_r>
 8007b94:	bb30      	cbnz	r0, 8007be4 <__swbuf_r+0x90>
 8007b96:	68a3      	ldr	r3, [r4, #8]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	60a3      	str	r3, [r4, #8]
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	6022      	str	r2, [r4, #0]
 8007ba2:	701e      	strb	r6, [r3, #0]
 8007ba4:	6963      	ldr	r3, [r4, #20]
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	4283      	cmp	r3, r0
 8007baa:	d004      	beq.n	8007bb6 <__swbuf_r+0x62>
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	07db      	lsls	r3, r3, #31
 8007bb0:	d506      	bpl.n	8007bc0 <__swbuf_r+0x6c>
 8007bb2:	2e0a      	cmp	r6, #10
 8007bb4:	d104      	bne.n	8007bc0 <__swbuf_r+0x6c>
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f000 f911 	bl	8007de0 <_fflush_r>
 8007bbe:	b988      	cbnz	r0, 8007be4 <__swbuf_r+0x90>
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bc4:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <__swbuf_r+0x9c>)
 8007bc6:	429c      	cmp	r4, r3
 8007bc8:	d101      	bne.n	8007bce <__swbuf_r+0x7a>
 8007bca:	68ac      	ldr	r4, [r5, #8]
 8007bcc:	e7cf      	b.n	8007b6e <__swbuf_r+0x1a>
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <__swbuf_r+0xa0>)
 8007bd0:	429c      	cmp	r4, r3
 8007bd2:	bf08      	it	eq
 8007bd4:	68ec      	ldreq	r4, [r5, #12]
 8007bd6:	e7ca      	b.n	8007b6e <__swbuf_r+0x1a>
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f000 f80c 	bl	8007bf8 <__swsetup_r>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d0cb      	beq.n	8007b7c <__swbuf_r+0x28>
 8007be4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007be8:	e7ea      	b.n	8007bc0 <__swbuf_r+0x6c>
 8007bea:	bf00      	nop
 8007bec:	08009a28 	.word	0x08009a28
 8007bf0:	08009a48 	.word	0x08009a48
 8007bf4:	08009a08 	.word	0x08009a08

08007bf8 <__swsetup_r>:
 8007bf8:	4b32      	ldr	r3, [pc, #200]	; (8007cc4 <__swsetup_r+0xcc>)
 8007bfa:	b570      	push	{r4, r5, r6, lr}
 8007bfc:	681d      	ldr	r5, [r3, #0]
 8007bfe:	4606      	mov	r6, r0
 8007c00:	460c      	mov	r4, r1
 8007c02:	b125      	cbz	r5, 8007c0e <__swsetup_r+0x16>
 8007c04:	69ab      	ldr	r3, [r5, #24]
 8007c06:	b913      	cbnz	r3, 8007c0e <__swsetup_r+0x16>
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f000 f97d 	bl	8007f08 <__sinit>
 8007c0e:	4b2e      	ldr	r3, [pc, #184]	; (8007cc8 <__swsetup_r+0xd0>)
 8007c10:	429c      	cmp	r4, r3
 8007c12:	d10f      	bne.n	8007c34 <__swsetup_r+0x3c>
 8007c14:	686c      	ldr	r4, [r5, #4]
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c1c:	0719      	lsls	r1, r3, #28
 8007c1e:	d42c      	bmi.n	8007c7a <__swsetup_r+0x82>
 8007c20:	06dd      	lsls	r5, r3, #27
 8007c22:	d411      	bmi.n	8007c48 <__swsetup_r+0x50>
 8007c24:	2309      	movs	r3, #9
 8007c26:	6033      	str	r3, [r6, #0]
 8007c28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c32:	e03e      	b.n	8007cb2 <__swsetup_r+0xba>
 8007c34:	4b25      	ldr	r3, [pc, #148]	; (8007ccc <__swsetup_r+0xd4>)
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d101      	bne.n	8007c3e <__swsetup_r+0x46>
 8007c3a:	68ac      	ldr	r4, [r5, #8]
 8007c3c:	e7eb      	b.n	8007c16 <__swsetup_r+0x1e>
 8007c3e:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <__swsetup_r+0xd8>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	bf08      	it	eq
 8007c44:	68ec      	ldreq	r4, [r5, #12]
 8007c46:	e7e6      	b.n	8007c16 <__swsetup_r+0x1e>
 8007c48:	0758      	lsls	r0, r3, #29
 8007c4a:	d512      	bpl.n	8007c72 <__swsetup_r+0x7a>
 8007c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c4e:	b141      	cbz	r1, 8007c62 <__swsetup_r+0x6a>
 8007c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c54:	4299      	cmp	r1, r3
 8007c56:	d002      	beq.n	8007c5e <__swsetup_r+0x66>
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f000 fa63 	bl	8008124 <_free_r>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6363      	str	r3, [r4, #52]	; 0x34
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c68:	81a3      	strh	r3, [r4, #12]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	6063      	str	r3, [r4, #4]
 8007c6e:	6923      	ldr	r3, [r4, #16]
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	f043 0308 	orr.w	r3, r3, #8
 8007c78:	81a3      	strh	r3, [r4, #12]
 8007c7a:	6923      	ldr	r3, [r4, #16]
 8007c7c:	b94b      	cbnz	r3, 8007c92 <__swsetup_r+0x9a>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c88:	d003      	beq.n	8007c92 <__swsetup_r+0x9a>
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f000 fa01 	bl	8008094 <__smakebuf_r>
 8007c92:	89a0      	ldrh	r0, [r4, #12]
 8007c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c98:	f010 0301 	ands.w	r3, r0, #1
 8007c9c:	d00a      	beq.n	8007cb4 <__swsetup_r+0xbc>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60a3      	str	r3, [r4, #8]
 8007ca2:	6963      	ldr	r3, [r4, #20]
 8007ca4:	425b      	negs	r3, r3
 8007ca6:	61a3      	str	r3, [r4, #24]
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	b943      	cbnz	r3, 8007cbe <__swsetup_r+0xc6>
 8007cac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cb0:	d1ba      	bne.n	8007c28 <__swsetup_r+0x30>
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	0781      	lsls	r1, r0, #30
 8007cb6:	bf58      	it	pl
 8007cb8:	6963      	ldrpl	r3, [r4, #20]
 8007cba:	60a3      	str	r3, [r4, #8]
 8007cbc:	e7f4      	b.n	8007ca8 <__swsetup_r+0xb0>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	e7f7      	b.n	8007cb2 <__swsetup_r+0xba>
 8007cc2:	bf00      	nop
 8007cc4:	2000000c 	.word	0x2000000c
 8007cc8:	08009a28 	.word	0x08009a28
 8007ccc:	08009a48 	.word	0x08009a48
 8007cd0:	08009a08 	.word	0x08009a08

08007cd4 <__sflush_r>:
 8007cd4:	898a      	ldrh	r2, [r1, #12]
 8007cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cda:	4605      	mov	r5, r0
 8007cdc:	0710      	lsls	r0, r2, #28
 8007cde:	460c      	mov	r4, r1
 8007ce0:	d458      	bmi.n	8007d94 <__sflush_r+0xc0>
 8007ce2:	684b      	ldr	r3, [r1, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dc05      	bgt.n	8007cf4 <__sflush_r+0x20>
 8007ce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dc02      	bgt.n	8007cf4 <__sflush_r+0x20>
 8007cee:	2000      	movs	r0, #0
 8007cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	d0f9      	beq.n	8007cee <__sflush_r+0x1a>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d00:	682f      	ldr	r7, [r5, #0]
 8007d02:	602b      	str	r3, [r5, #0]
 8007d04:	d032      	beq.n	8007d6c <__sflush_r+0x98>
 8007d06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	075a      	lsls	r2, r3, #29
 8007d0c:	d505      	bpl.n	8007d1a <__sflush_r+0x46>
 8007d0e:	6863      	ldr	r3, [r4, #4]
 8007d10:	1ac0      	subs	r0, r0, r3
 8007d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d14:	b10b      	cbz	r3, 8007d1a <__sflush_r+0x46>
 8007d16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d18:	1ac0      	subs	r0, r0, r3
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d20:	6a21      	ldr	r1, [r4, #32]
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b0      	blx	r6
 8007d26:	1c43      	adds	r3, r0, #1
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	d106      	bne.n	8007d3a <__sflush_r+0x66>
 8007d2c:	6829      	ldr	r1, [r5, #0]
 8007d2e:	291d      	cmp	r1, #29
 8007d30:	d82c      	bhi.n	8007d8c <__sflush_r+0xb8>
 8007d32:	4a2a      	ldr	r2, [pc, #168]	; (8007ddc <__sflush_r+0x108>)
 8007d34:	40ca      	lsrs	r2, r1
 8007d36:	07d6      	lsls	r6, r2, #31
 8007d38:	d528      	bpl.n	8007d8c <__sflush_r+0xb8>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	6062      	str	r2, [r4, #4]
 8007d3e:	04d9      	lsls	r1, r3, #19
 8007d40:	6922      	ldr	r2, [r4, #16]
 8007d42:	6022      	str	r2, [r4, #0]
 8007d44:	d504      	bpl.n	8007d50 <__sflush_r+0x7c>
 8007d46:	1c42      	adds	r2, r0, #1
 8007d48:	d101      	bne.n	8007d4e <__sflush_r+0x7a>
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	b903      	cbnz	r3, 8007d50 <__sflush_r+0x7c>
 8007d4e:	6560      	str	r0, [r4, #84]	; 0x54
 8007d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d52:	602f      	str	r7, [r5, #0]
 8007d54:	2900      	cmp	r1, #0
 8007d56:	d0ca      	beq.n	8007cee <__sflush_r+0x1a>
 8007d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d5c:	4299      	cmp	r1, r3
 8007d5e:	d002      	beq.n	8007d66 <__sflush_r+0x92>
 8007d60:	4628      	mov	r0, r5
 8007d62:	f000 f9df 	bl	8008124 <_free_r>
 8007d66:	2000      	movs	r0, #0
 8007d68:	6360      	str	r0, [r4, #52]	; 0x34
 8007d6a:	e7c1      	b.n	8007cf0 <__sflush_r+0x1c>
 8007d6c:	6a21      	ldr	r1, [r4, #32]
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4628      	mov	r0, r5
 8007d72:	47b0      	blx	r6
 8007d74:	1c41      	adds	r1, r0, #1
 8007d76:	d1c7      	bne.n	8007d08 <__sflush_r+0x34>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0c4      	beq.n	8007d08 <__sflush_r+0x34>
 8007d7e:	2b1d      	cmp	r3, #29
 8007d80:	d001      	beq.n	8007d86 <__sflush_r+0xb2>
 8007d82:	2b16      	cmp	r3, #22
 8007d84:	d101      	bne.n	8007d8a <__sflush_r+0xb6>
 8007d86:	602f      	str	r7, [r5, #0]
 8007d88:	e7b1      	b.n	8007cee <__sflush_r+0x1a>
 8007d8a:	89a3      	ldrh	r3, [r4, #12]
 8007d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d90:	81a3      	strh	r3, [r4, #12]
 8007d92:	e7ad      	b.n	8007cf0 <__sflush_r+0x1c>
 8007d94:	690f      	ldr	r7, [r1, #16]
 8007d96:	2f00      	cmp	r7, #0
 8007d98:	d0a9      	beq.n	8007cee <__sflush_r+0x1a>
 8007d9a:	0793      	lsls	r3, r2, #30
 8007d9c:	680e      	ldr	r6, [r1, #0]
 8007d9e:	bf08      	it	eq
 8007da0:	694b      	ldreq	r3, [r1, #20]
 8007da2:	600f      	str	r7, [r1, #0]
 8007da4:	bf18      	it	ne
 8007da6:	2300      	movne	r3, #0
 8007da8:	eba6 0807 	sub.w	r8, r6, r7
 8007dac:	608b      	str	r3, [r1, #8]
 8007dae:	f1b8 0f00 	cmp.w	r8, #0
 8007db2:	dd9c      	ble.n	8007cee <__sflush_r+0x1a>
 8007db4:	6a21      	ldr	r1, [r4, #32]
 8007db6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007db8:	4643      	mov	r3, r8
 8007dba:	463a      	mov	r2, r7
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	47b0      	blx	r6
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	dc06      	bgt.n	8007dd2 <__sflush_r+0xfe>
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dd0:	e78e      	b.n	8007cf0 <__sflush_r+0x1c>
 8007dd2:	4407      	add	r7, r0
 8007dd4:	eba8 0800 	sub.w	r8, r8, r0
 8007dd8:	e7e9      	b.n	8007dae <__sflush_r+0xda>
 8007dda:	bf00      	nop
 8007ddc:	20400001 	.word	0x20400001

08007de0 <_fflush_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	690b      	ldr	r3, [r1, #16]
 8007de4:	4605      	mov	r5, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	b913      	cbnz	r3, 8007df0 <_fflush_r+0x10>
 8007dea:	2500      	movs	r5, #0
 8007dec:	4628      	mov	r0, r5
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	b118      	cbz	r0, 8007dfa <_fflush_r+0x1a>
 8007df2:	6983      	ldr	r3, [r0, #24]
 8007df4:	b90b      	cbnz	r3, 8007dfa <_fflush_r+0x1a>
 8007df6:	f000 f887 	bl	8007f08 <__sinit>
 8007dfa:	4b14      	ldr	r3, [pc, #80]	; (8007e4c <_fflush_r+0x6c>)
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	d11b      	bne.n	8007e38 <_fflush_r+0x58>
 8007e00:	686c      	ldr	r4, [r5, #4]
 8007e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0ef      	beq.n	8007dea <_fflush_r+0xa>
 8007e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e0c:	07d0      	lsls	r0, r2, #31
 8007e0e:	d404      	bmi.n	8007e1a <_fflush_r+0x3a>
 8007e10:	0599      	lsls	r1, r3, #22
 8007e12:	d402      	bmi.n	8007e1a <_fflush_r+0x3a>
 8007e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e16:	f000 f915 	bl	8008044 <__retarget_lock_acquire_recursive>
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	f7ff ff59 	bl	8007cd4 <__sflush_r>
 8007e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e24:	07da      	lsls	r2, r3, #31
 8007e26:	4605      	mov	r5, r0
 8007e28:	d4e0      	bmi.n	8007dec <_fflush_r+0xc>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	059b      	lsls	r3, r3, #22
 8007e2e:	d4dd      	bmi.n	8007dec <_fflush_r+0xc>
 8007e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e32:	f000 f908 	bl	8008046 <__retarget_lock_release_recursive>
 8007e36:	e7d9      	b.n	8007dec <_fflush_r+0xc>
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <_fflush_r+0x70>)
 8007e3a:	429c      	cmp	r4, r3
 8007e3c:	d101      	bne.n	8007e42 <_fflush_r+0x62>
 8007e3e:	68ac      	ldr	r4, [r5, #8]
 8007e40:	e7df      	b.n	8007e02 <_fflush_r+0x22>
 8007e42:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <_fflush_r+0x74>)
 8007e44:	429c      	cmp	r4, r3
 8007e46:	bf08      	it	eq
 8007e48:	68ec      	ldreq	r4, [r5, #12]
 8007e4a:	e7da      	b.n	8007e02 <_fflush_r+0x22>
 8007e4c:	08009a28 	.word	0x08009a28
 8007e50:	08009a48 	.word	0x08009a48
 8007e54:	08009a08 	.word	0x08009a08

08007e58 <std>:
 8007e58:	2300      	movs	r3, #0
 8007e5a:	b510      	push	{r4, lr}
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e66:	6083      	str	r3, [r0, #8]
 8007e68:	8181      	strh	r1, [r0, #12]
 8007e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e6c:	81c2      	strh	r2, [r0, #14]
 8007e6e:	6183      	str	r3, [r0, #24]
 8007e70:	4619      	mov	r1, r3
 8007e72:	2208      	movs	r2, #8
 8007e74:	305c      	adds	r0, #92	; 0x5c
 8007e76:	f7ff fd09 	bl	800788c <memset>
 8007e7a:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <std+0x38>)
 8007e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e7e:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <std+0x3c>)
 8007e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e82:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <std+0x40>)
 8007e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <std+0x44>)
 8007e88:	6224      	str	r4, [r4, #32]
 8007e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e8c:	bd10      	pop	{r4, pc}
 8007e8e:	bf00      	nop
 8007e90:	080088e1 	.word	0x080088e1
 8007e94:	08008903 	.word	0x08008903
 8007e98:	0800893b 	.word	0x0800893b
 8007e9c:	0800895f 	.word	0x0800895f

08007ea0 <_cleanup_r>:
 8007ea0:	4901      	ldr	r1, [pc, #4]	; (8007ea8 <_cleanup_r+0x8>)
 8007ea2:	f000 b8af 	b.w	8008004 <_fwalk_reent>
 8007ea6:	bf00      	nop
 8007ea8:	08007de1 	.word	0x08007de1

08007eac <__sfmoreglue>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	2268      	movs	r2, #104	; 0x68
 8007eb0:	1e4d      	subs	r5, r1, #1
 8007eb2:	4355      	muls	r5, r2
 8007eb4:	460e      	mov	r6, r1
 8007eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eba:	f000 f99f 	bl	80081fc <_malloc_r>
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	b140      	cbz	r0, 8007ed4 <__sfmoreglue+0x28>
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ec8:	300c      	adds	r0, #12
 8007eca:	60a0      	str	r0, [r4, #8]
 8007ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ed0:	f7ff fcdc 	bl	800788c <memset>
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}

08007ed8 <__sfp_lock_acquire>:
 8007ed8:	4801      	ldr	r0, [pc, #4]	; (8007ee0 <__sfp_lock_acquire+0x8>)
 8007eda:	f000 b8b3 	b.w	8008044 <__retarget_lock_acquire_recursive>
 8007ede:	bf00      	nop
 8007ee0:	20000609 	.word	0x20000609

08007ee4 <__sfp_lock_release>:
 8007ee4:	4801      	ldr	r0, [pc, #4]	; (8007eec <__sfp_lock_release+0x8>)
 8007ee6:	f000 b8ae 	b.w	8008046 <__retarget_lock_release_recursive>
 8007eea:	bf00      	nop
 8007eec:	20000609 	.word	0x20000609

08007ef0 <__sinit_lock_acquire>:
 8007ef0:	4801      	ldr	r0, [pc, #4]	; (8007ef8 <__sinit_lock_acquire+0x8>)
 8007ef2:	f000 b8a7 	b.w	8008044 <__retarget_lock_acquire_recursive>
 8007ef6:	bf00      	nop
 8007ef8:	2000060a 	.word	0x2000060a

08007efc <__sinit_lock_release>:
 8007efc:	4801      	ldr	r0, [pc, #4]	; (8007f04 <__sinit_lock_release+0x8>)
 8007efe:	f000 b8a2 	b.w	8008046 <__retarget_lock_release_recursive>
 8007f02:	bf00      	nop
 8007f04:	2000060a 	.word	0x2000060a

08007f08 <__sinit>:
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	f7ff fff0 	bl	8007ef0 <__sinit_lock_acquire>
 8007f10:	69a3      	ldr	r3, [r4, #24]
 8007f12:	b11b      	cbz	r3, 8007f1c <__sinit+0x14>
 8007f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f18:	f7ff bff0 	b.w	8007efc <__sinit_lock_release>
 8007f1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f20:	6523      	str	r3, [r4, #80]	; 0x50
 8007f22:	4b13      	ldr	r3, [pc, #76]	; (8007f70 <__sinit+0x68>)
 8007f24:	4a13      	ldr	r2, [pc, #76]	; (8007f74 <__sinit+0x6c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f2a:	42a3      	cmp	r3, r4
 8007f2c:	bf04      	itt	eq
 8007f2e:	2301      	moveq	r3, #1
 8007f30:	61a3      	streq	r3, [r4, #24]
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 f820 	bl	8007f78 <__sfp>
 8007f38:	6060      	str	r0, [r4, #4]
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 f81c 	bl	8007f78 <__sfp>
 8007f40:	60a0      	str	r0, [r4, #8]
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 f818 	bl	8007f78 <__sfp>
 8007f48:	2200      	movs	r2, #0
 8007f4a:	60e0      	str	r0, [r4, #12]
 8007f4c:	2104      	movs	r1, #4
 8007f4e:	6860      	ldr	r0, [r4, #4]
 8007f50:	f7ff ff82 	bl	8007e58 <std>
 8007f54:	68a0      	ldr	r0, [r4, #8]
 8007f56:	2201      	movs	r2, #1
 8007f58:	2109      	movs	r1, #9
 8007f5a:	f7ff ff7d 	bl	8007e58 <std>
 8007f5e:	68e0      	ldr	r0, [r4, #12]
 8007f60:	2202      	movs	r2, #2
 8007f62:	2112      	movs	r1, #18
 8007f64:	f7ff ff78 	bl	8007e58 <std>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	61a3      	str	r3, [r4, #24]
 8007f6c:	e7d2      	b.n	8007f14 <__sinit+0xc>
 8007f6e:	bf00      	nop
 8007f70:	08009a04 	.word	0x08009a04
 8007f74:	08007ea1 	.word	0x08007ea1

08007f78 <__sfp>:
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	4607      	mov	r7, r0
 8007f7c:	f7ff ffac 	bl	8007ed8 <__sfp_lock_acquire>
 8007f80:	4b1e      	ldr	r3, [pc, #120]	; (8007ffc <__sfp+0x84>)
 8007f82:	681e      	ldr	r6, [r3, #0]
 8007f84:	69b3      	ldr	r3, [r6, #24]
 8007f86:	b913      	cbnz	r3, 8007f8e <__sfp+0x16>
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f7ff ffbd 	bl	8007f08 <__sinit>
 8007f8e:	3648      	adds	r6, #72	; 0x48
 8007f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	d503      	bpl.n	8007fa0 <__sfp+0x28>
 8007f98:	6833      	ldr	r3, [r6, #0]
 8007f9a:	b30b      	cbz	r3, 8007fe0 <__sfp+0x68>
 8007f9c:	6836      	ldr	r6, [r6, #0]
 8007f9e:	e7f7      	b.n	8007f90 <__sfp+0x18>
 8007fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fa4:	b9d5      	cbnz	r5, 8007fdc <__sfp+0x64>
 8007fa6:	4b16      	ldr	r3, [pc, #88]	; (8008000 <__sfp+0x88>)
 8007fa8:	60e3      	str	r3, [r4, #12]
 8007faa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fae:	6665      	str	r5, [r4, #100]	; 0x64
 8007fb0:	f000 f847 	bl	8008042 <__retarget_lock_init_recursive>
 8007fb4:	f7ff ff96 	bl	8007ee4 <__sfp_lock_release>
 8007fb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fc0:	6025      	str	r5, [r4, #0]
 8007fc2:	61a5      	str	r5, [r4, #24]
 8007fc4:	2208      	movs	r2, #8
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fcc:	f7ff fc5e 	bl	800788c <memset>
 8007fd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fd8:	4620      	mov	r0, r4
 8007fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fdc:	3468      	adds	r4, #104	; 0x68
 8007fde:	e7d9      	b.n	8007f94 <__sfp+0x1c>
 8007fe0:	2104      	movs	r1, #4
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	f7ff ff62 	bl	8007eac <__sfmoreglue>
 8007fe8:	4604      	mov	r4, r0
 8007fea:	6030      	str	r0, [r6, #0]
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d1d5      	bne.n	8007f9c <__sfp+0x24>
 8007ff0:	f7ff ff78 	bl	8007ee4 <__sfp_lock_release>
 8007ff4:	230c      	movs	r3, #12
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	e7ee      	b.n	8007fd8 <__sfp+0x60>
 8007ffa:	bf00      	nop
 8007ffc:	08009a04 	.word	0x08009a04
 8008000:	ffff0001 	.word	0xffff0001

08008004 <_fwalk_reent>:
 8008004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008008:	4606      	mov	r6, r0
 800800a:	4688      	mov	r8, r1
 800800c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008010:	2700      	movs	r7, #0
 8008012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008016:	f1b9 0901 	subs.w	r9, r9, #1
 800801a:	d505      	bpl.n	8008028 <_fwalk_reent+0x24>
 800801c:	6824      	ldr	r4, [r4, #0]
 800801e:	2c00      	cmp	r4, #0
 8008020:	d1f7      	bne.n	8008012 <_fwalk_reent+0xe>
 8008022:	4638      	mov	r0, r7
 8008024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008028:	89ab      	ldrh	r3, [r5, #12]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d907      	bls.n	800803e <_fwalk_reent+0x3a>
 800802e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008032:	3301      	adds	r3, #1
 8008034:	d003      	beq.n	800803e <_fwalk_reent+0x3a>
 8008036:	4629      	mov	r1, r5
 8008038:	4630      	mov	r0, r6
 800803a:	47c0      	blx	r8
 800803c:	4307      	orrs	r7, r0
 800803e:	3568      	adds	r5, #104	; 0x68
 8008040:	e7e9      	b.n	8008016 <_fwalk_reent+0x12>

08008042 <__retarget_lock_init_recursive>:
 8008042:	4770      	bx	lr

08008044 <__retarget_lock_acquire_recursive>:
 8008044:	4770      	bx	lr

08008046 <__retarget_lock_release_recursive>:
 8008046:	4770      	bx	lr

08008048 <__swhatbuf_r>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	460e      	mov	r6, r1
 800804c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008050:	2900      	cmp	r1, #0
 8008052:	b096      	sub	sp, #88	; 0x58
 8008054:	4614      	mov	r4, r2
 8008056:	461d      	mov	r5, r3
 8008058:	da08      	bge.n	800806c <__swhatbuf_r+0x24>
 800805a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	602a      	str	r2, [r5, #0]
 8008062:	061a      	lsls	r2, r3, #24
 8008064:	d410      	bmi.n	8008088 <__swhatbuf_r+0x40>
 8008066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800806a:	e00e      	b.n	800808a <__swhatbuf_r+0x42>
 800806c:	466a      	mov	r2, sp
 800806e:	f000 fc9d 	bl	80089ac <_fstat_r>
 8008072:	2800      	cmp	r0, #0
 8008074:	dbf1      	blt.n	800805a <__swhatbuf_r+0x12>
 8008076:	9a01      	ldr	r2, [sp, #4]
 8008078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800807c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008080:	425a      	negs	r2, r3
 8008082:	415a      	adcs	r2, r3
 8008084:	602a      	str	r2, [r5, #0]
 8008086:	e7ee      	b.n	8008066 <__swhatbuf_r+0x1e>
 8008088:	2340      	movs	r3, #64	; 0x40
 800808a:	2000      	movs	r0, #0
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	b016      	add	sp, #88	; 0x58
 8008090:	bd70      	pop	{r4, r5, r6, pc}
	...

08008094 <__smakebuf_r>:
 8008094:	898b      	ldrh	r3, [r1, #12]
 8008096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008098:	079d      	lsls	r5, r3, #30
 800809a:	4606      	mov	r6, r0
 800809c:	460c      	mov	r4, r1
 800809e:	d507      	bpl.n	80080b0 <__smakebuf_r+0x1c>
 80080a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	6123      	str	r3, [r4, #16]
 80080a8:	2301      	movs	r3, #1
 80080aa:	6163      	str	r3, [r4, #20]
 80080ac:	b002      	add	sp, #8
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	ab01      	add	r3, sp, #4
 80080b2:	466a      	mov	r2, sp
 80080b4:	f7ff ffc8 	bl	8008048 <__swhatbuf_r>
 80080b8:	9900      	ldr	r1, [sp, #0]
 80080ba:	4605      	mov	r5, r0
 80080bc:	4630      	mov	r0, r6
 80080be:	f000 f89d 	bl	80081fc <_malloc_r>
 80080c2:	b948      	cbnz	r0, 80080d8 <__smakebuf_r+0x44>
 80080c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c8:	059a      	lsls	r2, r3, #22
 80080ca:	d4ef      	bmi.n	80080ac <__smakebuf_r+0x18>
 80080cc:	f023 0303 	bic.w	r3, r3, #3
 80080d0:	f043 0302 	orr.w	r3, r3, #2
 80080d4:	81a3      	strh	r3, [r4, #12]
 80080d6:	e7e3      	b.n	80080a0 <__smakebuf_r+0xc>
 80080d8:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <__smakebuf_r+0x7c>)
 80080da:	62b3      	str	r3, [r6, #40]	; 0x28
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	6020      	str	r0, [r4, #0]
 80080e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e4:	81a3      	strh	r3, [r4, #12]
 80080e6:	9b00      	ldr	r3, [sp, #0]
 80080e8:	6163      	str	r3, [r4, #20]
 80080ea:	9b01      	ldr	r3, [sp, #4]
 80080ec:	6120      	str	r0, [r4, #16]
 80080ee:	b15b      	cbz	r3, 8008108 <__smakebuf_r+0x74>
 80080f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080f4:	4630      	mov	r0, r6
 80080f6:	f000 fc6b 	bl	80089d0 <_isatty_r>
 80080fa:	b128      	cbz	r0, 8008108 <__smakebuf_r+0x74>
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	f023 0303 	bic.w	r3, r3, #3
 8008102:	f043 0301 	orr.w	r3, r3, #1
 8008106:	81a3      	strh	r3, [r4, #12]
 8008108:	89a0      	ldrh	r0, [r4, #12]
 800810a:	4305      	orrs	r5, r0
 800810c:	81a5      	strh	r5, [r4, #12]
 800810e:	e7cd      	b.n	80080ac <__smakebuf_r+0x18>
 8008110:	08007ea1 	.word	0x08007ea1

08008114 <malloc>:
 8008114:	4b02      	ldr	r3, [pc, #8]	; (8008120 <malloc+0xc>)
 8008116:	4601      	mov	r1, r0
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	f000 b86f 	b.w	80081fc <_malloc_r>
 800811e:	bf00      	nop
 8008120:	2000000c 	.word	0x2000000c

08008124 <_free_r>:
 8008124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008126:	2900      	cmp	r1, #0
 8008128:	d044      	beq.n	80081b4 <_free_r+0x90>
 800812a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800812e:	9001      	str	r0, [sp, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f1a1 0404 	sub.w	r4, r1, #4
 8008136:	bfb8      	it	lt
 8008138:	18e4      	addlt	r4, r4, r3
 800813a:	f000 fc6b 	bl	8008a14 <__malloc_lock>
 800813e:	4a1e      	ldr	r2, [pc, #120]	; (80081b8 <_free_r+0x94>)
 8008140:	9801      	ldr	r0, [sp, #4]
 8008142:	6813      	ldr	r3, [r2, #0]
 8008144:	b933      	cbnz	r3, 8008154 <_free_r+0x30>
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	6014      	str	r4, [r2, #0]
 800814a:	b003      	add	sp, #12
 800814c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008150:	f000 bc66 	b.w	8008a20 <__malloc_unlock>
 8008154:	42a3      	cmp	r3, r4
 8008156:	d908      	bls.n	800816a <_free_r+0x46>
 8008158:	6825      	ldr	r5, [r4, #0]
 800815a:	1961      	adds	r1, r4, r5
 800815c:	428b      	cmp	r3, r1
 800815e:	bf01      	itttt	eq
 8008160:	6819      	ldreq	r1, [r3, #0]
 8008162:	685b      	ldreq	r3, [r3, #4]
 8008164:	1949      	addeq	r1, r1, r5
 8008166:	6021      	streq	r1, [r4, #0]
 8008168:	e7ed      	b.n	8008146 <_free_r+0x22>
 800816a:	461a      	mov	r2, r3
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	b10b      	cbz	r3, 8008174 <_free_r+0x50>
 8008170:	42a3      	cmp	r3, r4
 8008172:	d9fa      	bls.n	800816a <_free_r+0x46>
 8008174:	6811      	ldr	r1, [r2, #0]
 8008176:	1855      	adds	r5, r2, r1
 8008178:	42a5      	cmp	r5, r4
 800817a:	d10b      	bne.n	8008194 <_free_r+0x70>
 800817c:	6824      	ldr	r4, [r4, #0]
 800817e:	4421      	add	r1, r4
 8008180:	1854      	adds	r4, r2, r1
 8008182:	42a3      	cmp	r3, r4
 8008184:	6011      	str	r1, [r2, #0]
 8008186:	d1e0      	bne.n	800814a <_free_r+0x26>
 8008188:	681c      	ldr	r4, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	6053      	str	r3, [r2, #4]
 800818e:	4421      	add	r1, r4
 8008190:	6011      	str	r1, [r2, #0]
 8008192:	e7da      	b.n	800814a <_free_r+0x26>
 8008194:	d902      	bls.n	800819c <_free_r+0x78>
 8008196:	230c      	movs	r3, #12
 8008198:	6003      	str	r3, [r0, #0]
 800819a:	e7d6      	b.n	800814a <_free_r+0x26>
 800819c:	6825      	ldr	r5, [r4, #0]
 800819e:	1961      	adds	r1, r4, r5
 80081a0:	428b      	cmp	r3, r1
 80081a2:	bf04      	itt	eq
 80081a4:	6819      	ldreq	r1, [r3, #0]
 80081a6:	685b      	ldreq	r3, [r3, #4]
 80081a8:	6063      	str	r3, [r4, #4]
 80081aa:	bf04      	itt	eq
 80081ac:	1949      	addeq	r1, r1, r5
 80081ae:	6021      	streq	r1, [r4, #0]
 80081b0:	6054      	str	r4, [r2, #4]
 80081b2:	e7ca      	b.n	800814a <_free_r+0x26>
 80081b4:	b003      	add	sp, #12
 80081b6:	bd30      	pop	{r4, r5, pc}
 80081b8:	2000060c 	.word	0x2000060c

080081bc <sbrk_aligned>:
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	4e0e      	ldr	r6, [pc, #56]	; (80081f8 <sbrk_aligned+0x3c>)
 80081c0:	460c      	mov	r4, r1
 80081c2:	6831      	ldr	r1, [r6, #0]
 80081c4:	4605      	mov	r5, r0
 80081c6:	b911      	cbnz	r1, 80081ce <sbrk_aligned+0x12>
 80081c8:	f000 fb7a 	bl	80088c0 <_sbrk_r>
 80081cc:	6030      	str	r0, [r6, #0]
 80081ce:	4621      	mov	r1, r4
 80081d0:	4628      	mov	r0, r5
 80081d2:	f000 fb75 	bl	80088c0 <_sbrk_r>
 80081d6:	1c43      	adds	r3, r0, #1
 80081d8:	d00a      	beq.n	80081f0 <sbrk_aligned+0x34>
 80081da:	1cc4      	adds	r4, r0, #3
 80081dc:	f024 0403 	bic.w	r4, r4, #3
 80081e0:	42a0      	cmp	r0, r4
 80081e2:	d007      	beq.n	80081f4 <sbrk_aligned+0x38>
 80081e4:	1a21      	subs	r1, r4, r0
 80081e6:	4628      	mov	r0, r5
 80081e8:	f000 fb6a 	bl	80088c0 <_sbrk_r>
 80081ec:	3001      	adds	r0, #1
 80081ee:	d101      	bne.n	80081f4 <sbrk_aligned+0x38>
 80081f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80081f4:	4620      	mov	r0, r4
 80081f6:	bd70      	pop	{r4, r5, r6, pc}
 80081f8:	20000610 	.word	0x20000610

080081fc <_malloc_r>:
 80081fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008200:	1ccd      	adds	r5, r1, #3
 8008202:	f025 0503 	bic.w	r5, r5, #3
 8008206:	3508      	adds	r5, #8
 8008208:	2d0c      	cmp	r5, #12
 800820a:	bf38      	it	cc
 800820c:	250c      	movcc	r5, #12
 800820e:	2d00      	cmp	r5, #0
 8008210:	4607      	mov	r7, r0
 8008212:	db01      	blt.n	8008218 <_malloc_r+0x1c>
 8008214:	42a9      	cmp	r1, r5
 8008216:	d905      	bls.n	8008224 <_malloc_r+0x28>
 8008218:	230c      	movs	r3, #12
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	2600      	movs	r6, #0
 800821e:	4630      	mov	r0, r6
 8008220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008224:	4e2e      	ldr	r6, [pc, #184]	; (80082e0 <_malloc_r+0xe4>)
 8008226:	f000 fbf5 	bl	8008a14 <__malloc_lock>
 800822a:	6833      	ldr	r3, [r6, #0]
 800822c:	461c      	mov	r4, r3
 800822e:	bb34      	cbnz	r4, 800827e <_malloc_r+0x82>
 8008230:	4629      	mov	r1, r5
 8008232:	4638      	mov	r0, r7
 8008234:	f7ff ffc2 	bl	80081bc <sbrk_aligned>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	4604      	mov	r4, r0
 800823c:	d14d      	bne.n	80082da <_malloc_r+0xde>
 800823e:	6834      	ldr	r4, [r6, #0]
 8008240:	4626      	mov	r6, r4
 8008242:	2e00      	cmp	r6, #0
 8008244:	d140      	bne.n	80082c8 <_malloc_r+0xcc>
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	4631      	mov	r1, r6
 800824a:	4638      	mov	r0, r7
 800824c:	eb04 0803 	add.w	r8, r4, r3
 8008250:	f000 fb36 	bl	80088c0 <_sbrk_r>
 8008254:	4580      	cmp	r8, r0
 8008256:	d13a      	bne.n	80082ce <_malloc_r+0xd2>
 8008258:	6821      	ldr	r1, [r4, #0]
 800825a:	3503      	adds	r5, #3
 800825c:	1a6d      	subs	r5, r5, r1
 800825e:	f025 0503 	bic.w	r5, r5, #3
 8008262:	3508      	adds	r5, #8
 8008264:	2d0c      	cmp	r5, #12
 8008266:	bf38      	it	cc
 8008268:	250c      	movcc	r5, #12
 800826a:	4629      	mov	r1, r5
 800826c:	4638      	mov	r0, r7
 800826e:	f7ff ffa5 	bl	80081bc <sbrk_aligned>
 8008272:	3001      	adds	r0, #1
 8008274:	d02b      	beq.n	80082ce <_malloc_r+0xd2>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	442b      	add	r3, r5
 800827a:	6023      	str	r3, [r4, #0]
 800827c:	e00e      	b.n	800829c <_malloc_r+0xa0>
 800827e:	6822      	ldr	r2, [r4, #0]
 8008280:	1b52      	subs	r2, r2, r5
 8008282:	d41e      	bmi.n	80082c2 <_malloc_r+0xc6>
 8008284:	2a0b      	cmp	r2, #11
 8008286:	d916      	bls.n	80082b6 <_malloc_r+0xba>
 8008288:	1961      	adds	r1, r4, r5
 800828a:	42a3      	cmp	r3, r4
 800828c:	6025      	str	r5, [r4, #0]
 800828e:	bf18      	it	ne
 8008290:	6059      	strne	r1, [r3, #4]
 8008292:	6863      	ldr	r3, [r4, #4]
 8008294:	bf08      	it	eq
 8008296:	6031      	streq	r1, [r6, #0]
 8008298:	5162      	str	r2, [r4, r5]
 800829a:	604b      	str	r3, [r1, #4]
 800829c:	4638      	mov	r0, r7
 800829e:	f104 060b 	add.w	r6, r4, #11
 80082a2:	f000 fbbd 	bl	8008a20 <__malloc_unlock>
 80082a6:	f026 0607 	bic.w	r6, r6, #7
 80082aa:	1d23      	adds	r3, r4, #4
 80082ac:	1af2      	subs	r2, r6, r3
 80082ae:	d0b6      	beq.n	800821e <_malloc_r+0x22>
 80082b0:	1b9b      	subs	r3, r3, r6
 80082b2:	50a3      	str	r3, [r4, r2]
 80082b4:	e7b3      	b.n	800821e <_malloc_r+0x22>
 80082b6:	6862      	ldr	r2, [r4, #4]
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	bf0c      	ite	eq
 80082bc:	6032      	streq	r2, [r6, #0]
 80082be:	605a      	strne	r2, [r3, #4]
 80082c0:	e7ec      	b.n	800829c <_malloc_r+0xa0>
 80082c2:	4623      	mov	r3, r4
 80082c4:	6864      	ldr	r4, [r4, #4]
 80082c6:	e7b2      	b.n	800822e <_malloc_r+0x32>
 80082c8:	4634      	mov	r4, r6
 80082ca:	6876      	ldr	r6, [r6, #4]
 80082cc:	e7b9      	b.n	8008242 <_malloc_r+0x46>
 80082ce:	230c      	movs	r3, #12
 80082d0:	603b      	str	r3, [r7, #0]
 80082d2:	4638      	mov	r0, r7
 80082d4:	f000 fba4 	bl	8008a20 <__malloc_unlock>
 80082d8:	e7a1      	b.n	800821e <_malloc_r+0x22>
 80082da:	6025      	str	r5, [r4, #0]
 80082dc:	e7de      	b.n	800829c <_malloc_r+0xa0>
 80082de:	bf00      	nop
 80082e0:	2000060c 	.word	0x2000060c

080082e4 <__sfputc_r>:
 80082e4:	6893      	ldr	r3, [r2, #8]
 80082e6:	3b01      	subs	r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	b410      	push	{r4}
 80082ec:	6093      	str	r3, [r2, #8]
 80082ee:	da08      	bge.n	8008302 <__sfputc_r+0x1e>
 80082f0:	6994      	ldr	r4, [r2, #24]
 80082f2:	42a3      	cmp	r3, r4
 80082f4:	db01      	blt.n	80082fa <__sfputc_r+0x16>
 80082f6:	290a      	cmp	r1, #10
 80082f8:	d103      	bne.n	8008302 <__sfputc_r+0x1e>
 80082fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082fe:	f7ff bc29 	b.w	8007b54 <__swbuf_r>
 8008302:	6813      	ldr	r3, [r2, #0]
 8008304:	1c58      	adds	r0, r3, #1
 8008306:	6010      	str	r0, [r2, #0]
 8008308:	7019      	strb	r1, [r3, #0]
 800830a:	4608      	mov	r0, r1
 800830c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008310:	4770      	bx	lr

08008312 <__sfputs_r>:
 8008312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008314:	4606      	mov	r6, r0
 8008316:	460f      	mov	r7, r1
 8008318:	4614      	mov	r4, r2
 800831a:	18d5      	adds	r5, r2, r3
 800831c:	42ac      	cmp	r4, r5
 800831e:	d101      	bne.n	8008324 <__sfputs_r+0x12>
 8008320:	2000      	movs	r0, #0
 8008322:	e007      	b.n	8008334 <__sfputs_r+0x22>
 8008324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008328:	463a      	mov	r2, r7
 800832a:	4630      	mov	r0, r6
 800832c:	f7ff ffda 	bl	80082e4 <__sfputc_r>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d1f3      	bne.n	800831c <__sfputs_r+0xa>
 8008334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008338 <_vfiprintf_r>:
 8008338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	460d      	mov	r5, r1
 800833e:	b09d      	sub	sp, #116	; 0x74
 8008340:	4614      	mov	r4, r2
 8008342:	4698      	mov	r8, r3
 8008344:	4606      	mov	r6, r0
 8008346:	b118      	cbz	r0, 8008350 <_vfiprintf_r+0x18>
 8008348:	6983      	ldr	r3, [r0, #24]
 800834a:	b90b      	cbnz	r3, 8008350 <_vfiprintf_r+0x18>
 800834c:	f7ff fddc 	bl	8007f08 <__sinit>
 8008350:	4b89      	ldr	r3, [pc, #548]	; (8008578 <_vfiprintf_r+0x240>)
 8008352:	429d      	cmp	r5, r3
 8008354:	d11b      	bne.n	800838e <_vfiprintf_r+0x56>
 8008356:	6875      	ldr	r5, [r6, #4]
 8008358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800835a:	07d9      	lsls	r1, r3, #31
 800835c:	d405      	bmi.n	800836a <_vfiprintf_r+0x32>
 800835e:	89ab      	ldrh	r3, [r5, #12]
 8008360:	059a      	lsls	r2, r3, #22
 8008362:	d402      	bmi.n	800836a <_vfiprintf_r+0x32>
 8008364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008366:	f7ff fe6d 	bl	8008044 <__retarget_lock_acquire_recursive>
 800836a:	89ab      	ldrh	r3, [r5, #12]
 800836c:	071b      	lsls	r3, r3, #28
 800836e:	d501      	bpl.n	8008374 <_vfiprintf_r+0x3c>
 8008370:	692b      	ldr	r3, [r5, #16]
 8008372:	b9eb      	cbnz	r3, 80083b0 <_vfiprintf_r+0x78>
 8008374:	4629      	mov	r1, r5
 8008376:	4630      	mov	r0, r6
 8008378:	f7ff fc3e 	bl	8007bf8 <__swsetup_r>
 800837c:	b1c0      	cbz	r0, 80083b0 <_vfiprintf_r+0x78>
 800837e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008380:	07dc      	lsls	r4, r3, #31
 8008382:	d50e      	bpl.n	80083a2 <_vfiprintf_r+0x6a>
 8008384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008388:	b01d      	add	sp, #116	; 0x74
 800838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838e:	4b7b      	ldr	r3, [pc, #492]	; (800857c <_vfiprintf_r+0x244>)
 8008390:	429d      	cmp	r5, r3
 8008392:	d101      	bne.n	8008398 <_vfiprintf_r+0x60>
 8008394:	68b5      	ldr	r5, [r6, #8]
 8008396:	e7df      	b.n	8008358 <_vfiprintf_r+0x20>
 8008398:	4b79      	ldr	r3, [pc, #484]	; (8008580 <_vfiprintf_r+0x248>)
 800839a:	429d      	cmp	r5, r3
 800839c:	bf08      	it	eq
 800839e:	68f5      	ldreq	r5, [r6, #12]
 80083a0:	e7da      	b.n	8008358 <_vfiprintf_r+0x20>
 80083a2:	89ab      	ldrh	r3, [r5, #12]
 80083a4:	0598      	lsls	r0, r3, #22
 80083a6:	d4ed      	bmi.n	8008384 <_vfiprintf_r+0x4c>
 80083a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083aa:	f7ff fe4c 	bl	8008046 <__retarget_lock_release_recursive>
 80083ae:	e7e9      	b.n	8008384 <_vfiprintf_r+0x4c>
 80083b0:	2300      	movs	r3, #0
 80083b2:	9309      	str	r3, [sp, #36]	; 0x24
 80083b4:	2320      	movs	r3, #32
 80083b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80083be:	2330      	movs	r3, #48	; 0x30
 80083c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008584 <_vfiprintf_r+0x24c>
 80083c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083c8:	f04f 0901 	mov.w	r9, #1
 80083cc:	4623      	mov	r3, r4
 80083ce:	469a      	mov	sl, r3
 80083d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083d4:	b10a      	cbz	r2, 80083da <_vfiprintf_r+0xa2>
 80083d6:	2a25      	cmp	r2, #37	; 0x25
 80083d8:	d1f9      	bne.n	80083ce <_vfiprintf_r+0x96>
 80083da:	ebba 0b04 	subs.w	fp, sl, r4
 80083de:	d00b      	beq.n	80083f8 <_vfiprintf_r+0xc0>
 80083e0:	465b      	mov	r3, fp
 80083e2:	4622      	mov	r2, r4
 80083e4:	4629      	mov	r1, r5
 80083e6:	4630      	mov	r0, r6
 80083e8:	f7ff ff93 	bl	8008312 <__sfputs_r>
 80083ec:	3001      	adds	r0, #1
 80083ee:	f000 80aa 	beq.w	8008546 <_vfiprintf_r+0x20e>
 80083f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f4:	445a      	add	r2, fp
 80083f6:	9209      	str	r2, [sp, #36]	; 0x24
 80083f8:	f89a 3000 	ldrb.w	r3, [sl]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 80a2 	beq.w	8008546 <_vfiprintf_r+0x20e>
 8008402:	2300      	movs	r3, #0
 8008404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800840c:	f10a 0a01 	add.w	sl, sl, #1
 8008410:	9304      	str	r3, [sp, #16]
 8008412:	9307      	str	r3, [sp, #28]
 8008414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008418:	931a      	str	r3, [sp, #104]	; 0x68
 800841a:	4654      	mov	r4, sl
 800841c:	2205      	movs	r2, #5
 800841e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008422:	4858      	ldr	r0, [pc, #352]	; (8008584 <_vfiprintf_r+0x24c>)
 8008424:	f7f7 fed4 	bl	80001d0 <memchr>
 8008428:	9a04      	ldr	r2, [sp, #16]
 800842a:	b9d8      	cbnz	r0, 8008464 <_vfiprintf_r+0x12c>
 800842c:	06d1      	lsls	r1, r2, #27
 800842e:	bf44      	itt	mi
 8008430:	2320      	movmi	r3, #32
 8008432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008436:	0713      	lsls	r3, r2, #28
 8008438:	bf44      	itt	mi
 800843a:	232b      	movmi	r3, #43	; 0x2b
 800843c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008440:	f89a 3000 	ldrb.w	r3, [sl]
 8008444:	2b2a      	cmp	r3, #42	; 0x2a
 8008446:	d015      	beq.n	8008474 <_vfiprintf_r+0x13c>
 8008448:	9a07      	ldr	r2, [sp, #28]
 800844a:	4654      	mov	r4, sl
 800844c:	2000      	movs	r0, #0
 800844e:	f04f 0c0a 	mov.w	ip, #10
 8008452:	4621      	mov	r1, r4
 8008454:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008458:	3b30      	subs	r3, #48	; 0x30
 800845a:	2b09      	cmp	r3, #9
 800845c:	d94e      	bls.n	80084fc <_vfiprintf_r+0x1c4>
 800845e:	b1b0      	cbz	r0, 800848e <_vfiprintf_r+0x156>
 8008460:	9207      	str	r2, [sp, #28]
 8008462:	e014      	b.n	800848e <_vfiprintf_r+0x156>
 8008464:	eba0 0308 	sub.w	r3, r0, r8
 8008468:	fa09 f303 	lsl.w	r3, r9, r3
 800846c:	4313      	orrs	r3, r2
 800846e:	9304      	str	r3, [sp, #16]
 8008470:	46a2      	mov	sl, r4
 8008472:	e7d2      	b.n	800841a <_vfiprintf_r+0xe2>
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	1d19      	adds	r1, r3, #4
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	9103      	str	r1, [sp, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	bfbb      	ittet	lt
 8008480:	425b      	neglt	r3, r3
 8008482:	f042 0202 	orrlt.w	r2, r2, #2
 8008486:	9307      	strge	r3, [sp, #28]
 8008488:	9307      	strlt	r3, [sp, #28]
 800848a:	bfb8      	it	lt
 800848c:	9204      	strlt	r2, [sp, #16]
 800848e:	7823      	ldrb	r3, [r4, #0]
 8008490:	2b2e      	cmp	r3, #46	; 0x2e
 8008492:	d10c      	bne.n	80084ae <_vfiprintf_r+0x176>
 8008494:	7863      	ldrb	r3, [r4, #1]
 8008496:	2b2a      	cmp	r3, #42	; 0x2a
 8008498:	d135      	bne.n	8008506 <_vfiprintf_r+0x1ce>
 800849a:	9b03      	ldr	r3, [sp, #12]
 800849c:	1d1a      	adds	r2, r3, #4
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	9203      	str	r2, [sp, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bfb8      	it	lt
 80084a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084aa:	3402      	adds	r4, #2
 80084ac:	9305      	str	r3, [sp, #20]
 80084ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008594 <_vfiprintf_r+0x25c>
 80084b2:	7821      	ldrb	r1, [r4, #0]
 80084b4:	2203      	movs	r2, #3
 80084b6:	4650      	mov	r0, sl
 80084b8:	f7f7 fe8a 	bl	80001d0 <memchr>
 80084bc:	b140      	cbz	r0, 80084d0 <_vfiprintf_r+0x198>
 80084be:	2340      	movs	r3, #64	; 0x40
 80084c0:	eba0 000a 	sub.w	r0, r0, sl
 80084c4:	fa03 f000 	lsl.w	r0, r3, r0
 80084c8:	9b04      	ldr	r3, [sp, #16]
 80084ca:	4303      	orrs	r3, r0
 80084cc:	3401      	adds	r4, #1
 80084ce:	9304      	str	r3, [sp, #16]
 80084d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d4:	482c      	ldr	r0, [pc, #176]	; (8008588 <_vfiprintf_r+0x250>)
 80084d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084da:	2206      	movs	r2, #6
 80084dc:	f7f7 fe78 	bl	80001d0 <memchr>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d03f      	beq.n	8008564 <_vfiprintf_r+0x22c>
 80084e4:	4b29      	ldr	r3, [pc, #164]	; (800858c <_vfiprintf_r+0x254>)
 80084e6:	bb1b      	cbnz	r3, 8008530 <_vfiprintf_r+0x1f8>
 80084e8:	9b03      	ldr	r3, [sp, #12]
 80084ea:	3307      	adds	r3, #7
 80084ec:	f023 0307 	bic.w	r3, r3, #7
 80084f0:	3308      	adds	r3, #8
 80084f2:	9303      	str	r3, [sp, #12]
 80084f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f6:	443b      	add	r3, r7
 80084f8:	9309      	str	r3, [sp, #36]	; 0x24
 80084fa:	e767      	b.n	80083cc <_vfiprintf_r+0x94>
 80084fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008500:	460c      	mov	r4, r1
 8008502:	2001      	movs	r0, #1
 8008504:	e7a5      	b.n	8008452 <_vfiprintf_r+0x11a>
 8008506:	2300      	movs	r3, #0
 8008508:	3401      	adds	r4, #1
 800850a:	9305      	str	r3, [sp, #20]
 800850c:	4619      	mov	r1, r3
 800850e:	f04f 0c0a 	mov.w	ip, #10
 8008512:	4620      	mov	r0, r4
 8008514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008518:	3a30      	subs	r2, #48	; 0x30
 800851a:	2a09      	cmp	r2, #9
 800851c:	d903      	bls.n	8008526 <_vfiprintf_r+0x1ee>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0c5      	beq.n	80084ae <_vfiprintf_r+0x176>
 8008522:	9105      	str	r1, [sp, #20]
 8008524:	e7c3      	b.n	80084ae <_vfiprintf_r+0x176>
 8008526:	fb0c 2101 	mla	r1, ip, r1, r2
 800852a:	4604      	mov	r4, r0
 800852c:	2301      	movs	r3, #1
 800852e:	e7f0      	b.n	8008512 <_vfiprintf_r+0x1da>
 8008530:	ab03      	add	r3, sp, #12
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	462a      	mov	r2, r5
 8008536:	4b16      	ldr	r3, [pc, #88]	; (8008590 <_vfiprintf_r+0x258>)
 8008538:	a904      	add	r1, sp, #16
 800853a:	4630      	mov	r0, r6
 800853c:	f3af 8000 	nop.w
 8008540:	4607      	mov	r7, r0
 8008542:	1c78      	adds	r0, r7, #1
 8008544:	d1d6      	bne.n	80084f4 <_vfiprintf_r+0x1bc>
 8008546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008548:	07d9      	lsls	r1, r3, #31
 800854a:	d405      	bmi.n	8008558 <_vfiprintf_r+0x220>
 800854c:	89ab      	ldrh	r3, [r5, #12]
 800854e:	059a      	lsls	r2, r3, #22
 8008550:	d402      	bmi.n	8008558 <_vfiprintf_r+0x220>
 8008552:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008554:	f7ff fd77 	bl	8008046 <__retarget_lock_release_recursive>
 8008558:	89ab      	ldrh	r3, [r5, #12]
 800855a:	065b      	lsls	r3, r3, #25
 800855c:	f53f af12 	bmi.w	8008384 <_vfiprintf_r+0x4c>
 8008560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008562:	e711      	b.n	8008388 <_vfiprintf_r+0x50>
 8008564:	ab03      	add	r3, sp, #12
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	462a      	mov	r2, r5
 800856a:	4b09      	ldr	r3, [pc, #36]	; (8008590 <_vfiprintf_r+0x258>)
 800856c:	a904      	add	r1, sp, #16
 800856e:	4630      	mov	r0, r6
 8008570:	f000 f880 	bl	8008674 <_printf_i>
 8008574:	e7e4      	b.n	8008540 <_vfiprintf_r+0x208>
 8008576:	bf00      	nop
 8008578:	08009a28 	.word	0x08009a28
 800857c:	08009a48 	.word	0x08009a48
 8008580:	08009a08 	.word	0x08009a08
 8008584:	08009a68 	.word	0x08009a68
 8008588:	08009a72 	.word	0x08009a72
 800858c:	00000000 	.word	0x00000000
 8008590:	08008313 	.word	0x08008313
 8008594:	08009a6e 	.word	0x08009a6e

08008598 <_printf_common>:
 8008598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800859c:	4616      	mov	r6, r2
 800859e:	4699      	mov	r9, r3
 80085a0:	688a      	ldr	r2, [r1, #8]
 80085a2:	690b      	ldr	r3, [r1, #16]
 80085a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085a8:	4293      	cmp	r3, r2
 80085aa:	bfb8      	it	lt
 80085ac:	4613      	movlt	r3, r2
 80085ae:	6033      	str	r3, [r6, #0]
 80085b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085b4:	4607      	mov	r7, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	b10a      	cbz	r2, 80085be <_printf_common+0x26>
 80085ba:	3301      	adds	r3, #1
 80085bc:	6033      	str	r3, [r6, #0]
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	0699      	lsls	r1, r3, #26
 80085c2:	bf42      	ittt	mi
 80085c4:	6833      	ldrmi	r3, [r6, #0]
 80085c6:	3302      	addmi	r3, #2
 80085c8:	6033      	strmi	r3, [r6, #0]
 80085ca:	6825      	ldr	r5, [r4, #0]
 80085cc:	f015 0506 	ands.w	r5, r5, #6
 80085d0:	d106      	bne.n	80085e0 <_printf_common+0x48>
 80085d2:	f104 0a19 	add.w	sl, r4, #25
 80085d6:	68e3      	ldr	r3, [r4, #12]
 80085d8:	6832      	ldr	r2, [r6, #0]
 80085da:	1a9b      	subs	r3, r3, r2
 80085dc:	42ab      	cmp	r3, r5
 80085de:	dc26      	bgt.n	800862e <_printf_common+0x96>
 80085e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085e4:	1e13      	subs	r3, r2, #0
 80085e6:	6822      	ldr	r2, [r4, #0]
 80085e8:	bf18      	it	ne
 80085ea:	2301      	movne	r3, #1
 80085ec:	0692      	lsls	r2, r2, #26
 80085ee:	d42b      	bmi.n	8008648 <_printf_common+0xb0>
 80085f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085f4:	4649      	mov	r1, r9
 80085f6:	4638      	mov	r0, r7
 80085f8:	47c0      	blx	r8
 80085fa:	3001      	adds	r0, #1
 80085fc:	d01e      	beq.n	800863c <_printf_common+0xa4>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	68e5      	ldr	r5, [r4, #12]
 8008602:	6832      	ldr	r2, [r6, #0]
 8008604:	f003 0306 	and.w	r3, r3, #6
 8008608:	2b04      	cmp	r3, #4
 800860a:	bf08      	it	eq
 800860c:	1aad      	subeq	r5, r5, r2
 800860e:	68a3      	ldr	r3, [r4, #8]
 8008610:	6922      	ldr	r2, [r4, #16]
 8008612:	bf0c      	ite	eq
 8008614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008618:	2500      	movne	r5, #0
 800861a:	4293      	cmp	r3, r2
 800861c:	bfc4      	itt	gt
 800861e:	1a9b      	subgt	r3, r3, r2
 8008620:	18ed      	addgt	r5, r5, r3
 8008622:	2600      	movs	r6, #0
 8008624:	341a      	adds	r4, #26
 8008626:	42b5      	cmp	r5, r6
 8008628:	d11a      	bne.n	8008660 <_printf_common+0xc8>
 800862a:	2000      	movs	r0, #0
 800862c:	e008      	b.n	8008640 <_printf_common+0xa8>
 800862e:	2301      	movs	r3, #1
 8008630:	4652      	mov	r2, sl
 8008632:	4649      	mov	r1, r9
 8008634:	4638      	mov	r0, r7
 8008636:	47c0      	blx	r8
 8008638:	3001      	adds	r0, #1
 800863a:	d103      	bne.n	8008644 <_printf_common+0xac>
 800863c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008644:	3501      	adds	r5, #1
 8008646:	e7c6      	b.n	80085d6 <_printf_common+0x3e>
 8008648:	18e1      	adds	r1, r4, r3
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	2030      	movs	r0, #48	; 0x30
 800864e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008652:	4422      	add	r2, r4
 8008654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800865c:	3302      	adds	r3, #2
 800865e:	e7c7      	b.n	80085f0 <_printf_common+0x58>
 8008660:	2301      	movs	r3, #1
 8008662:	4622      	mov	r2, r4
 8008664:	4649      	mov	r1, r9
 8008666:	4638      	mov	r0, r7
 8008668:	47c0      	blx	r8
 800866a:	3001      	adds	r0, #1
 800866c:	d0e6      	beq.n	800863c <_printf_common+0xa4>
 800866e:	3601      	adds	r6, #1
 8008670:	e7d9      	b.n	8008626 <_printf_common+0x8e>
	...

08008674 <_printf_i>:
 8008674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008678:	7e0f      	ldrb	r7, [r1, #24]
 800867a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800867c:	2f78      	cmp	r7, #120	; 0x78
 800867e:	4691      	mov	r9, r2
 8008680:	4680      	mov	r8, r0
 8008682:	460c      	mov	r4, r1
 8008684:	469a      	mov	sl, r3
 8008686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800868a:	d807      	bhi.n	800869c <_printf_i+0x28>
 800868c:	2f62      	cmp	r7, #98	; 0x62
 800868e:	d80a      	bhi.n	80086a6 <_printf_i+0x32>
 8008690:	2f00      	cmp	r7, #0
 8008692:	f000 80d8 	beq.w	8008846 <_printf_i+0x1d2>
 8008696:	2f58      	cmp	r7, #88	; 0x58
 8008698:	f000 80a3 	beq.w	80087e2 <_printf_i+0x16e>
 800869c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086a4:	e03a      	b.n	800871c <_printf_i+0xa8>
 80086a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086aa:	2b15      	cmp	r3, #21
 80086ac:	d8f6      	bhi.n	800869c <_printf_i+0x28>
 80086ae:	a101      	add	r1, pc, #4	; (adr r1, 80086b4 <_printf_i+0x40>)
 80086b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086b4:	0800870d 	.word	0x0800870d
 80086b8:	08008721 	.word	0x08008721
 80086bc:	0800869d 	.word	0x0800869d
 80086c0:	0800869d 	.word	0x0800869d
 80086c4:	0800869d 	.word	0x0800869d
 80086c8:	0800869d 	.word	0x0800869d
 80086cc:	08008721 	.word	0x08008721
 80086d0:	0800869d 	.word	0x0800869d
 80086d4:	0800869d 	.word	0x0800869d
 80086d8:	0800869d 	.word	0x0800869d
 80086dc:	0800869d 	.word	0x0800869d
 80086e0:	0800882d 	.word	0x0800882d
 80086e4:	08008751 	.word	0x08008751
 80086e8:	0800880f 	.word	0x0800880f
 80086ec:	0800869d 	.word	0x0800869d
 80086f0:	0800869d 	.word	0x0800869d
 80086f4:	0800884f 	.word	0x0800884f
 80086f8:	0800869d 	.word	0x0800869d
 80086fc:	08008751 	.word	0x08008751
 8008700:	0800869d 	.word	0x0800869d
 8008704:	0800869d 	.word	0x0800869d
 8008708:	08008817 	.word	0x08008817
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	1d1a      	adds	r2, r3, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	602a      	str	r2, [r5, #0]
 8008714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800871c:	2301      	movs	r3, #1
 800871e:	e0a3      	b.n	8008868 <_printf_i+0x1f4>
 8008720:	6820      	ldr	r0, [r4, #0]
 8008722:	6829      	ldr	r1, [r5, #0]
 8008724:	0606      	lsls	r6, r0, #24
 8008726:	f101 0304 	add.w	r3, r1, #4
 800872a:	d50a      	bpl.n	8008742 <_printf_i+0xce>
 800872c:	680e      	ldr	r6, [r1, #0]
 800872e:	602b      	str	r3, [r5, #0]
 8008730:	2e00      	cmp	r6, #0
 8008732:	da03      	bge.n	800873c <_printf_i+0xc8>
 8008734:	232d      	movs	r3, #45	; 0x2d
 8008736:	4276      	negs	r6, r6
 8008738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800873c:	485e      	ldr	r0, [pc, #376]	; (80088b8 <_printf_i+0x244>)
 800873e:	230a      	movs	r3, #10
 8008740:	e019      	b.n	8008776 <_printf_i+0x102>
 8008742:	680e      	ldr	r6, [r1, #0]
 8008744:	602b      	str	r3, [r5, #0]
 8008746:	f010 0f40 	tst.w	r0, #64	; 0x40
 800874a:	bf18      	it	ne
 800874c:	b236      	sxthne	r6, r6
 800874e:	e7ef      	b.n	8008730 <_printf_i+0xbc>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	6820      	ldr	r0, [r4, #0]
 8008754:	1d19      	adds	r1, r3, #4
 8008756:	6029      	str	r1, [r5, #0]
 8008758:	0601      	lsls	r1, r0, #24
 800875a:	d501      	bpl.n	8008760 <_printf_i+0xec>
 800875c:	681e      	ldr	r6, [r3, #0]
 800875e:	e002      	b.n	8008766 <_printf_i+0xf2>
 8008760:	0646      	lsls	r6, r0, #25
 8008762:	d5fb      	bpl.n	800875c <_printf_i+0xe8>
 8008764:	881e      	ldrh	r6, [r3, #0]
 8008766:	4854      	ldr	r0, [pc, #336]	; (80088b8 <_printf_i+0x244>)
 8008768:	2f6f      	cmp	r7, #111	; 0x6f
 800876a:	bf0c      	ite	eq
 800876c:	2308      	moveq	r3, #8
 800876e:	230a      	movne	r3, #10
 8008770:	2100      	movs	r1, #0
 8008772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008776:	6865      	ldr	r5, [r4, #4]
 8008778:	60a5      	str	r5, [r4, #8]
 800877a:	2d00      	cmp	r5, #0
 800877c:	bfa2      	ittt	ge
 800877e:	6821      	ldrge	r1, [r4, #0]
 8008780:	f021 0104 	bicge.w	r1, r1, #4
 8008784:	6021      	strge	r1, [r4, #0]
 8008786:	b90e      	cbnz	r6, 800878c <_printf_i+0x118>
 8008788:	2d00      	cmp	r5, #0
 800878a:	d04d      	beq.n	8008828 <_printf_i+0x1b4>
 800878c:	4615      	mov	r5, r2
 800878e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008792:	fb03 6711 	mls	r7, r3, r1, r6
 8008796:	5dc7      	ldrb	r7, [r0, r7]
 8008798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800879c:	4637      	mov	r7, r6
 800879e:	42bb      	cmp	r3, r7
 80087a0:	460e      	mov	r6, r1
 80087a2:	d9f4      	bls.n	800878e <_printf_i+0x11a>
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	d10b      	bne.n	80087c0 <_printf_i+0x14c>
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	07de      	lsls	r6, r3, #31
 80087ac:	d508      	bpl.n	80087c0 <_printf_i+0x14c>
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	6861      	ldr	r1, [r4, #4]
 80087b2:	4299      	cmp	r1, r3
 80087b4:	bfde      	ittt	le
 80087b6:	2330      	movle	r3, #48	; 0x30
 80087b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80087c0:	1b52      	subs	r2, r2, r5
 80087c2:	6122      	str	r2, [r4, #16]
 80087c4:	f8cd a000 	str.w	sl, [sp]
 80087c8:	464b      	mov	r3, r9
 80087ca:	aa03      	add	r2, sp, #12
 80087cc:	4621      	mov	r1, r4
 80087ce:	4640      	mov	r0, r8
 80087d0:	f7ff fee2 	bl	8008598 <_printf_common>
 80087d4:	3001      	adds	r0, #1
 80087d6:	d14c      	bne.n	8008872 <_printf_i+0x1fe>
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087dc:	b004      	add	sp, #16
 80087de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e2:	4835      	ldr	r0, [pc, #212]	; (80088b8 <_printf_i+0x244>)
 80087e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087e8:	6829      	ldr	r1, [r5, #0]
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80087f0:	6029      	str	r1, [r5, #0]
 80087f2:	061d      	lsls	r5, r3, #24
 80087f4:	d514      	bpl.n	8008820 <_printf_i+0x1ac>
 80087f6:	07df      	lsls	r7, r3, #31
 80087f8:	bf44      	itt	mi
 80087fa:	f043 0320 	orrmi.w	r3, r3, #32
 80087fe:	6023      	strmi	r3, [r4, #0]
 8008800:	b91e      	cbnz	r6, 800880a <_printf_i+0x196>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	f023 0320 	bic.w	r3, r3, #32
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	2310      	movs	r3, #16
 800880c:	e7b0      	b.n	8008770 <_printf_i+0xfc>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	f043 0320 	orr.w	r3, r3, #32
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	2378      	movs	r3, #120	; 0x78
 8008818:	4828      	ldr	r0, [pc, #160]	; (80088bc <_printf_i+0x248>)
 800881a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800881e:	e7e3      	b.n	80087e8 <_printf_i+0x174>
 8008820:	0659      	lsls	r1, r3, #25
 8008822:	bf48      	it	mi
 8008824:	b2b6      	uxthmi	r6, r6
 8008826:	e7e6      	b.n	80087f6 <_printf_i+0x182>
 8008828:	4615      	mov	r5, r2
 800882a:	e7bb      	b.n	80087a4 <_printf_i+0x130>
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	6826      	ldr	r6, [r4, #0]
 8008830:	6961      	ldr	r1, [r4, #20]
 8008832:	1d18      	adds	r0, r3, #4
 8008834:	6028      	str	r0, [r5, #0]
 8008836:	0635      	lsls	r5, r6, #24
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	d501      	bpl.n	8008840 <_printf_i+0x1cc>
 800883c:	6019      	str	r1, [r3, #0]
 800883e:	e002      	b.n	8008846 <_printf_i+0x1d2>
 8008840:	0670      	lsls	r0, r6, #25
 8008842:	d5fb      	bpl.n	800883c <_printf_i+0x1c8>
 8008844:	8019      	strh	r1, [r3, #0]
 8008846:	2300      	movs	r3, #0
 8008848:	6123      	str	r3, [r4, #16]
 800884a:	4615      	mov	r5, r2
 800884c:	e7ba      	b.n	80087c4 <_printf_i+0x150>
 800884e:	682b      	ldr	r3, [r5, #0]
 8008850:	1d1a      	adds	r2, r3, #4
 8008852:	602a      	str	r2, [r5, #0]
 8008854:	681d      	ldr	r5, [r3, #0]
 8008856:	6862      	ldr	r2, [r4, #4]
 8008858:	2100      	movs	r1, #0
 800885a:	4628      	mov	r0, r5
 800885c:	f7f7 fcb8 	bl	80001d0 <memchr>
 8008860:	b108      	cbz	r0, 8008866 <_printf_i+0x1f2>
 8008862:	1b40      	subs	r0, r0, r5
 8008864:	6060      	str	r0, [r4, #4]
 8008866:	6863      	ldr	r3, [r4, #4]
 8008868:	6123      	str	r3, [r4, #16]
 800886a:	2300      	movs	r3, #0
 800886c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008870:	e7a8      	b.n	80087c4 <_printf_i+0x150>
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	462a      	mov	r2, r5
 8008876:	4649      	mov	r1, r9
 8008878:	4640      	mov	r0, r8
 800887a:	47d0      	blx	sl
 800887c:	3001      	adds	r0, #1
 800887e:	d0ab      	beq.n	80087d8 <_printf_i+0x164>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	079b      	lsls	r3, r3, #30
 8008884:	d413      	bmi.n	80088ae <_printf_i+0x23a>
 8008886:	68e0      	ldr	r0, [r4, #12]
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	4298      	cmp	r0, r3
 800888c:	bfb8      	it	lt
 800888e:	4618      	movlt	r0, r3
 8008890:	e7a4      	b.n	80087dc <_printf_i+0x168>
 8008892:	2301      	movs	r3, #1
 8008894:	4632      	mov	r2, r6
 8008896:	4649      	mov	r1, r9
 8008898:	4640      	mov	r0, r8
 800889a:	47d0      	blx	sl
 800889c:	3001      	adds	r0, #1
 800889e:	d09b      	beq.n	80087d8 <_printf_i+0x164>
 80088a0:	3501      	adds	r5, #1
 80088a2:	68e3      	ldr	r3, [r4, #12]
 80088a4:	9903      	ldr	r1, [sp, #12]
 80088a6:	1a5b      	subs	r3, r3, r1
 80088a8:	42ab      	cmp	r3, r5
 80088aa:	dcf2      	bgt.n	8008892 <_printf_i+0x21e>
 80088ac:	e7eb      	b.n	8008886 <_printf_i+0x212>
 80088ae:	2500      	movs	r5, #0
 80088b0:	f104 0619 	add.w	r6, r4, #25
 80088b4:	e7f5      	b.n	80088a2 <_printf_i+0x22e>
 80088b6:	bf00      	nop
 80088b8:	08009a79 	.word	0x08009a79
 80088bc:	08009a8a 	.word	0x08009a8a

080088c0 <_sbrk_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4d06      	ldr	r5, [pc, #24]	; (80088dc <_sbrk_r+0x1c>)
 80088c4:	2300      	movs	r3, #0
 80088c6:	4604      	mov	r4, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	f7fa f9a0 	bl	8002c10 <_sbrk>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_sbrk_r+0x1a>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_sbrk_r+0x1a>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	20000614 	.word	0x20000614

080088e0 <__sread>:
 80088e0:	b510      	push	{r4, lr}
 80088e2:	460c      	mov	r4, r1
 80088e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e8:	f000 f8a0 	bl	8008a2c <_read_r>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	bfab      	itete	ge
 80088f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088f2:	89a3      	ldrhlt	r3, [r4, #12]
 80088f4:	181b      	addge	r3, r3, r0
 80088f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088fa:	bfac      	ite	ge
 80088fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80088fe:	81a3      	strhlt	r3, [r4, #12]
 8008900:	bd10      	pop	{r4, pc}

08008902 <__swrite>:
 8008902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008906:	461f      	mov	r7, r3
 8008908:	898b      	ldrh	r3, [r1, #12]
 800890a:	05db      	lsls	r3, r3, #23
 800890c:	4605      	mov	r5, r0
 800890e:	460c      	mov	r4, r1
 8008910:	4616      	mov	r6, r2
 8008912:	d505      	bpl.n	8008920 <__swrite+0x1e>
 8008914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008918:	2302      	movs	r3, #2
 800891a:	2200      	movs	r2, #0
 800891c:	f000 f868 	bl	80089f0 <_lseek_r>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800892a:	81a3      	strh	r3, [r4, #12]
 800892c:	4632      	mov	r2, r6
 800892e:	463b      	mov	r3, r7
 8008930:	4628      	mov	r0, r5
 8008932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008936:	f000 b817 	b.w	8008968 <_write_r>

0800893a <__sseek>:
 800893a:	b510      	push	{r4, lr}
 800893c:	460c      	mov	r4, r1
 800893e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008942:	f000 f855 	bl	80089f0 <_lseek_r>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	bf15      	itete	ne
 800894c:	6560      	strne	r0, [r4, #84]	; 0x54
 800894e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008956:	81a3      	strheq	r3, [r4, #12]
 8008958:	bf18      	it	ne
 800895a:	81a3      	strhne	r3, [r4, #12]
 800895c:	bd10      	pop	{r4, pc}

0800895e <__sclose>:
 800895e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008962:	f000 b813 	b.w	800898c <_close_r>
	...

08008968 <_write_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4d07      	ldr	r5, [pc, #28]	; (8008988 <_write_r+0x20>)
 800896c:	4604      	mov	r4, r0
 800896e:	4608      	mov	r0, r1
 8008970:	4611      	mov	r1, r2
 8008972:	2200      	movs	r2, #0
 8008974:	602a      	str	r2, [r5, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	f7fa f8f9 	bl	8002b6e <_write>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_write_r+0x1e>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	b103      	cbz	r3, 8008986 <_write_r+0x1e>
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	20000614 	.word	0x20000614

0800898c <_close_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4d06      	ldr	r5, [pc, #24]	; (80089a8 <_close_r+0x1c>)
 8008990:	2300      	movs	r3, #0
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	602b      	str	r3, [r5, #0]
 8008998:	f7fa f905 	bl	8002ba6 <_close>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_close_r+0x1a>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_close_r+0x1a>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	20000614 	.word	0x20000614

080089ac <_fstat_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4d07      	ldr	r5, [pc, #28]	; (80089cc <_fstat_r+0x20>)
 80089b0:	2300      	movs	r3, #0
 80089b2:	4604      	mov	r4, r0
 80089b4:	4608      	mov	r0, r1
 80089b6:	4611      	mov	r1, r2
 80089b8:	602b      	str	r3, [r5, #0]
 80089ba:	f7fa f900 	bl	8002bbe <_fstat>
 80089be:	1c43      	adds	r3, r0, #1
 80089c0:	d102      	bne.n	80089c8 <_fstat_r+0x1c>
 80089c2:	682b      	ldr	r3, [r5, #0]
 80089c4:	b103      	cbz	r3, 80089c8 <_fstat_r+0x1c>
 80089c6:	6023      	str	r3, [r4, #0]
 80089c8:	bd38      	pop	{r3, r4, r5, pc}
 80089ca:	bf00      	nop
 80089cc:	20000614 	.word	0x20000614

080089d0 <_isatty_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d06      	ldr	r5, [pc, #24]	; (80089ec <_isatty_r+0x1c>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	602b      	str	r3, [r5, #0]
 80089dc:	f7fa f8ff 	bl	8002bde <_isatty>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_isatty_r+0x1a>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_isatty_r+0x1a>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	20000614 	.word	0x20000614

080089f0 <_lseek_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4d07      	ldr	r5, [pc, #28]	; (8008a10 <_lseek_r+0x20>)
 80089f4:	4604      	mov	r4, r0
 80089f6:	4608      	mov	r0, r1
 80089f8:	4611      	mov	r1, r2
 80089fa:	2200      	movs	r2, #0
 80089fc:	602a      	str	r2, [r5, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	f7fa f8f8 	bl	8002bf4 <_lseek>
 8008a04:	1c43      	adds	r3, r0, #1
 8008a06:	d102      	bne.n	8008a0e <_lseek_r+0x1e>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	b103      	cbz	r3, 8008a0e <_lseek_r+0x1e>
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	20000614 	.word	0x20000614

08008a14 <__malloc_lock>:
 8008a14:	4801      	ldr	r0, [pc, #4]	; (8008a1c <__malloc_lock+0x8>)
 8008a16:	f7ff bb15 	b.w	8008044 <__retarget_lock_acquire_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	20000608 	.word	0x20000608

08008a20 <__malloc_unlock>:
 8008a20:	4801      	ldr	r0, [pc, #4]	; (8008a28 <__malloc_unlock+0x8>)
 8008a22:	f7ff bb10 	b.w	8008046 <__retarget_lock_release_recursive>
 8008a26:	bf00      	nop
 8008a28:	20000608 	.word	0x20000608

08008a2c <_read_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4d07      	ldr	r5, [pc, #28]	; (8008a4c <_read_r+0x20>)
 8008a30:	4604      	mov	r4, r0
 8008a32:	4608      	mov	r0, r1
 8008a34:	4611      	mov	r1, r2
 8008a36:	2200      	movs	r2, #0
 8008a38:	602a      	str	r2, [r5, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f7fa f87a 	bl	8002b34 <_read>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d102      	bne.n	8008a4a <_read_r+0x1e>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	b103      	cbz	r3, 8008a4a <_read_r+0x1e>
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	20000614 	.word	0x20000614

08008a50 <_init>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	bf00      	nop
 8008a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a56:	bc08      	pop	{r3}
 8008a58:	469e      	mov	lr, r3
 8008a5a:	4770      	bx	lr

08008a5c <_fini>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	bf00      	nop
 8008a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a62:	bc08      	pop	{r3}
 8008a64:	469e      	mov	lr, r3
 8008a66:	4770      	bx	lr
